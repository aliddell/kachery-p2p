{"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/core.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/core.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":2653}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":51}},"5":{"start":{"line":8,"column":22},"end":{"line":8,"column":54}},"6":{"start":{"line":9,"column":15},"end":{"line":9,"column":40}},"7":{"start":{"line":10,"column":28},"end":{"line":10,"column":58}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":20}},"9":{"start":{"line":12,"column":0},"end":{"line":16,"column":2}},"10":{"start":{"line":13,"column":4},"end":{"line":14,"column":21}},"11":{"start":{"line":14,"column":8},"end":{"line":14,"column":21}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":41}},"13":{"start":{"line":17,"column":0},"end":{"line":28,"column":2}},"14":{"start":{"line":19,"column":4},"end":{"line":24,"column":5}},"15":{"start":{"line":20,"column":8},"end":{"line":20,"column":26}},"16":{"start":{"line":23,"column":8},"end":{"line":23,"column":20}},"17":{"start":{"line":25,"column":4},"end":{"line":26,"column":20}},"18":{"start":{"line":26,"column":8},"end":{"line":26,"column":20}},"19":{"start":{"line":27,"column":4},"end":{"line":27,"column":13}},"20":{"start":{"line":29,"column":0},"end":{"line":54,"column":2}},"21":{"start":{"line":30,"column":4},"end":{"line":31,"column":21}},"22":{"start":{"line":31,"column":8},"end":{"line":31,"column":21}},"23":{"start":{"line":32,"column":26},"end":{"line":34,"column":5}},"24":{"start":{"line":33,"column":8},"end":{"line":33,"column":71}},"25":{"start":{"line":35,"column":20},"end":{"line":37,"column":5}},"26":{"start":{"line":36,"column":8},"end":{"line":36,"column":174}},"27":{"start":{"line":38,"column":4},"end":{"line":40,"column":5}},"28":{"start":{"line":39,"column":8},"end":{"line":39,"column":21}},"29":{"start":{"line":41,"column":4},"end":{"line":52,"column":5}},"30":{"start":{"line":42,"column":8},"end":{"line":51,"column":9}},"31":{"start":{"line":43,"column":12},"end":{"line":45,"column":13}},"32":{"start":{"line":44,"column":16},"end":{"line":44,"column":29}},"33":{"start":{"line":46,"column":12},"end":{"line":50,"column":13}},"34":{"start":{"line":47,"column":16},"end":{"line":49,"column":17}},"35":{"start":{"line":48,"column":20},"end":{"line":48,"column":33}},"36":{"start":{"line":53,"column":4},"end":{"line":53,"column":16}},"37":{"start":{"line":56,"column":0},"end":{"line":58,"column":2}},"38":{"start":{"line":57,"column":4},"end":{"line":57,"column":53}},"39":{"start":{"line":60,"column":0},"end":{"line":62,"column":2}},"40":{"start":{"line":61,"column":4},"end":{"line":61,"column":53}},"41":{"start":{"line":64,"column":0},"end":{"line":66,"column":2}},"42":{"start":{"line":65,"column":4},"end":{"line":65,"column":55}},"43":{"start":{"line":68,"column":0},"end":{"line":70,"column":2}},"44":{"start":{"line":69,"column":4},"end":{"line":69,"column":53}},"45":{"start":{"line":72,"column":0},"end":{"line":74,"column":2}},"46":{"start":{"line":73,"column":4},"end":{"line":73,"column":53}},"47":{"start":{"line":76,"column":0},"end":{"line":78,"column":2}},"48":{"start":{"line":77,"column":4},"end":{"line":77,"column":22}},"49":{"start":{"line":80,"column":0},"end":{"line":82,"column":2}},"50":{"start":{"line":81,"column":4},"end":{"line":81,"column":54}},"51":{"start":{"line":84,"column":0},"end":{"line":92,"column":2}},"52":{"start":{"line":85,"column":4},"end":{"line":91,"column":6}},"53":{"start":{"line":86,"column":8},"end":{"line":89,"column":9}},"54":{"start":{"line":87,"column":12},"end":{"line":88,"column":28}},"55":{"start":{"line":88,"column":16},"end":{"line":88,"column":28}},"56":{"start":{"line":90,"column":8},"end":{"line":90,"column":21}},"57":{"start":{"line":93,"column":0},"end":{"line":106,"column":2}},"58":{"start":{"line":94,"column":4},"end":{"line":105,"column":5}},"59":{"start":{"line":95,"column":29},"end":{"line":95,"column":47}},"60":{"start":{"line":96,"column":8},"end":{"line":98,"column":10}},"61":{"start":{"line":97,"column":12},"end":{"line":97,"column":60}},"62":{"start":{"line":101,"column":8},"end":{"line":104,"column":10}},"63":{"start":{"line":102,"column":24},"end":{"line":102,"column":42}},"64":{"start":{"line":103,"column":12},"end":{"line":103,"column":76}},"65":{"start":{"line":108,"column":0},"end":{"line":112,"column":2}},"66":{"start":{"line":109,"column":4},"end":{"line":111,"column":6}},"67":{"start":{"line":110,"column":8},"end":{"line":110,"column":27}},"68":{"start":{"line":114,"column":0},"end":{"line":126,"column":2}},"69":{"start":{"line":115,"column":4},"end":{"line":125,"column":6}},"70":{"start":{"line":116,"column":8},"end":{"line":124,"column":25}},"71":{"start":{"line":117,"column":12},"end":{"line":120,"column":13}},"72":{"start":{"line":118,"column":16},"end":{"line":119,"column":33}},"73":{"start":{"line":119,"column":20},"end":{"line":119,"column":33}},"74":{"start":{"line":121,"column":12},"end":{"line":121,"column":24}},"75":{"start":{"line":124,"column":12},"end":{"line":124,"column":25}},"76":{"start":{"line":128,"column":0},"end":{"line":142,"column":2}},"77":{"start":{"line":129,"column":4},"end":{"line":141,"column":6}},"78":{"start":{"line":130,"column":8},"end":{"line":140,"column":25}},"79":{"start":{"line":131,"column":12},"end":{"line":136,"column":13}},"80":{"start":{"line":132,"column":16},"end":{"line":133,"column":33}},"81":{"start":{"line":133,"column":20},"end":{"line":133,"column":33}},"82":{"start":{"line":134,"column":16},"end":{"line":135,"column":33}},"83":{"start":{"line":135,"column":20},"end":{"line":135,"column":33}},"84":{"start":{"line":137,"column":12},"end":{"line":137,"column":24}},"85":{"start":{"line":140,"column":12},"end":{"line":140,"column":25}},"86":{"start":{"line":143,"column":0},"end":{"line":166,"column":2}},"87":{"start":{"line":144,"column":4},"end":{"line":145,"column":21}},"88":{"start":{"line":145,"column":8},"end":{"line":145,"column":21}},"89":{"start":{"line":146,"column":4},"end":{"line":147,"column":21}},"90":{"start":{"line":147,"column":8},"end":{"line":147,"column":21}},"91":{"start":{"line":148,"column":4},"end":{"line":151,"column":5}},"92":{"start":{"line":149,"column":8},"end":{"line":150,"column":25}},"93":{"start":{"line":150,"column":12},"end":{"line":150,"column":25}},"94":{"start":{"line":152,"column":4},"end":{"line":164,"column":5}},"95":{"start":{"line":153,"column":22},"end":{"line":153,"column":29}},"96":{"start":{"line":154,"column":8},"end":{"line":163,"column":9}},"97":{"start":{"line":155,"column":12},"end":{"line":156,"column":29}},"98":{"start":{"line":156,"column":16},"end":{"line":156,"column":29}},"99":{"start":{"line":159,"column":12},"end":{"line":160,"column":29}},"100":{"start":{"line":160,"column":16},"end":{"line":160,"column":29}},"101":{"start":{"line":161,"column":12},"end":{"line":162,"column":29}},"102":{"start":{"line":162,"column":16},"end":{"line":162,"column":29}},"103":{"start":{"line":165,"column":4},"end":{"line":165,"column":16}},"104":{"start":{"line":167,"column":0},"end":{"line":171,"column":2}},"105":{"start":{"line":168,"column":4},"end":{"line":169,"column":21}},"106":{"start":{"line":169,"column":8},"end":{"line":169,"column":21}},"107":{"start":{"line":170,"column":4},"end":{"line":170,"column":48}},"108":{"start":{"line":172,"column":0},"end":{"line":172,"column":56}},"109":{"start":{"line":173,"column":0},"end":{"line":177,"column":2}},"110":{"start":{"line":174,"column":4},"end":{"line":175,"column":21}},"111":{"start":{"line":175,"column":8},"end":{"line":175,"column":21}},"112":{"start":{"line":176,"column":4},"end":{"line":176,"column":50}},"113":{"start":{"line":178,"column":0},"end":{"line":182,"column":2}},"114":{"start":{"line":179,"column":4},"end":{"line":180,"column":21}},"115":{"start":{"line":180,"column":8},"end":{"line":180,"column":21}},"116":{"start":{"line":181,"column":4},"end":{"line":181,"column":30}},"117":{"start":{"line":183,"column":0},"end":{"line":185,"column":2}},"118":{"start":{"line":184,"column":4},"end":{"line":184,"column":13}},"119":{"start":{"line":186,"column":0},"end":{"line":201,"column":2}},"120":{"start":{"line":188,"column":4},"end":{"line":189,"column":21}},"121":{"start":{"line":189,"column":8},"end":{"line":189,"column":21}},"122":{"start":{"line":190,"column":17},"end":{"line":190,"column":21}},"123":{"start":{"line":191,"column":4},"end":{"line":196,"column":7}},"124":{"start":{"line":192,"column":8},"end":{"line":193,"column":27}},"125":{"start":{"line":193,"column":12},"end":{"line":193,"column":27}},"126":{"start":{"line":194,"column":8},"end":{"line":195,"column":27}},"127":{"start":{"line":195,"column":12},"end":{"line":195,"column":27}},"128":{"start":{"line":200,"column":4},"end":{"line":200,"column":18}},"129":{"start":{"line":202,"column":0},"end":{"line":207,"column":2}},"130":{"start":{"line":203,"column":4},"end":{"line":206,"column":7}},"131":{"start":{"line":208,"column":0},"end":{"line":208,"column":72}},"132":{"start":{"line":209,"column":0},"end":{"line":217,"column":2}},"133":{"start":{"line":210,"column":4},"end":{"line":211,"column":21}},"134":{"start":{"line":211,"column":8},"end":{"line":211,"column":21}},"135":{"start":{"line":212,"column":4},"end":{"line":213,"column":21}},"136":{"start":{"line":213,"column":8},"end":{"line":213,"column":21}},"137":{"start":{"line":214,"column":4},"end":{"line":215,"column":21}},"138":{"start":{"line":215,"column":8},"end":{"line":215,"column":21}},"139":{"start":{"line":216,"column":4},"end":{"line":216,"column":16}},"140":{"start":{"line":218,"column":0},"end":{"line":221,"column":2}},"141":{"start":{"line":219,"column":16},"end":{"line":219,"column":38}},"142":{"start":{"line":220,"column":4},"end":{"line":220,"column":15}},"143":{"start":{"line":222,"column":0},"end":{"line":224,"column":2}},"144":{"start":{"line":223,"column":4},"end":{"line":223,"column":13}},"145":{"start":{"line":225,"column":0},"end":{"line":227,"column":2}},"146":{"start":{"line":226,"column":4},"end":{"line":226,"column":46}},"147":{"start":{"line":228,"column":0},"end":{"line":232,"column":2}},"148":{"start":{"line":229,"column":4},"end":{"line":230,"column":21}},"149":{"start":{"line":230,"column":8},"end":{"line":230,"column":21}},"150":{"start":{"line":231,"column":4},"end":{"line":231,"column":44}},"151":{"start":{"line":233,"column":0},"end":{"line":237,"column":2}},"152":{"start":{"line":234,"column":4},"end":{"line":235,"column":21}},"153":{"start":{"line":235,"column":8},"end":{"line":235,"column":21}},"154":{"start":{"line":236,"column":4},"end":{"line":236,"column":45}},"155":{"start":{"line":238,"column":28},"end":{"line":242,"column":1}},"156":{"start":{"line":240,"column":20},"end":{"line":240,"column":96}},"157":{"start":{"line":241,"column":4},"end":{"line":241,"column":31}},"158":{"start":{"line":243,"column":0},"end":{"line":248,"column":2}},"159":{"start":{"line":244,"column":4},"end":{"line":247,"column":7}},"160":{"start":{"line":249,"column":0},"end":{"line":259,"column":2}},"161":{"start":{"line":250,"column":24},"end":{"line":250,"column":37}},"162":{"start":{"line":251,"column":18},"end":{"line":251,"column":37}},"163":{"start":{"line":252,"column":4},"end":{"line":256,"column":5}},"164":{"start":{"line":253,"column":8},"end":{"line":253,"column":51}},"165":{"start":{"line":254,"column":8},"end":{"line":254,"column":37}},"166":{"start":{"line":255,"column":8},"end":{"line":255,"column":48}},"167":{"start":{"line":257,"column":18},"end":{"line":257,"column":37}},"168":{"start":{"line":258,"column":4},"end":{"line":258,"column":27}},"169":{"start":{"line":260,"column":0},"end":{"line":264,"column":2}},"170":{"start":{"line":261,"column":4},"end":{"line":262,"column":21}},"171":{"start":{"line":262,"column":8},"end":{"line":262,"column":21}},"172":{"start":{"line":263,"column":4},"end":{"line":263,"column":36}},"173":{"start":{"line":265,"column":0},"end":{"line":269,"column":2}},"174":{"start":{"line":266,"column":4},"end":{"line":267,"column":21}},"175":{"start":{"line":267,"column":8},"end":{"line":267,"column":21}},"176":{"start":{"line":268,"column":4},"end":{"line":268,"column":36}},"177":{"start":{"line":270,"column":0},"end":{"line":274,"column":2}},"178":{"start":{"line":271,"column":4},"end":{"line":272,"column":21}},"179":{"start":{"line":272,"column":8},"end":{"line":272,"column":21}},"180":{"start":{"line":273,"column":4},"end":{"line":273,"column":40}},"181":{"start":{"line":275,"column":0},"end":{"line":279,"column":2}},"182":{"start":{"line":276,"column":4},"end":{"line":277,"column":21}},"183":{"start":{"line":277,"column":8},"end":{"line":277,"column":21}},"184":{"start":{"line":278,"column":4},"end":{"line":278,"column":40}},"185":{"start":{"line":280,"column":0},"end":{"line":284,"column":2}},"186":{"start":{"line":281,"column":4},"end":{"line":282,"column":21}},"187":{"start":{"line":282,"column":8},"end":{"line":282,"column":21}},"188":{"start":{"line":283,"column":4},"end":{"line":283,"column":40}},"189":{"start":{"line":285,"column":0},"end":{"line":289,"column":2}},"190":{"start":{"line":286,"column":4},"end":{"line":287,"column":21}},"191":{"start":{"line":287,"column":8},"end":{"line":287,"column":21}},"192":{"start":{"line":288,"column":4},"end":{"line":288,"column":50}},"193":{"start":{"line":290,"column":0},"end":{"line":294,"column":2}},"194":{"start":{"line":291,"column":4},"end":{"line":292,"column":21}},"195":{"start":{"line":292,"column":8},"end":{"line":292,"column":21}},"196":{"start":{"line":293,"column":4},"end":{"line":293,"column":40}},"197":{"start":{"line":295,"column":0},"end":{"line":299,"column":2}},"198":{"start":{"line":296,"column":4},"end":{"line":297,"column":21}},"199":{"start":{"line":297,"column":8},"end":{"line":297,"column":21}},"200":{"start":{"line":298,"column":4},"end":{"line":298,"column":42}},"201":{"start":{"line":300,"column":0},"end":{"line":309,"column":2}},"202":{"start":{"line":301,"column":4},"end":{"line":308,"column":7}},"203":{"start":{"line":311,"column":0},"end":{"line":314,"column":2}},"204":{"start":{"line":313,"column":4},"end":{"line":313,"column":59}},"205":{"start":{"line":315,"column":0},"end":{"line":317,"column":2}},"206":{"start":{"line":316,"column":4},"end":{"line":316,"column":18}},"207":{"start":{"line":319,"column":0},"end":{"line":321,"column":2}},"208":{"start":{"line":320,"column":4},"end":{"line":320,"column":13}},"209":{"start":{"line":322,"column":0},"end":{"line":326,"column":2}},"210":{"start":{"line":323,"column":4},"end":{"line":325,"column":7}},"211":{"start":{"line":324,"column":23},"end":{"line":324,"column":39}},"212":{"start":{"line":327,"column":0},"end":{"line":335,"column":2}},"213":{"start":{"line":328,"column":4},"end":{"line":333,"column":21}},"214":{"start":{"line":333,"column":8},"end":{"line":333,"column":21}},"215":{"start":{"line":334,"column":4},"end":{"line":334,"column":29}},"216":{"start":{"line":336,"column":0},"end":{"line":340,"column":2}},"217":{"start":{"line":337,"column":4},"end":{"line":338,"column":21}},"218":{"start":{"line":338,"column":8},"end":{"line":338,"column":21}},"219":{"start":{"line":339,"column":4},"end":{"line":339,"column":38}},"220":{"start":{"line":341,"column":0},"end":{"line":343,"column":2}},"221":{"start":{"line":342,"column":4},"end":{"line":342,"column":40}},"222":{"start":{"line":344,"column":0},"end":{"line":344,"column":103}},"223":{"start":{"line":344,"column":35},"end":{"line":344,"column":100}},"224":{"start":{"line":345,"column":0},"end":{"line":355,"column":2}},"225":{"start":{"line":346,"column":4},"end":{"line":354,"column":7}},"226":{"start":{"line":356,"column":0},"end":{"line":359,"column":2}},"227":{"start":{"line":360,"column":0},"end":{"line":371,"column":2}},"228":{"start":{"line":372,"column":0},"end":{"line":377,"column":2}},"229":{"start":{"line":373,"column":4},"end":{"line":376,"column":7}},"230":{"start":{"line":378,"column":0},"end":{"line":378,"column":114}},"231":{"start":{"line":378,"column":41},"end":{"line":378,"column":111}},"232":{"start":{"line":380,"column":0},"end":{"line":380,"column":49}},"233":{"start":{"line":381,"column":0},"end":{"line":383,"column":2}},"234":{"start":{"line":382,"column":4},"end":{"line":382,"column":31}},"235":{"start":{"line":384,"column":0},"end":{"line":384,"column":117}},"236":{"start":{"line":384,"column":40},"end":{"line":384,"column":114}},"237":{"start":{"line":385,"column":0},"end":{"line":385,"column":65}},"238":{"start":{"line":386,"column":0},"end":{"line":388,"column":2}},"239":{"start":{"line":387,"column":4},"end":{"line":387,"column":31}},"240":{"start":{"line":389,"column":0},"end":{"line":389,"column":141}},"241":{"start":{"line":389,"column":48},"end":{"line":389,"column":138}},"242":{"start":{"line":390,"column":0},"end":{"line":399,"column":2}},"243":{"start":{"line":400,"column":0},"end":{"line":415,"column":2}},"244":{"start":{"line":401,"column":4},"end":{"line":411,"column":21}},"245":{"start":{"line":411,"column":8},"end":{"line":411,"column":21}},"246":{"start":{"line":414,"column":4},"end":{"line":414,"column":16}},"247":{"start":{"line":417,"column":0},"end":{"line":417,"column":135}},"248":{"start":{"line":417,"column":46},"end":{"line":417,"column":132}},"249":{"start":{"line":419,"column":0},"end":{"line":419,"column":68}},"250":{"start":{"line":420,"column":0},"end":{"line":422,"column":2}},"251":{"start":{"line":421,"column":4},"end":{"line":421,"column":73}},"252":{"start":{"line":423,"column":0},"end":{"line":425,"column":2}},"253":{"start":{"line":424,"column":4},"end":{"line":424,"column":13}},"254":{"start":{"line":426,"column":0},"end":{"line":426,"column":144}},"255":{"start":{"line":426,"column":49},"end":{"line":426,"column":141}},"256":{"start":{"line":427,"column":0},"end":{"line":433,"column":2}},"257":{"start":{"line":428,"column":4},"end":{"line":431,"column":7}},"258":{"start":{"line":434,"column":0},"end":{"line":434,"column":71}},"259":{"start":{"line":435,"column":0},"end":{"line":435,"column":120}},"260":{"start":{"line":435,"column":41},"end":{"line":435,"column":117}},"261":{"start":{"line":436,"column":0},"end":{"line":438,"column":2}},"262":{"start":{"line":437,"column":4},"end":{"line":437,"column":31}},"263":{"start":{"line":439,"column":0},"end":{"line":439,"column":41}},"264":{"start":{"line":440,"column":0},"end":{"line":440,"column":99}},"265":{"start":{"line":440,"column":34},"end":{"line":440,"column":96}},"266":{"start":{"line":441,"column":0},"end":{"line":443,"column":2}},"267":{"start":{"line":442,"column":4},"end":{"line":442,"column":54}},"268":{"start":{"line":444,"column":0},"end":{"line":450,"column":2}},"269":{"start":{"line":445,"column":4},"end":{"line":449,"column":5}},"270":{"start":{"line":446,"column":8},"end":{"line":446,"column":17}},"271":{"start":{"line":448,"column":8},"end":{"line":448,"column":86}},"272":{"start":{"line":451,"column":0},"end":{"line":451,"column":91}},"273":{"start":{"line":452,"column":0},"end":{"line":462,"column":2}},"274":{"start":{"line":453,"column":4},"end":{"line":453,"column":74}},"275":{"start":{"line":454,"column":4},"end":{"line":461,"column":5}},"276":{"start":{"line":455,"column":32},"end":{"line":455,"column":57}},"277":{"start":{"line":456,"column":16},"end":{"line":456,"column":53}},"278":{"start":{"line":457,"column":8},"end":{"line":457,"column":32}},"279":{"start":{"line":460,"column":8},"end":{"line":460,"column":107}},"280":{"start":{"line":464,"column":0},"end":{"line":468,"column":2}},"281":{"start":{"line":465,"column":4},"end":{"line":467,"column":8}},"282":{"start":{"line":466,"column":8},"end":{"line":466,"column":27}},"283":{"start":{"line":469,"column":0},"end":{"line":475,"column":2}},"284":{"start":{"line":470,"column":16},"end":{"line":470,"column":18}},"285":{"start":{"line":471,"column":4},"end":{"line":473,"column":7}},"286":{"start":{"line":472,"column":8},"end":{"line":472,"column":30}},"287":{"start":{"line":474,"column":4},"end":{"line":474,"column":15}},"288":{"start":{"line":476,"column":0},"end":{"line":481,"column":2}},"289":{"start":{"line":477,"column":4},"end":{"line":480,"column":6}},"290":{"start":{"line":482,"column":0},"end":{"line":487,"column":2}},"291":{"start":{"line":483,"column":4},"end":{"line":486,"column":6}},"292":{"start":{"line":488,"column":0},"end":{"line":493,"column":2}},"293":{"start":{"line":489,"column":4},"end":{"line":492,"column":7}},"294":{"start":{"line":494,"column":0},"end":{"line":499,"column":2}},"295":{"start":{"line":495,"column":4},"end":{"line":498,"column":7}},"296":{"start":{"line":500,"column":0},"end":{"line":500,"column":91}},"297":{"start":{"line":501,"column":0},"end":{"line":501,"column":91}},"298":{"start":{"line":502,"column":0},"end":{"line":505,"column":2}},"299":{"start":{"line":503,"column":4},"end":{"line":503,"column":90}},"300":{"start":{"line":504,"column":4},"end":{"line":504,"column":91}},"301":{"start":{"line":506,"column":0},"end":{"line":510,"column":2}},"302":{"start":{"line":507,"column":4},"end":{"line":509,"column":7}},"303":{"start":{"line":511,"column":0},"end":{"line":513,"column":2}},"304":{"start":{"line":512,"column":4},"end":{"line":512,"column":152}},"305":{"start":{"line":514,"column":0},"end":{"line":516,"column":2}},"306":{"start":{"line":515,"column":4},"end":{"line":515,"column":31}},"307":{"start":{"line":517,"column":0},"end":{"line":517,"column":63}},"308":{"start":{"line":518,"column":0},"end":{"line":518,"column":123}},"309":{"start":{"line":518,"column":42},"end":{"line":518,"column":120}},"310":{"start":{"line":519,"column":0},"end":{"line":523,"column":2}},"311":{"start":{"line":524,"column":0},"end":{"line":530,"column":2}},"312":{"start":{"line":525,"column":4},"end":{"line":529,"column":7}},"313":{"start":{"line":531,"column":0},"end":{"line":531,"column":111}},"314":{"start":{"line":531,"column":38},"end":{"line":531,"column":108}},"315":{"start":{"line":532,"column":0},"end":{"line":534,"column":2}},"316":{"start":{"line":533,"column":4},"end":{"line":533,"column":62}},"317":{"start":{"line":535,"column":0},"end":{"line":542,"column":2}},"318":{"start":{"line":536,"column":4},"end":{"line":537,"column":21}},"319":{"start":{"line":537,"column":8},"end":{"line":537,"column":21}},"320":{"start":{"line":538,"column":18},"end":{"line":538,"column":30}},"321":{"start":{"line":539,"column":4},"end":{"line":541,"column":42}},"322":{"start":{"line":543,"column":0},"end":{"line":543,"column":103}},"323":{"start":{"line":544,"column":0},"end":{"line":546,"column":2}},"324":{"start":{"line":545,"column":4},"end":{"line":545,"column":76}},"325":{"start":{"line":547,"column":0},"end":{"line":549,"column":2}},"326":{"start":{"line":548,"column":4},"end":{"line":548,"column":85}},"327":{"start":{"line":550,"column":0},"end":{"line":552,"column":2}},"328":{"start":{"line":551,"column":4},"end":{"line":551,"column":34}},"329":{"start":{"line":553,"column":0},"end":{"line":555,"column":2}},"330":{"start":{"line":554,"column":4},"end":{"line":554,"column":34}},"331":{"start":{"line":556,"column":0},"end":{"line":560,"column":2}},"332":{"start":{"line":557,"column":4},"end":{"line":558,"column":21}},"333":{"start":{"line":558,"column":8},"end":{"line":558,"column":21}},"334":{"start":{"line":559,"column":4},"end":{"line":559,"column":51}},"335":{"start":{"line":561,"column":0},"end":{"line":568,"column":2}},"336":{"start":{"line":562,"column":4},"end":{"line":567,"column":7}},"337":{"start":{"line":569,"column":0},"end":{"line":574,"column":2}},"338":{"start":{"line":575,"column":0},"end":{"line":575,"column":135}},"339":{"start":{"line":575,"column":46},"end":{"line":575,"column":132}},"340":{"start":{"line":576,"column":0},"end":{"line":580,"column":2}},"341":{"start":{"line":577,"column":4},"end":{"line":579,"column":7}},"342":{"start":{"line":581,"column":0},"end":{"line":583,"column":2}},"343":{"start":{"line":582,"column":4},"end":{"line":582,"column":111}},"344":{"start":{"line":584,"column":0},"end":{"line":588,"column":2}},"345":{"start":{"line":585,"column":4},"end":{"line":587,"column":7}},"346":{"start":{"line":589,"column":0},"end":{"line":589,"column":73}},"347":{"start":{"line":590,"column":0},"end":{"line":590,"column":108}},"348":{"start":{"line":590,"column":37},"end":{"line":590,"column":105}},"349":{"start":{"line":591,"column":0},"end":{"line":598,"column":2}},"350":{"start":{"line":592,"column":4},"end":{"line":597,"column":7}},"351":{"start":{"line":599,"column":0},"end":{"line":604,"column":2}},"352":{"start":{"line":600,"column":4},"end":{"line":603,"column":7}},"353":{"start":{"line":605,"column":0},"end":{"line":616,"column":2}},"354":{"start":{"line":617,"column":0},"end":{"line":619,"column":2}},"355":{"start":{"line":618,"column":4},"end":{"line":618,"column":98}},"356":{"start":{"line":620,"column":0},"end":{"line":626,"column":2}},"357":{"start":{"line":621,"column":4},"end":{"line":622,"column":67}},"358":{"start":{"line":622,"column":8},"end":{"line":622,"column":67}},"359":{"start":{"line":623,"column":4},"end":{"line":624,"column":67}},"360":{"start":{"line":624,"column":8},"end":{"line":624,"column":67}},"361":{"start":{"line":625,"column":4},"end":{"line":625,"column":107}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":23},"end":{"line":12,"column":24}},"loc":{"start":{"line":12,"column":30},"end":{"line":16,"column":1}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":29},"end":{"line":17,"column":30}},"loc":{"start":{"line":17,"column":36},"end":{"line":28,"column":1}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":29},"end":{"line":29,"column":30}},"loc":{"start":{"line":29,"column":38},"end":{"line":54,"column":1}},"line":29},"4":{"name":"(anonymous_4)","decl":{"start":{"line":32,"column":26},"end":{"line":32,"column":27}},"loc":{"start":{"line":32,"column":33},"end":{"line":34,"column":5}},"line":32},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":20},"end":{"line":35,"column":21}},"loc":{"start":{"line":35,"column":27},"end":{"line":37,"column":5}},"line":35},"6":{"name":"(anonymous_6)","decl":{"start":{"line":56,"column":19},"end":{"line":56,"column":20}},"loc":{"start":{"line":56,"column":26},"end":{"line":58,"column":1}},"line":56},"7":{"name":"(anonymous_7)","decl":{"start":{"line":60,"column":19},"end":{"line":60,"column":20}},"loc":{"start":{"line":60,"column":26},"end":{"line":62,"column":1}},"line":60},"8":{"name":"(anonymous_8)","decl":{"start":{"line":64,"column":21},"end":{"line":64,"column":22}},"loc":{"start":{"line":64,"column":28},"end":{"line":66,"column":1}},"line":64},"9":{"name":"(anonymous_9)","decl":{"start":{"line":68,"column":19},"end":{"line":68,"column":20}},"loc":{"start":{"line":68,"column":26},"end":{"line":70,"column":1}},"line":68},"10":{"name":"(anonymous_10)","decl":{"start":{"line":72,"column":19},"end":{"line":72,"column":20}},"loc":{"start":{"line":72,"column":26},"end":{"line":74,"column":1}},"line":72},"11":{"name":"(anonymous_11)","decl":{"start":{"line":76,"column":17},"end":{"line":76,"column":18}},"loc":{"start":{"line":76,"column":24},"end":{"line":78,"column":1}},"line":76},"12":{"name":"(anonymous_12)","decl":{"start":{"line":80,"column":20},"end":{"line":80,"column":21}},"loc":{"start":{"line":80,"column":27},"end":{"line":82,"column":1}},"line":80},"13":{"name":"(anonymous_13)","decl":{"start":{"line":84,"column":18},"end":{"line":84,"column":19}},"loc":{"start":{"line":84,"column":37},"end":{"line":92,"column":1}},"line":84},"14":{"name":"(anonymous_14)","decl":{"start":{"line":85,"column":11},"end":{"line":85,"column":12}},"loc":{"start":{"line":85,"column":18},"end":{"line":91,"column":5}},"line":85},"15":{"name":"(anonymous_15)","decl":{"start":{"line":93,"column":19},"end":{"line":93,"column":20}},"loc":{"start":{"line":93,"column":43},"end":{"line":106,"column":1}},"line":93},"16":{"name":"(anonymous_16)","decl":{"start":{"line":96,"column":15},"end":{"line":96,"column":16}},"loc":{"start":{"line":96,"column":22},"end":{"line":98,"column":9}},"line":96},"17":{"name":"(anonymous_17)","decl":{"start":{"line":101,"column":15},"end":{"line":101,"column":16}},"loc":{"start":{"line":101,"column":22},"end":{"line":104,"column":9}},"line":101},"18":{"name":"(anonymous_18)","decl":{"start":{"line":108,"column":20},"end":{"line":108,"column":21}},"loc":{"start":{"line":108,"column":31},"end":{"line":112,"column":1}},"line":108},"19":{"name":"(anonymous_19)","decl":{"start":{"line":109,"column":11},"end":{"line":109,"column":12}},"loc":{"start":{"line":109,"column":18},"end":{"line":111,"column":5}},"line":109},"20":{"name":"(anonymous_20)","decl":{"start":{"line":114,"column":20},"end":{"line":114,"column":21}},"loc":{"start":{"line":114,"column":38},"end":{"line":126,"column":1}},"line":114},"21":{"name":"(anonymous_21)","decl":{"start":{"line":115,"column":11},"end":{"line":115,"column":12}},"loc":{"start":{"line":115,"column":18},"end":{"line":125,"column":5}},"line":115},"22":{"name":"(anonymous_22)","decl":{"start":{"line":128,"column":21},"end":{"line":128,"column":22}},"loc":{"start":{"line":128,"column":61},"end":{"line":142,"column":1}},"line":128},"23":{"name":"(anonymous_23)","decl":{"start":{"line":129,"column":11},"end":{"line":129,"column":12}},"loc":{"start":{"line":129,"column":18},"end":{"line":141,"column":5}},"line":129},"24":{"name":"(anonymous_24)","decl":{"start":{"line":143,"column":26},"end":{"line":143,"column":27}},"loc":{"start":{"line":143,"column":39},"end":{"line":166,"column":1}},"line":143},"25":{"name":"(anonymous_25)","decl":{"start":{"line":167,"column":28},"end":{"line":167,"column":29}},"loc":{"start":{"line":167,"column":35},"end":{"line":171,"column":1}},"line":167},"26":{"name":"(anonymous_26)","decl":{"start":{"line":173,"column":26},"end":{"line":173,"column":27}},"loc":{"start":{"line":173,"column":33},"end":{"line":177,"column":1}},"line":173},"27":{"name":"(anonymous_27)","decl":{"start":{"line":178,"column":17},"end":{"line":178,"column":18}},"loc":{"start":{"line":178,"column":24},"end":{"line":182,"column":1}},"line":178},"28":{"name":"(anonymous_28)","decl":{"start":{"line":183,"column":19},"end":{"line":183,"column":20}},"loc":{"start":{"line":183,"column":26},"end":{"line":185,"column":1}},"line":183},"29":{"name":"(anonymous_29)","decl":{"start":{"line":186,"column":21},"end":{"line":186,"column":22}},"loc":{"start":{"line":186,"column":28},"end":{"line":201,"column":1}},"line":186},"30":{"name":"(anonymous_30)","decl":{"start":{"line":191,"column":25},"end":{"line":191,"column":26}},"loc":{"start":{"line":191,"column":38},"end":{"line":196,"column":5}},"line":191},"31":{"name":"(anonymous_31)","decl":{"start":{"line":202,"column":20},"end":{"line":202,"column":21}},"loc":{"start":{"line":202,"column":27},"end":{"line":207,"column":1}},"line":202},"32":{"name":"(anonymous_32)","decl":{"start":{"line":209,"column":22},"end":{"line":209,"column":23}},"loc":{"start":{"line":209,"column":29},"end":{"line":217,"column":1}},"line":209},"33":{"name":"(anonymous_33)","decl":{"start":{"line":218,"column":23},"end":{"line":218,"column":24}},"loc":{"start":{"line":218,"column":29},"end":{"line":221,"column":1}},"line":218},"34":{"name":"(anonymous_34)","decl":{"start":{"line":222,"column":24},"end":{"line":222,"column":25}},"loc":{"start":{"line":222,"column":30},"end":{"line":224,"column":1}},"line":222},"35":{"name":"(anonymous_35)","decl":{"start":{"line":225,"column":23},"end":{"line":225,"column":24}},"loc":{"start":{"line":225,"column":38},"end":{"line":227,"column":1}},"line":225},"36":{"name":"(anonymous_36)","decl":{"start":{"line":228,"column":22},"end":{"line":228,"column":23}},"loc":{"start":{"line":228,"column":29},"end":{"line":232,"column":1}},"line":228},"37":{"name":"(anonymous_37)","decl":{"start":{"line":233,"column":23},"end":{"line":233,"column":24}},"loc":{"start":{"line":233,"column":30},"end":{"line":237,"column":1}},"line":233},"38":{"name":"(anonymous_38)","decl":{"start":{"line":238,"column":28},"end":{"line":238,"column":29}},"loc":{"start":{"line":238,"column":43},"end":{"line":242,"column":1}},"line":238},"39":{"name":"(anonymous_39)","decl":{"start":{"line":243,"column":20},"end":{"line":243,"column":21}},"loc":{"start":{"line":243,"column":27},"end":{"line":248,"column":1}},"line":243},"40":{"name":"(anonymous_40)","decl":{"start":{"line":249,"column":24},"end":{"line":249,"column":25}},"loc":{"start":{"line":249,"column":39},"end":{"line":259,"column":1}},"line":249},"41":{"name":"(anonymous_41)","decl":{"start":{"line":260,"column":25},"end":{"line":260,"column":26}},"loc":{"start":{"line":260,"column":32},"end":{"line":264,"column":1}},"line":260},"42":{"name":"(anonymous_42)","decl":{"start":{"line":265,"column":26},"end":{"line":265,"column":27}},"loc":{"start":{"line":265,"column":33},"end":{"line":269,"column":1}},"line":265},"43":{"name":"(anonymous_43)","decl":{"start":{"line":270,"column":21},"end":{"line":270,"column":22}},"loc":{"start":{"line":270,"column":28},"end":{"line":274,"column":1}},"line":270},"44":{"name":"(anonymous_44)","decl":{"start":{"line":275,"column":22},"end":{"line":275,"column":23}},"loc":{"start":{"line":275,"column":29},"end":{"line":279,"column":1}},"line":275},"45":{"name":"(anonymous_45)","decl":{"start":{"line":280,"column":19},"end":{"line":280,"column":20}},"loc":{"start":{"line":280,"column":26},"end":{"line":284,"column":1}},"line":280},"46":{"name":"(anonymous_46)","decl":{"start":{"line":285,"column":24},"end":{"line":285,"column":25}},"loc":{"start":{"line":285,"column":31},"end":{"line":289,"column":1}},"line":285},"47":{"name":"(anonymous_47)","decl":{"start":{"line":290,"column":19},"end":{"line":290,"column":20}},"loc":{"start":{"line":290,"column":26},"end":{"line":294,"column":1}},"line":290},"48":{"name":"(anonymous_48)","decl":{"start":{"line":295,"column":24},"end":{"line":295,"column":25}},"loc":{"start":{"line":295,"column":31},"end":{"line":299,"column":1}},"line":295},"49":{"name":"(anonymous_49)","decl":{"start":{"line":300,"column":20},"end":{"line":300,"column":21}},"loc":{"start":{"line":300,"column":27},"end":{"line":309,"column":1}},"line":300},"50":{"name":"(anonymous_50)","decl":{"start":{"line":311,"column":28},"end":{"line":311,"column":29}},"loc":{"start":{"line":311,"column":40},"end":{"line":314,"column":1}},"line":311},"51":{"name":"(anonymous_51)","decl":{"start":{"line":315,"column":31},"end":{"line":315,"column":32}},"loc":{"start":{"line":315,"column":43},"end":{"line":317,"column":1}},"line":315},"52":{"name":"(anonymous_52)","decl":{"start":{"line":319,"column":31},"end":{"line":319,"column":32}},"loc":{"start":{"line":319,"column":38},"end":{"line":321,"column":1}},"line":319},"53":{"name":"(anonymous_53)","decl":{"start":{"line":322,"column":31},"end":{"line":322,"column":32}},"loc":{"start":{"line":322,"column":38},"end":{"line":326,"column":1}},"line":322},"54":{"name":"(anonymous_54)","decl":{"start":{"line":324,"column":16},"end":{"line":324,"column":17}},"loc":{"start":{"line":324,"column":23},"end":{"line":324,"column":39}},"line":324},"55":{"name":"(anonymous_55)","decl":{"start":{"line":327,"column":27},"end":{"line":327,"column":28}},"loc":{"start":{"line":327,"column":34},"end":{"line":335,"column":1}},"line":327},"56":{"name":"(anonymous_56)","decl":{"start":{"line":336,"column":22},"end":{"line":336,"column":23}},"loc":{"start":{"line":336,"column":29},"end":{"line":340,"column":1}},"line":336},"57":{"name":"(anonymous_57)","decl":{"start":{"line":341,"column":26},"end":{"line":341,"column":27}},"loc":{"start":{"line":341,"column":32},"end":{"line":343,"column":1}},"line":341},"58":{"name":"(anonymous_58)","decl":{"start":{"line":344,"column":27},"end":{"line":344,"column":28}},"loc":{"start":{"line":344,"column":33},"end":{"line":344,"column":102}},"line":344},"59":{"name":"(anonymous_59)","decl":{"start":{"line":345,"column":32},"end":{"line":345,"column":33}},"loc":{"start":{"line":345,"column":39},"end":{"line":355,"column":1}},"line":345},"60":{"name":"(anonymous_60)","decl":{"start":{"line":372,"column":28},"end":{"line":372,"column":29}},"loc":{"start":{"line":372,"column":35},"end":{"line":377,"column":1}},"line":372},"61":{"name":"(anonymous_61)","decl":{"start":{"line":378,"column":33},"end":{"line":378,"column":34}},"loc":{"start":{"line":378,"column":39},"end":{"line":378,"column":113}},"line":378},"62":{"name":"(anonymous_62)","decl":{"start":{"line":381,"column":27},"end":{"line":381,"column":28}},"loc":{"start":{"line":381,"column":34},"end":{"line":383,"column":1}},"line":381},"63":{"name":"(anonymous_63)","decl":{"start":{"line":384,"column":32},"end":{"line":384,"column":33}},"loc":{"start":{"line":384,"column":38},"end":{"line":384,"column":116}},"line":384},"64":{"name":"(anonymous_64)","decl":{"start":{"line":386,"column":35},"end":{"line":386,"column":36}},"loc":{"start":{"line":386,"column":42},"end":{"line":388,"column":1}},"line":386},"65":{"name":"(anonymous_65)","decl":{"start":{"line":389,"column":40},"end":{"line":389,"column":41}},"loc":{"start":{"line":389,"column":46},"end":{"line":389,"column":140}},"line":389},"66":{"name":"(anonymous_66)","decl":{"start":{"line":400,"column":33},"end":{"line":400,"column":34}},"loc":{"start":{"line":400,"column":40},"end":{"line":415,"column":1}},"line":400},"67":{"name":"(anonymous_67)","decl":{"start":{"line":417,"column":38},"end":{"line":417,"column":39}},"loc":{"start":{"line":417,"column":44},"end":{"line":417,"column":134}},"line":417},"68":{"name":"(anonymous_68)","decl":{"start":{"line":420,"column":36},"end":{"line":420,"column":37}},"loc":{"start":{"line":420,"column":43},"end":{"line":422,"column":1}},"line":420},"69":{"name":"(anonymous_69)","decl":{"start":{"line":423,"column":50},"end":{"line":423,"column":51}},"loc":{"start":{"line":423,"column":57},"end":{"line":425,"column":1}},"line":423},"70":{"name":"(anonymous_70)","decl":{"start":{"line":426,"column":41},"end":{"line":426,"column":42}},"loc":{"start":{"line":426,"column":47},"end":{"line":426,"column":143}},"line":426},"71":{"name":"(anonymous_71)","decl":{"start":{"line":427,"column":28},"end":{"line":427,"column":29}},"loc":{"start":{"line":427,"column":35},"end":{"line":433,"column":1}},"line":427},"72":{"name":"(anonymous_72)","decl":{"start":{"line":435,"column":33},"end":{"line":435,"column":34}},"loc":{"start":{"line":435,"column":39},"end":{"line":435,"column":119}},"line":435},"73":{"name":"(anonymous_73)","decl":{"start":{"line":436,"column":21},"end":{"line":436,"column":22}},"loc":{"start":{"line":436,"column":28},"end":{"line":438,"column":1}},"line":436},"74":{"name":"(anonymous_74)","decl":{"start":{"line":440,"column":26},"end":{"line":440,"column":27}},"loc":{"start":{"line":440,"column":32},"end":{"line":440,"column":98}},"line":440},"75":{"name":"(anonymous_75)","decl":{"start":{"line":441,"column":25},"end":{"line":441,"column":26}},"loc":{"start":{"line":441,"column":32},"end":{"line":443,"column":1}},"line":441},"76":{"name":"(anonymous_76)","decl":{"start":{"line":444,"column":23},"end":{"line":444,"column":24}},"loc":{"start":{"line":444,"column":30},"end":{"line":450,"column":1}},"line":444},"77":{"name":"(anonymous_77)","decl":{"start":{"line":452,"column":30},"end":{"line":452,"column":31}},"loc":{"start":{"line":452,"column":36},"end":{"line":462,"column":1}},"line":452},"78":{"name":"(anonymous_78)","decl":{"start":{"line":464,"column":22},"end":{"line":464,"column":23}},"loc":{"start":{"line":464,"column":31},"end":{"line":468,"column":1}},"line":464},"79":{"name":"(anonymous_79)","decl":{"start":{"line":465,"column":40},"end":{"line":465,"column":41}},"loc":{"start":{"line":465,"column":45},"end":{"line":467,"column":5}},"line":465},"80":{"name":"(anonymous_80)","decl":{"start":{"line":469,"column":22},"end":{"line":469,"column":23}},"loc":{"start":{"line":469,"column":29},"end":{"line":475,"column":1}},"line":469},"81":{"name":"(anonymous_81)","decl":{"start":{"line":471,"column":14},"end":{"line":471,"column":15}},"loc":{"start":{"line":471,"column":24},"end":{"line":473,"column":5}},"line":471},"82":{"name":"(anonymous_82)","decl":{"start":{"line":476,"column":27},"end":{"line":476,"column":28}},"loc":{"start":{"line":476,"column":34},"end":{"line":481,"column":1}},"line":476},"83":{"name":"(anonymous_83)","decl":{"start":{"line":482,"column":24},"end":{"line":482,"column":25}},"loc":{"start":{"line":482,"column":31},"end":{"line":487,"column":1}},"line":482},"84":{"name":"(anonymous_84)","decl":{"start":{"line":488,"column":24},"end":{"line":488,"column":25}},"loc":{"start":{"line":488,"column":31},"end":{"line":493,"column":1}},"line":488},"85":{"name":"(anonymous_85)","decl":{"start":{"line":494,"column":30},"end":{"line":494,"column":31}},"loc":{"start":{"line":494,"column":37},"end":{"line":499,"column":1}},"line":494},"86":{"name":"(anonymous_86)","decl":{"start":{"line":502,"column":35},"end":{"line":502,"column":36}},"loc":{"start":{"line":502,"column":41},"end":{"line":505,"column":1}},"line":502},"87":{"name":"(anonymous_87)","decl":{"start":{"line":506,"column":31},"end":{"line":506,"column":32}},"loc":{"start":{"line":506,"column":38},"end":{"line":510,"column":1}},"line":506},"88":{"name":"(anonymous_88)","decl":{"start":{"line":511,"column":36},"end":{"line":511,"column":37}},"loc":{"start":{"line":511,"column":42},"end":{"line":513,"column":1}},"line":511},"89":{"name":"(anonymous_89)","decl":{"start":{"line":514,"column":29},"end":{"line":514,"column":30}},"loc":{"start":{"line":514,"column":36},"end":{"line":516,"column":1}},"line":514},"90":{"name":"(anonymous_90)","decl":{"start":{"line":518,"column":34},"end":{"line":518,"column":35}},"loc":{"start":{"line":518,"column":40},"end":{"line":518,"column":122}},"line":518},"91":{"name":"(anonymous_91)","decl":{"start":{"line":524,"column":25},"end":{"line":524,"column":26}},"loc":{"start":{"line":524,"column":32},"end":{"line":530,"column":1}},"line":524},"92":{"name":"(anonymous_92)","decl":{"start":{"line":531,"column":30},"end":{"line":531,"column":31}},"loc":{"start":{"line":531,"column":36},"end":{"line":531,"column":110}},"line":531},"93":{"name":"(anonymous_93)","decl":{"start":{"line":532,"column":24},"end":{"line":532,"column":25}},"loc":{"start":{"line":532,"column":49},"end":{"line":534,"column":1}},"line":532},"94":{"name":"(anonymous_94)","decl":{"start":{"line":535,"column":26},"end":{"line":535,"column":27}},"loc":{"start":{"line":535,"column":33},"end":{"line":542,"column":1}},"line":535},"95":{"name":"(anonymous_95)","decl":{"start":{"line":544,"column":31},"end":{"line":544,"column":32}},"loc":{"start":{"line":544,"column":37},"end":{"line":546,"column":1}},"line":544},"96":{"name":"(anonymous_96)","decl":{"start":{"line":547,"column":27},"end":{"line":547,"column":28}},"loc":{"start":{"line":547,"column":34},"end":{"line":549,"column":1}},"line":547},"97":{"name":"(anonymous_97)","decl":{"start":{"line":550,"column":30},"end":{"line":550,"column":31}},"loc":{"start":{"line":550,"column":37},"end":{"line":552,"column":1}},"line":550},"98":{"name":"(anonymous_98)","decl":{"start":{"line":553,"column":27},"end":{"line":553,"column":28}},"loc":{"start":{"line":553,"column":34},"end":{"line":555,"column":1}},"line":553},"99":{"name":"(anonymous_99)","decl":{"start":{"line":556,"column":37},"end":{"line":556,"column":38}},"loc":{"start":{"line":556,"column":44},"end":{"line":560,"column":1}},"line":556},"100":{"name":"(anonymous_100)","decl":{"start":{"line":561,"column":33},"end":{"line":561,"column":34}},"loc":{"start":{"line":561,"column":40},"end":{"line":568,"column":1}},"line":561},"101":{"name":"(anonymous_101)","decl":{"start":{"line":575,"column":38},"end":{"line":575,"column":39}},"loc":{"start":{"line":575,"column":44},"end":{"line":575,"column":134}},"line":575},"102":{"name":"(anonymous_102)","decl":{"start":{"line":576,"column":34},"end":{"line":576,"column":35}},"loc":{"start":{"line":576,"column":41},"end":{"line":580,"column":1}},"line":576},"103":{"name":"(anonymous_103)","decl":{"start":{"line":581,"column":39},"end":{"line":581,"column":40}},"loc":{"start":{"line":581,"column":45},"end":{"line":583,"column":1}},"line":581},"104":{"name":"(anonymous_104)","decl":{"start":{"line":584,"column":24},"end":{"line":584,"column":25}},"loc":{"start":{"line":584,"column":31},"end":{"line":588,"column":1}},"line":584},"105":{"name":"(anonymous_105)","decl":{"start":{"line":590,"column":29},"end":{"line":590,"column":30}},"loc":{"start":{"line":590,"column":35},"end":{"line":590,"column":107}},"line":590},"106":{"name":"(anonymous_106)","decl":{"start":{"line":591,"column":41},"end":{"line":591,"column":42}},"loc":{"start":{"line":591,"column":48},"end":{"line":598,"column":1}},"line":591},"107":{"name":"(anonymous_107)","decl":{"start":{"line":599,"column":37},"end":{"line":599,"column":38}},"loc":{"start":{"line":599,"column":44},"end":{"line":604,"column":1}},"line":599},"108":{"name":"(anonymous_108)","decl":{"start":{"line":617,"column":42},"end":{"line":617,"column":43}},"loc":{"start":{"line":617,"column":48},"end":{"line":619,"column":1}},"line":617},"109":{"name":"(anonymous_109)","decl":{"start":{"line":620,"column":27},"end":{"line":620,"column":28}},"loc":{"start":{"line":620,"column":39},"end":{"line":626,"column":1}},"line":620}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":13,"column":4},"end":{"line":14,"column":21}},"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":14,"column":21}},{"start":{"line":13,"column":4},"end":{"line":14,"column":21}}],"line":13},"4":{"loc":{"start":{"line":25,"column":4},"end":{"line":26,"column":20}},"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":26,"column":20}},{"start":{"line":25,"column":4},"end":{"line":26,"column":20}}],"line":25},"5":{"loc":{"start":{"line":30,"column":4},"end":{"line":31,"column":21}},"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":31,"column":21}},{"start":{"line":30,"column":4},"end":{"line":31,"column":21}}],"line":30},"6":{"loc":{"start":{"line":36,"column":15},"end":{"line":36,"column":173}},"type":"binary-expr","locations":[{"start":{"line":36,"column":16},"end":{"line":36,"column":26}},{"start":{"line":36,"column":32},"end":{"line":36,"column":56}},{"start":{"line":36,"column":60},"end":{"line":36,"column":81}},{"start":{"line":36,"column":85},"end":{"line":36,"column":107}},{"start":{"line":36,"column":111},"end":{"line":36,"column":132}},{"start":{"line":36,"column":136},"end":{"line":36,"column":152}},{"start":{"line":36,"column":156},"end":{"line":36,"column":172}}],"line":36},"7":{"loc":{"start":{"line":38,"column":4},"end":{"line":40,"column":5}},"type":"if","locations":[{"start":{"line":38,"column":4},"end":{"line":40,"column":5}},{"start":{"line":38,"column":4},"end":{"line":40,"column":5}}],"line":38},"8":{"loc":{"start":{"line":42,"column":8},"end":{"line":51,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":51,"column":9}},{"start":{"line":42,"column":8},"end":{"line":51,"column":9}}],"line":42},"9":{"loc":{"start":{"line":43,"column":12},"end":{"line":45,"column":13}},"type":"if","locations":[{"start":{"line":43,"column":12},"end":{"line":45,"column":13}},{"start":{"line":43,"column":12},"end":{"line":45,"column":13}}],"line":43},"10":{"loc":{"start":{"line":46,"column":12},"end":{"line":50,"column":13}},"type":"if","locations":[{"start":{"line":46,"column":12},"end":{"line":50,"column":13}},{"start":{"line":46,"column":12},"end":{"line":50,"column":13}}],"line":46},"11":{"loc":{"start":{"line":47,"column":16},"end":{"line":49,"column":17}},"type":"if","locations":[{"start":{"line":47,"column":16},"end":{"line":49,"column":17}},{"start":{"line":47,"column":16},"end":{"line":49,"column":17}}],"line":47},"12":{"loc":{"start":{"line":57,"column":12},"end":{"line":57,"column":51}},"type":"binary-expr","locations":[{"start":{"line":57,"column":13},"end":{"line":57,"column":23}},{"start":{"line":57,"column":29},"end":{"line":57,"column":50}}],"line":57},"13":{"loc":{"start":{"line":61,"column":12},"end":{"line":61,"column":51}},"type":"binary-expr","locations":[{"start":{"line":61,"column":13},"end":{"line":61,"column":23}},{"start":{"line":61,"column":29},"end":{"line":61,"column":50}}],"line":61},"14":{"loc":{"start":{"line":65,"column":12},"end":{"line":65,"column":53}},"type":"binary-expr","locations":[{"start":{"line":65,"column":13},"end":{"line":65,"column":23}},{"start":{"line":65,"column":29},"end":{"line":65,"column":52}}],"line":65},"15":{"loc":{"start":{"line":69,"column":12},"end":{"line":69,"column":51}},"type":"binary-expr","locations":[{"start":{"line":69,"column":13},"end":{"line":69,"column":23}},{"start":{"line":69,"column":29},"end":{"line":69,"column":50}}],"line":69},"16":{"loc":{"start":{"line":73,"column":12},"end":{"line":73,"column":51}},"type":"binary-expr","locations":[{"start":{"line":73,"column":13},"end":{"line":73,"column":23}},{"start":{"line":73,"column":29},"end":{"line":73,"column":50}}],"line":73},"17":{"loc":{"start":{"line":81,"column":12},"end":{"line":81,"column":52}},"type":"binary-expr","locations":[{"start":{"line":81,"column":13},"end":{"line":81,"column":23}},{"start":{"line":81,"column":29},"end":{"line":81,"column":51}}],"line":81},"18":{"loc":{"start":{"line":87,"column":12},"end":{"line":88,"column":28}},"type":"if","locations":[{"start":{"line":87,"column":12},"end":{"line":88,"column":28}},{"start":{"line":87,"column":12},"end":{"line":88,"column":28}}],"line":87},"19":{"loc":{"start":{"line":94,"column":4},"end":{"line":105,"column":5}},"type":"if","locations":[{"start":{"line":94,"column":4},"end":{"line":105,"column":5}},{"start":{"line":94,"column":4},"end":{"line":105,"column":5}}],"line":94},"20":{"loc":{"start":{"line":97,"column":20},"end":{"line":97,"column":58}},"type":"binary-expr","locations":[{"start":{"line":97,"column":21},"end":{"line":97,"column":36}},{"start":{"line":97,"column":42},"end":{"line":97,"column":57}}],"line":97},"21":{"loc":{"start":{"line":103,"column":20},"end":{"line":103,"column":74}},"type":"binary-expr","locations":[{"start":{"line":103,"column":21},"end":{"line":103,"column":36}},{"start":{"line":103,"column":42},"end":{"line":103,"column":73}}],"line":103},"22":{"loc":{"start":{"line":116,"column":8},"end":{"line":124,"column":25}},"type":"if","locations":[{"start":{"line":116,"column":8},"end":{"line":124,"column":25}},{"start":{"line":116,"column":8},"end":{"line":124,"column":25}}],"line":116},"23":{"loc":{"start":{"line":116,"column":12},"end":{"line":116,"column":46}},"type":"binary-expr","locations":[{"start":{"line":116,"column":13},"end":{"line":116,"column":23}},{"start":{"line":116,"column":29},"end":{"line":116,"column":45}}],"line":116},"24":{"loc":{"start":{"line":118,"column":16},"end":{"line":119,"column":33}},"type":"if","locations":[{"start":{"line":118,"column":16},"end":{"line":119,"column":33}},{"start":{"line":118,"column":16},"end":{"line":119,"column":33}}],"line":118},"25":{"loc":{"start":{"line":130,"column":8},"end":{"line":140,"column":25}},"type":"if","locations":[{"start":{"line":130,"column":8},"end":{"line":140,"column":25}},{"start":{"line":130,"column":8},"end":{"line":140,"column":25}}],"line":130},"26":{"loc":{"start":{"line":132,"column":16},"end":{"line":133,"column":33}},"type":"if","locations":[{"start":{"line":132,"column":16},"end":{"line":133,"column":33}},{"start":{"line":132,"column":16},"end":{"line":133,"column":33}}],"line":132},"27":{"loc":{"start":{"line":134,"column":16},"end":{"line":135,"column":33}},"type":"if","locations":[{"start":{"line":134,"column":16},"end":{"line":135,"column":33}},{"start":{"line":134,"column":16},"end":{"line":135,"column":33}}],"line":134},"28":{"loc":{"start":{"line":144,"column":4},"end":{"line":145,"column":21}},"type":"if","locations":[{"start":{"line":144,"column":4},"end":{"line":145,"column":21}},{"start":{"line":144,"column":4},"end":{"line":145,"column":21}}],"line":144},"29":{"loc":{"start":{"line":146,"column":4},"end":{"line":147,"column":21}},"type":"if","locations":[{"start":{"line":146,"column":4},"end":{"line":147,"column":21}},{"start":{"line":146,"column":4},"end":{"line":147,"column":21}}],"line":146},"30":{"loc":{"start":{"line":149,"column":8},"end":{"line":150,"column":25}},"type":"if","locations":[{"start":{"line":149,"column":8},"end":{"line":150,"column":25}},{"start":{"line":149,"column":8},"end":{"line":150,"column":25}}],"line":149},"31":{"loc":{"start":{"line":154,"column":8},"end":{"line":163,"column":9}},"type":"if","locations":[{"start":{"line":154,"column":8},"end":{"line":163,"column":9}},{"start":{"line":154,"column":8},"end":{"line":163,"column":9}}],"line":154},"32":{"loc":{"start":{"line":155,"column":12},"end":{"line":156,"column":29}},"type":"if","locations":[{"start":{"line":155,"column":12},"end":{"line":156,"column":29}},{"start":{"line":155,"column":12},"end":{"line":156,"column":29}}],"line":155},"33":{"loc":{"start":{"line":159,"column":12},"end":{"line":160,"column":29}},"type":"if","locations":[{"start":{"line":159,"column":12},"end":{"line":160,"column":29}},{"start":{"line":159,"column":12},"end":{"line":160,"column":29}}],"line":159},"34":{"loc":{"start":{"line":161,"column":12},"end":{"line":162,"column":29}},"type":"if","locations":[{"start":{"line":161,"column":12},"end":{"line":162,"column":29}},{"start":{"line":161,"column":12},"end":{"line":162,"column":29}}],"line":161},"35":{"loc":{"start":{"line":168,"column":4},"end":{"line":169,"column":21}},"type":"if","locations":[{"start":{"line":168,"column":4},"end":{"line":169,"column":21}},{"start":{"line":168,"column":4},"end":{"line":169,"column":21}}],"line":168},"36":{"loc":{"start":{"line":174,"column":4},"end":{"line":175,"column":21}},"type":"if","locations":[{"start":{"line":174,"column":4},"end":{"line":175,"column":21}},{"start":{"line":174,"column":4},"end":{"line":175,"column":21}}],"line":174},"37":{"loc":{"start":{"line":179,"column":4},"end":{"line":180,"column":21}},"type":"if","locations":[{"start":{"line":179,"column":4},"end":{"line":180,"column":21}},{"start":{"line":179,"column":4},"end":{"line":180,"column":21}}],"line":179},"38":{"loc":{"start":{"line":181,"column":11},"end":{"line":181,"column":29}},"type":"binary-expr","locations":[{"start":{"line":181,"column":11},"end":{"line":181,"column":16}},{"start":{"line":181,"column":20},"end":{"line":181,"column":29}}],"line":181},"39":{"loc":{"start":{"line":188,"column":4},"end":{"line":189,"column":21}},"type":"if","locations":[{"start":{"line":188,"column":4},"end":{"line":189,"column":21}},{"start":{"line":188,"column":4},"end":{"line":189,"column":21}}],"line":188},"40":{"loc":{"start":{"line":192,"column":8},"end":{"line":193,"column":27}},"type":"if","locations":[{"start":{"line":192,"column":8},"end":{"line":193,"column":27}},{"start":{"line":192,"column":8},"end":{"line":193,"column":27}}],"line":192},"41":{"loc":{"start":{"line":194,"column":8},"end":{"line":195,"column":27}},"type":"if","locations":[{"start":{"line":194,"column":8},"end":{"line":195,"column":27}},{"start":{"line":194,"column":8},"end":{"line":195,"column":27}}],"line":194},"42":{"loc":{"start":{"line":210,"column":4},"end":{"line":211,"column":21}},"type":"if","locations":[{"start":{"line":210,"column":4},"end":{"line":211,"column":21}},{"start":{"line":210,"column":4},"end":{"line":211,"column":21}}],"line":210},"43":{"loc":{"start":{"line":212,"column":4},"end":{"line":213,"column":21}},"type":"if","locations":[{"start":{"line":212,"column":4},"end":{"line":213,"column":21}},{"start":{"line":212,"column":4},"end":{"line":213,"column":21}}],"line":212},"44":{"loc":{"start":{"line":214,"column":4},"end":{"line":215,"column":21}},"type":"if","locations":[{"start":{"line":214,"column":4},"end":{"line":215,"column":21}},{"start":{"line":214,"column":4},"end":{"line":215,"column":21}}],"line":214},"45":{"loc":{"start":{"line":229,"column":4},"end":{"line":230,"column":21}},"type":"if","locations":[{"start":{"line":229,"column":4},"end":{"line":230,"column":21}},{"start":{"line":229,"column":4},"end":{"line":230,"column":21}}],"line":229},"46":{"loc":{"start":{"line":234,"column":4},"end":{"line":235,"column":21}},"type":"if","locations":[{"start":{"line":234,"column":4},"end":{"line":235,"column":21}},{"start":{"line":234,"column":4},"end":{"line":235,"column":21}}],"line":234},"47":{"loc":{"start":{"line":252,"column":4},"end":{"line":256,"column":5}},"type":"if","locations":[{"start":{"line":252,"column":4},"end":{"line":256,"column":5}},{"start":{"line":252,"column":4},"end":{"line":256,"column":5}}],"line":252},"48":{"loc":{"start":{"line":261,"column":4},"end":{"line":262,"column":21}},"type":"if","locations":[{"start":{"line":261,"column":4},"end":{"line":262,"column":21}},{"start":{"line":261,"column":4},"end":{"line":262,"column":21}}],"line":261},"49":{"loc":{"start":{"line":266,"column":4},"end":{"line":267,"column":21}},"type":"if","locations":[{"start":{"line":266,"column":4},"end":{"line":267,"column":21}},{"start":{"line":266,"column":4},"end":{"line":267,"column":21}}],"line":266},"50":{"loc":{"start":{"line":271,"column":4},"end":{"line":272,"column":21}},"type":"if","locations":[{"start":{"line":271,"column":4},"end":{"line":272,"column":21}},{"start":{"line":271,"column":4},"end":{"line":272,"column":21}}],"line":271},"51":{"loc":{"start":{"line":276,"column":4},"end":{"line":277,"column":21}},"type":"if","locations":[{"start":{"line":276,"column":4},"end":{"line":277,"column":21}},{"start":{"line":276,"column":4},"end":{"line":277,"column":21}}],"line":276},"52":{"loc":{"start":{"line":281,"column":4},"end":{"line":282,"column":21}},"type":"if","locations":[{"start":{"line":281,"column":4},"end":{"line":282,"column":21}},{"start":{"line":281,"column":4},"end":{"line":282,"column":21}}],"line":281},"53":{"loc":{"start":{"line":286,"column":4},"end":{"line":287,"column":21}},"type":"if","locations":[{"start":{"line":286,"column":4},"end":{"line":287,"column":21}},{"start":{"line":286,"column":4},"end":{"line":287,"column":21}}],"line":286},"54":{"loc":{"start":{"line":291,"column":4},"end":{"line":292,"column":21}},"type":"if","locations":[{"start":{"line":291,"column":4},"end":{"line":292,"column":21}},{"start":{"line":291,"column":4},"end":{"line":292,"column":21}}],"line":291},"55":{"loc":{"start":{"line":296,"column":4},"end":{"line":297,"column":21}},"type":"if","locations":[{"start":{"line":296,"column":4},"end":{"line":297,"column":21}},{"start":{"line":296,"column":4},"end":{"line":297,"column":21}}],"line":296},"56":{"loc":{"start":{"line":328,"column":4},"end":{"line":333,"column":21}},"type":"if","locations":[{"start":{"line":328,"column":4},"end":{"line":333,"column":21}},{"start":{"line":328,"column":4},"end":{"line":333,"column":21}}],"line":328},"57":{"loc":{"start":{"line":337,"column":4},"end":{"line":338,"column":21}},"type":"if","locations":[{"start":{"line":337,"column":4},"end":{"line":338,"column":21}},{"start":{"line":337,"column":4},"end":{"line":338,"column":21}}],"line":337},"58":{"loc":{"start":{"line":401,"column":4},"end":{"line":411,"column":21}},"type":"if","locations":[{"start":{"line":401,"column":4},"end":{"line":411,"column":21}},{"start":{"line":401,"column":4},"end":{"line":411,"column":21}}],"line":401},"59":{"loc":{"start":{"line":421,"column":12},"end":{"line":421,"column":71}},"type":"binary-expr","locations":[{"start":{"line":421,"column":13},"end":{"line":421,"column":32}},{"start":{"line":421,"column":38},"end":{"line":421,"column":70}}],"line":421},"60":{"loc":{"start":{"line":442,"column":11},"end":{"line":442,"column":53}},"type":"binary-expr","locations":[{"start":{"line":442,"column":12},"end":{"line":442,"column":31}},{"start":{"line":442,"column":37},"end":{"line":442,"column":52}}],"line":442},"61":{"loc":{"start":{"line":445,"column":4},"end":{"line":449,"column":5}},"type":"if","locations":[{"start":{"line":445,"column":4},"end":{"line":449,"column":5}},{"start":{"line":445,"column":4},"end":{"line":449,"column":5}}],"line":445},"62":{"loc":{"start":{"line":536,"column":4},"end":{"line":537,"column":21}},"type":"if","locations":[{"start":{"line":536,"column":4},"end":{"line":537,"column":21}},{"start":{"line":536,"column":4},"end":{"line":537,"column":21}}],"line":536},"63":{"loc":{"start":{"line":539,"column":11},"end":{"line":541,"column":41}},"type":"binary-expr","locations":[{"start":{"line":539,"column":12},"end":{"line":539,"column":30}},{"start":{"line":540,"column":9},"end":{"line":540,"column":35}},{"start":{"line":541,"column":9},"end":{"line":541,"column":40}}],"line":539},"64":{"loc":{"start":{"line":557,"column":4},"end":{"line":558,"column":21}},"type":"if","locations":[{"start":{"line":557,"column":4},"end":{"line":558,"column":21}},{"start":{"line":557,"column":4},"end":{"line":558,"column":21}}],"line":557},"65":{"loc":{"start":{"line":621,"column":4},"end":{"line":622,"column":67}},"type":"if","locations":[{"start":{"line":621,"column":4},"end":{"line":622,"column":67}},{"start":{"line":621,"column":4},"end":{"line":622,"column":67}}],"line":621},"66":{"loc":{"start":{"line":623,"column":4},"end":{"line":624,"column":67}},"type":"if","locations":[{"start":{"line":623,"column":4},"end":{"line":624,"column":67}},{"start":{"line":623,"column":4},"end":{"line":624,"column":67}}],"line":623}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":3,"11":1,"12":2,"13":1,"14":2,"15":2,"16":1,"17":1,"18":0,"19":1,"20":1,"21":12,"22":1,"23":11,"24":12,"25":11,"26":27,"27":11,"28":1,"29":10,"30":16,"31":16,"32":1,"33":15,"34":6,"35":0,"36":9,"37":1,"38":50,"39":1,"40":108,"41":1,"42":59,"43":1,"44":18,"45":1,"46":12,"47":1,"48":2,"49":1,"50":8,"51":1,"52":1,"53":3,"54":5,"55":2,"56":1,"57":1,"58":9,"59":1,"60":1,"61":4,"62":8,"63":10,"64":10,"65":1,"66":1,"67":2,"68":1,"69":1,"70":3,"71":2,"72":8,"73":1,"74":1,"75":1,"76":1,"77":1,"78":4,"79":3,"80":3,"81":1,"82":2,"83":1,"84":1,"85":1,"86":1,"87":32,"88":3,"89":29,"90":1,"91":28,"92":53,"93":2,"94":26,"95":48,"96":48,"97":44,"98":6,"99":4,"100":1,"101":3,"102":1,"103":18,"104":1,"105":6,"106":1,"107":5,"108":1,"109":1,"110":6,"111":1,"112":5,"113":1,"114":6,"115":2,"116":4,"117":1,"118":1,"119":1,"120":12,"121":1,"122":11,"123":11,"124":35,"125":2,"126":35,"127":8,"128":11,"129":1,"130":2,"131":1,"132":1,"133":6,"134":1,"135":5,"136":1,"137":4,"138":1,"139":3,"140":1,"141":5,"142":5,"143":1,"144":1,"145":1,"146":1,"147":1,"148":7,"149":1,"150":6,"151":1,"152":6,"153":1,"154":5,"155":1,"156":11,"157":11,"158":1,"159":3,"160":1,"161":35,"162":35,"163":35,"164":29,"165":29,"166":29,"167":35,"168":35,"169":1,"170":3,"171":1,"172":2,"173":1,"174":3,"175":1,"176":2,"177":1,"178":12,"179":1,"180":11,"181":1,"182":5,"183":1,"184":4,"185":1,"186":8,"187":1,"188":7,"189":1,"190":5,"191":1,"192":4,"193":1,"194":5,"195":1,"196":4,"197":1,"198":5,"199":1,"200":4,"201":1,"202":7,"203":1,"204":0,"205":1,"206":0,"207":1,"208":0,"209":1,"210":1,"211":1,"212":1,"213":3,"214":1,"215":2,"216":1,"217":5,"218":1,"219":4,"220":1,"221":1,"222":1,"223":0,"224":1,"225":0,"226":1,"227":1,"228":1,"229":0,"230":1,"231":0,"232":1,"233":1,"234":0,"235":1,"236":0,"237":1,"238":1,"239":0,"240":1,"241":0,"242":1,"243":1,"244":0,"245":0,"246":0,"247":1,"248":0,"249":1,"250":1,"251":0,"252":1,"253":0,"254":1,"255":0,"256":1,"257":0,"258":1,"259":1,"260":0,"261":1,"262":0,"263":1,"264":1,"265":0,"266":1,"267":1,"268":1,"269":1,"270":1,"271":0,"272":1,"273":1,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":1,"281":0,"282":0,"283":1,"284":0,"285":0,"286":0,"287":0,"288":1,"289":0,"290":1,"291":0,"292":1,"293":0,"294":1,"295":0,"296":1,"297":1,"298":1,"299":0,"300":0,"301":1,"302":0,"303":1,"304":0,"305":1,"306":0,"307":1,"308":1,"309":0,"310":1,"311":1,"312":0,"313":1,"314":0,"315":1,"316":1,"317":1,"318":0,"319":0,"320":0,"321":0,"322":1,"323":1,"324":0,"325":1,"326":0,"327":1,"328":0,"329":1,"330":0,"331":1,"332":0,"333":0,"334":0,"335":1,"336":0,"337":1,"338":1,"339":0,"340":1,"341":0,"342":1,"343":0,"344":1,"345":0,"346":1,"347":1,"348":0,"349":1,"350":0,"351":1,"352":0,"353":1,"354":1,"355":0,"356":1,"357":0,"358":0,"359":0,"360":0,"361":0},"f":{"0":1,"1":3,"2":2,"3":12,"4":12,"5":27,"6":50,"7":108,"8":59,"9":18,"10":12,"11":2,"12":8,"13":1,"14":3,"15":9,"16":4,"17":10,"18":1,"19":2,"20":1,"21":3,"22":1,"23":4,"24":32,"25":6,"26":6,"27":6,"28":1,"29":12,"30":35,"31":2,"32":6,"33":5,"34":1,"35":1,"36":7,"37":6,"38":11,"39":3,"40":35,"41":3,"42":3,"43":12,"44":5,"45":8,"46":5,"47":5,"48":5,"49":7,"50":0,"51":0,"52":0,"53":1,"54":1,"55":3,"56":5,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":1,"76":1,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":1,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[1,2],"4":[0,1],"5":[1,11],"6":[27,27,27,21,21,18,12],"7":[1,10],"8":[16,0],"9":[1,15],"10":[6,9],"11":[0,6],"12":[50,50],"13":[108,107],"14":[59,59],"15":[18,18],"16":[12,12],"17":[8,8],"18":[2,3],"19":[1,8],"20":[4,3],"21":[10,6],"22":[2,1],"23":[3,3],"24":[1,7],"25":[3,1],"26":[1,2],"27":[1,1],"28":[3,29],"29":[1,28],"30":[2,51],"31":[44,4],"32":[6,38],"33":[1,3],"34":[1,2],"35":[1,5],"36":[1,5],"37":[2,4],"38":[4,3],"39":[1,11],"40":[2,33],"41":[8,27],"42":[1,5],"43":[1,4],"44":[1,3],"45":[1,6],"46":[1,5],"47":[29,6],"48":[1,2],"49":[1,2],"50":[1,11],"51":[1,4],"52":[1,7],"53":[1,4],"54":[1,4],"55":[1,4],"56":[1,2],"57":[1,4],"58":[0,0],"59":[0,0],"60":[1,1],"61":[1,0],"62":[0,0],"63":[0,0,0],"64":[0,0],"65":[0,0],"66":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/core.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/interfaces/core.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport { hexToPublicKey, JSONStringifyDeterministic } from \"../common/crypto_util\";\nimport { randomAlphaString } from \"../common/util\";\nimport { AnnounceRequestData, isAnnounceRequestData } from \"./NodeToNodeRequest\";\n\nexport const _tests: {[key: string]: Function} = {}\n\nexport type JSONPrimitive = string | number | boolean | null;\nexport type JSONValue = JSONPrimitive | JSONObject | JSONArray;\nexport type JSONObject = { [member: string]: JSONValue };\nexport interface JSONArray extends Array<JSONValue> {}\nexport const isJSONObject = (x: any): x is JSONObject => {\n    if (!isObject(x)) return false;\n    return isJSONSerializable(x);\n}\nexport const tryParseJsonObject = (x: string): JSONObject | null => {\n    let a: any;\n    try {\n        a = JSON.parse(x);\n    }\n    catch {\n        return null;\n    }\n    if (!isJSONObject(a)) return null; // TODO: I think this may just be unreachable--parse should throw on failure\n    return a;\n}\nexport const isJSONSerializable = (obj: any): boolean => {\n    if (!isObject(obj)) return false\n    const isPlainObject = (a: Object) => {\n        return Object.prototype.toString.call(a) === '[object Object]';\n    };\n    const isPlain = (a: any) => {\n      return (a === null) || (typeof a === 'undefined' || typeof a === 'string' || typeof a === 'boolean' || typeof a === 'number' || Array.isArray(a) || isPlainObject(a));\n    }\n    if (!isPlain(obj)) {\n      return false;\n    }\n    for (let property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        if (!isPlain(obj[property])) {\n          return false;\n        }\n        if (typeof obj[property] === \"object\") {\n          if (!isJSONSerializable(obj[property])) { // TODO: I'm not sure how to reach this code.\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n}\n\n// object\nexport const isObject = (x: any): x is Object => {\n    return ((x !== null) && (typeof x === 'object'));\n}\n\n// string\nexport const isString = (x: any): x is string => {\n    return ((x !== null) && (typeof x === 'string'));\n}\n\n// function\nexport const isFunction = (x: any): x is Function => {\n    return ((x !== null) && (typeof x === 'function'));\n}\n\n// number\nexport const isNumber = (x: any): x is number => {\n    return ((x !== null) && (typeof x === 'number'));\n}\n\n// bigint\nexport const isBigInt = (x: any): x is bigint => {\n    return ((x !== null) && (typeof x === 'bigint'));\n}\n\n// null\nexport const isNull = (x: any): x is null => {\n    return x === null;\n}\n\n// boolean\nexport const isBoolean = (x: any): x is boolean => {\n    return ((x !== null) && (typeof x === 'boolean'));\n}\n\n// isOneOf\nexport const isOneOf = (testFunctions: Function[]): ((x: any) => boolean) => {\n    return (x) => {\n        for (let tf of testFunctions) {\n            if (tf(x)) return true;\n        }\n        return false;\n    }\n}\n\nexport const optional = (testFunctionOrSpec: Function | ValidateObjectSpec): ((x: any) => boolean) => {\n    if (isFunction(testFunctionOrSpec)) {\n        const testFunction: Function = testFunctionOrSpec\n        return (x) => {\n            return ((x === undefined) || (testFunction(x)));\n        }\n    }\n    else {\n        return (x) => {\n            const obj: ValidateObjectSpec = testFunctionOrSpec\n            return ((x === undefined) || (_validateObject(x, obj)))\n        }\n    }   \n}\n\n// isEqualTo\nexport const isEqualTo = (value: any): ((x: any) => boolean) => {\n    return (x) => {\n        return x === value;\n    }\n}\n\n// isArrayOf\nexport const isArrayOf = (testFunction: (x: any) => boolean): ((x: any) => boolean) => {\n    return (x) => {\n        if ((x !== null) && (Array.isArray(x))) {\n            for (let a of x) {\n                if (!testFunction(a)) return false;\n            }\n            return true;\n        }\n        else return false;\n    }\n}\n\n// isObjectOf\nexport const isObjectOf = (keyTestFunction: (x: any) => boolean, valueTestFunction: (x: any) => boolean): ((x: any) => boolean) => {\n    return (x) => {\n        if (isObject(x)) {\n            for (let k in x) {\n                if (!keyTestFunction(k)) return false;\n                if (!valueTestFunction(x[k])) return false;\n            }\n            return true;\n        }\n        else return false;\n    }\n}\n\nexport type ValidateObjectSpec = {[key: string]: ValidateObjectSpec | (Function & ((a: any) => any))}\n\nexport const _validateObject = (x: any, spec: ValidateObjectSpec): boolean => {\n    if (!x) return false;\n    if (!isObject(x)) return false;\n    for (let k in x) {\n        if (!(k in spec)) return false;\n    }\n    for (let k in spec) {\n        const specK = spec[k];\n        if (isFunction(specK)) {\n            if (!specK(x[k])) return false;\n        }\n        else {\n            if (!(k in x)) return false;\n            if (!_validateObject(x[k], specK as ValidateObjectSpec)) return false;\n        }\n    }\n    return true;\n}\n\n// Versioning\nexport interface ProtocolVersion extends String {\n    __protocolVersion__: never // phantom type\n}\nexport const isProtocolVersion = (x: any): x is ProtocolVersion => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-zA-z.\\ \\-]{4,30}$/.test(x));\n}\n\nexport interface DaemonVersion extends String {\n    __daemonVersion__: never // phantom\n}\nexport const exampleDaemonVersion: DaemonVersion = \"example-daemon.Version\" as any as DaemonVersion\nexport const isDaemonVersion = (x: any): x is DaemonVersion => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-zA-z\\.\\ \\-]{4,40}?$/.test(x));\n}\n\n\n// Port\nexport interface Port extends Number {\n    __port__: never\n}\nexport const isPort = (x: any) : x is Port => {\n    if (!isNumber(x)) return false;\n    return x > 0 && x < 65536; // port numbers must be in 16-bit positive range\n}\nexport const toNumber = (x: Port): number => {\n    return x as any as number;\n}\n\n// HostName\nexport interface HostName extends String {\n    __hostName__: never\n}\nexport const isHostName = (x: any): x is HostName => {\n    // TODO: can we be even more precise here? e.g. restrict number of elements?\n    if (!isString(x)) return false;\n    let result = true;\n    x.split(\".\").forEach((element) => {\n        if (element.length === 0) result = false;\n        if (!/^[a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?$/.test(element)) result = false;\n    });\n    // we cannot short-circuit by returning false from the anonymous function in the forEach loop.\n    // Doing so returns false *from that function*, then ignores the result (since nothing is checking\n    // the result of the anonymous function) and moves on to check the next chunk.\n    return result;\n}\n\n// Address\nexport interface Address {\n    hostName: HostName,\n    port: Port\n}\nexport const isAddress = (x: any): x is Address => {\n    return _validateObject(x, {\n        hostName: isHostName,\n        port: isPort\n    });\n}\n\n// TimeStamp\nexport interface Timestamp extends Number {\n    __timestamp__: never\n}\nexport const exampleTimestamp: Timestamp = Number(new Date(2020, 1, 1, 1, 1, 1, 0)) - 0 as any as Timestamp\nexport const isTimestamp = (x: any) : x is Timestamp => {\n    if (!isNumber(x)) return false;\n    if (x < 0) return false;  // For our purposes, timestamps should never be negative\n    if (!Number.isInteger(x)) return false; // our timestamps should be whole numbers\n    return true;\n}\nexport const nowTimestamp = () => {\n    const ret = Number(new Date()) - 0\n    return ret as any as Timestamp\n}\nexport const zeroTimestamp = () => {\n    return 0 as any as Timestamp;\n}\nexport const elapsedSince = (timestamp: Timestamp) => {\n    return (nowTimestamp() as any as number) - (timestamp as any as number);\n}\n\n// PublicKey\nexport interface PublicKey extends String {\n    __publicKey__: never // phantom type so that we cannot assign directly to a string\n}\nexport const isPublicKey = (x: any) : x is PublicKey => {\n    if (!isString(x)) return false;\n    return checkKeyblockHeader(x, 'PUBLIC');\n}\n\n// PrivateKey\nexport interface PrivateKey extends String {\n    __privateKey__: never // phantom type\n}\nexport const isPrivateKey = (x: any) : x is PublicKey => {\n    if (!isString(x)) return false;\n    return checkKeyblockHeader(x, 'PRIVATE');\n}\n\nconst checkKeyblockHeader = (key: string, type: 'PUBLIC' | 'PRIVATE') => {\n    // note we need to double-escape the backslashes here.\n    const pattern = new RegExp(`-----BEGIN ${type} KEY-----[\\\\s\\\\S]*-----END ${type} KEY-----$`);\n    return (pattern.test(key));\n}\n\n// KeyPair\nexport interface KeyPair {\n    publicKey: PublicKey,\n    privateKey: PrivateKey\n}\nexport const isKeyPair = (x: any) : x is KeyPair => {\n    return _validateObject(x, {\n        publicKey: isPublicKey,\n        privateKey: isPrivateKey\n    });\n}\n\nexport const isHexadecimal = (x: string, length?: number) : boolean => {\n    const basePattern: string = '[0-9a-fA-F]';\n    let pattern: string = `^${basePattern}*$`;\n    if (length !== undefined) {\n        assert(Number.isInteger(length));\n        assert(length > 0);\n        pattern = `^${basePattern}{${length}}$`;\n    }\n    const regex = new RegExp(pattern);\n\n    return (regex.test(x));\n}\n\n// PublicKeyHex\nexport interface PublicKeyHex extends String {\n    __publicKeyHex__: never // phantom type so that we cannot assign directly to a string\n}\nexport const isPublicKeyHex = (x: any) : x is PublicKeyHex => {\n    if (!isString(x)) return false;\n    return isHexadecimal(x);\n}\n\n// PrivateKeyHex\nexport interface PrivateKeyHex extends String {\n    __privateKeyHex__: never // phantom type\n}\nexport const isPrivateKeyHex = (x: any) : x is PrivateKeyHex => {\n    if (!isString(x)) return false;\n    return isHexadecimal(x);\n}\n\n// Sha1Hash\nexport interface Sha1Hash extends String {\n    __sha1Hash__: never // phantom type\n}\nexport const isSha1Hash = (x: any) : x is Sha1Hash => {\n    if (!isString(x)) return false;\n    return isHexadecimal(x, 40); // Sha1 should be 40 hex characters\n}\n\n// Signature\nexport interface Signature extends String {\n    __signature__: never\n}\nexport const isSignature = (x: any): x is Signature => {\n    if (!isString(x)) return false;\n    return isHexadecimal(x, 64);\n}\n\n\n// NodeId\nexport interface NodeId extends String {\n    __nodeId__: never // phantom type\n}\nexport const isNodeId = (x: any): x is NodeId => {\n    if (!isString(x)) return false;\n    return isHexadecimal(x, 64);\n}\n\n\n// ChannelName\nexport interface ChannelName extends String {\n    __channelName__: never // phantom type\n}\nexport const isChannelName = (x: any): x is ChannelName => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-zA-Z_\\-\\.]{4,160}?$/.test(x));\n}\n\n// FeedId\nexport interface FeedId extends String {\n    __feedId__: never // phantom type\n}\nexport const isFeedId = (x: any): x is FeedId => {\n    if (!isString(x)) return false;\n    return isHexadecimal(x, 64);\n}\n\n// SubfeedHash\nexport interface SubfeedHash extends String {\n    __subfeedHash__: never\n}\nexport const isSubfeedHash = (x: any): x is SubfeedHash => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-fA-F]{40}?$/.test(x));\n}\n\n// FileKey\nexport interface FileKey {\n    sha1: Sha1Hash,\n    chunkOf?: {\n        fileKey: FileKey,\n        startByte: bigint,\n        endByte: bigint\n    }\n}\n\nexport const isFileKey = (x: any): x is FileKey => {\n    return _validateObject(x, {\n        sha1: isSha1Hash,\n        chunkOf: optional({\n            fileKey: isFileKey,\n            startByte: isBigInt,\n            endByte: isBigInt\n        })\n    });\n}\n\n// Conversion between types\nexport const nodeIdToPublicKey = (nodeId: NodeId): PublicKey => {\n    // TODO: Is this implementation right?\n    return hexToPublicKey(nodeId.toString() as any as PublicKeyHex);\n}\nexport const feedIdToPublicKeyHex = (feedId: FeedId): PublicKeyHex => {\n    return feedId as any as PublicKeyHex;\n}\n// TODO: Note: PublicKeyHex has no length limit, but nodeId must be 64 characters. Check for this?\nexport const publicKeyHexToNodeId = (x: PublicKeyHex) : NodeId => {\n    return x as any as NodeId;\n}\n\n\n\n// FindLiveFeedResult\nexport interface FindLiveFeedResult {\n    nodeId: NodeId\n}\nexport const isFindLiveFeedResult = (x: any): x is FindLiveFeedResult => {\n    return _validateObject(x, {\n        nodeId: (a: any) => isNodeId\n    });\n}\n\n// FindFileResult\nexport interface FindFileResult {\n    nodeId: NodeId,\n    fileKey: FileKey,\n    fileSize: bigint\n}\nexport const isFindFileResult = (x: any): x is FindFileResult => {\n    if (!_validateObject(x, {\n        nodeId: isNodeId,\n        fileKey: isFileKey,\n        fileSize: isBigInt\n    })) return false;\n    return (x.fileSize >= 0);\n}\n\n\n// RequestId\nexport interface RequestId extends String {\n    __requestId__: never // phantom type\n}\nexport const isRequestId = (x: any): x is RequestId => {\n    if (!isString(x)) return false;\n    return (/^[A-Za-z]{10}$/.test(x));\n}\nexport const createRequestId = () => {\n    return randomAlphaString(10) as any as RequestId;\n}\n_tests.RequestId = () => { assert(isRequestId(createRequestId())); }\n\n\nexport interface ChannelNodeInfoBody {\n    channelName: ChannelName,\n    nodeId: NodeId,\n    httpAddress: Address | null,\n    webSocketAddress: Address | null,\n    udpAddress: Address | null,\n    proxyHttpAddresses: Address[],\n    timestamp: Timestamp\n}\nexport const isChannelNodeInfoBody = (x: any): x is ChannelNodeInfoBody => {\n    return _validateObject(x, {\n        channelName: isChannelName,\n        nodeId: isNodeId,\n        httpAddress: isOneOf([isNull, isAddress]),\n        webSocketAddress: isOneOf([isNull, isAddress]),\n        udpAddress: isOneOf([isNull, isAddress]),\n        proxyHttpAddresses: isArrayOf(isAddress),\n        timestamp: isTimestamp\n    })\n}\n\n// ChannelNodeInfo\nexport interface ChannelNodeInfo {\n    body: ChannelNodeInfoBody,\n    signature: Signature\n}\nexport const exampleAddress: Address = {\n    hostName: 'www.flatironinstitute.org' as any as HostName,\n    port: 15351 as any as Port,\n} as any as Address;\nexport const exampleChannelNodeInfo: ChannelNodeInfo = {\n    body: {\n        channelName: 'exampleChannelName' as any as ChannelName,\n        nodeId: new Array(65).join('a') as any as NodeId,\n        httpAddress: exampleAddress,\n        webSocketAddress: null, // todo: should we prefer a non-null value here?\n        udpAddress: null, // todo: should we prefer a non-null value here?\n        proxyHttpAddresses: [exampleAddress],\n        timestamp: nowTimestamp()\n    },\n    signature: new Array(65).join('a') as any as Signature,\n}\nexport const isChannelNodeInfo = (x: any): x is ChannelNodeInfo => {\n    return _validateObject(x, {\n        body: isChannelNodeInfoBody,\n        signature: isSignature\n    })\n}\n_tests.ChannelNodeInfo = () => { assert(isChannelNodeInfo('exampleChannelNodeInfo')) }\n\n\n// SubfeedMessage\nexport interface SubfeedMessage extends JSONObject {\n    __subfeedMessage__: never;\n};\nexport const exampleSubfeedMessage: SubfeedMessage = {key: 'value'} as any as SubfeedMessage;\nexport const isSubfeedMessage = (x: any): x is SubfeedMessage => {\n    return isObject(x);\n}\n_tests.SubfeedMessage = () => { assert(isSubfeedMessage(exampleSubfeedMessage)) }\n\n\n// SubfeedMessageMetaData\nexport type SubfeedMessageMetaData = Object;\nexport const exampleSubfeedMessageMetaData: SubfeedMessageMetaData = {metaKey: 'metaValue'} as SubfeedMessageMetaData;\nexport const isSubfeedMessageMetaData = (x: any): x is SubfeedMessageMetaData => {\n    return isObject(x);\n}\n_tests.SubfeedMessageMetaData = () => { assert(isSubfeedMessageMetaData(exampleSubfeedMessageMetaData)) }\n\n\n// SignedSubfeedMessage\nexport interface SignedSubfeedMessage {\n    body: {\n        previousSignature?: Signature,\n        messageNumber: number,\n        message: SubfeedMessage,\n        timestamp: Timestamp,\n        metaData?: SubfeedMessageMetaData\n    },\n    signature: Signature\n}\nexport const exampleSignedSubfeedMessage: SignedSubfeedMessage = {\n    body: {\n        previousSignature: new Array(65).join('a') as any as Signature,\n        messageNumber: 5,\n        message: exampleSubfeedMessage,\n        timestamp: nowTimestamp(),\n        metaData: exampleSubfeedMessageMetaData\n    },\n    signature: new Array(65).join('a') as any as Signature,\n}\nexport const isSignedSubfeedMessage = (x: any): x is SignedSubfeedMessage => {\n    if (! _validateObject(x, {\n        body: {\n            previousSignature: optional(isSignature),\n            messageNumber: isNumber,\n            message: isObject,\n            timestamp: isTimestamp,\n            metaData: optional(isSubfeedMessageMetaData)\n        },\n        signature: isSignature\n    })) return false;\n\n    // TODO: If this is to be trusted elsewhere (which it will be based on its name & its being a\n    // type guard) it's essential we check the signature actually matches the message.\n    return true;\n}\n// Test failing, not quite sure why--I think I did something wrong above\n_tests.SignedSubfeedMessage = () => { assert(isSignedSubfeedMessage(exampleSignedSubfeedMessage)) }\n\n\n// SubmittedSubfeedMessage\nexport interface SubmittedSubfeedMessage extends JSONObject {\n    __submittedSubfeedMessage__: never;\n};\nexport const exampleSubmittedSubfeedMessage: SubmittedSubfeedMessage = { msg: \"I am a message \"} as any as SubmittedSubfeedMessage;\nexport const isSubmittedSubfeedMessage = (x: any): x is SubmittedSubfeedMessage => {\n    return ((isObject(x)) && (JSON.stringify(x).length < 10000));\n}\nexport const submittedSubfeedMessageToSubfeedMessage = (x: SubmittedSubfeedMessage) => {\n    return x as any as SubfeedMessage;\n}\n_tests.SubmittedSubfeedMessage = () => { assert(isSubmittedSubfeedMessage(exampleSubmittedSubfeedMessage)) }\n\n\n// FeedsConfigFeed\nexport interface FeedsConfigFeed {\n    publicKey: PublicKeyHex,\n    privateKey: PrivateKeyHex | undefined\n}\nexport const isFeedsConfigFeed = (x: any): x is FeedsConfigFeed => {\n    return _validateObject(x, {\n        publicKey: isString,\n        privateKey: isString\n    });\n    // TODO: Check those public/private key pairs!\n}\nexport const exampleFeedsConfigFeed: FeedsConfigFeed = { publicKey: \"aa\" as any as PublicKeyHex, privateKey: \"bb\" as any as PrivateKeyHex }\n_tests.FeedsConfigFeed = () => { assert(isFeedsConfigFeed(exampleFeedsConfigFeed)) }\n\n\n// FeedName\nexport interface FeedName extends String {\n    __feedName__: never; // phantom\n}\nexport const isFeedName = (x: any): x is FeedName => {\n    return isString(x);\n}\nexport const exampleFeedName: FeedName = \"My feed name\" as any as FeedName;\n_tests.FeedName = () => { assert(isFeedName(exampleFeedName)) }\n\n\n// ErrorMessage\nexport interface ErrorMessage extends String {\n    __errorMessage__: never; // phantom\n}\nexport const isErrorMessage = (x: any): x is ErrorMessage => {\n    return (isString(x)) && (x.length < 1000) ;\n}\nexport const errorMessage = (x: string): ErrorMessage => {\n    if (isErrorMessage(x)) return x;\n    else {\n        throw Error('Invalid error message: messages cannot exceed 1000 characters.');\n    }\n}\nexport const exampleErrorMessage = errorMessage(\"Nothing's wrong. Everything is fine.\");\n_tests.ErrorMessage = () => {\n    assert(isErrorMessage(exampleErrorMessage));\n    try {\n        const overlongMessage = new Array(1001).join('#');\n        let x = errorMessage(overlongMessage);\n        assert(false); // does not occur as error is thrown\n    } catch(err) {\n        assert(err.message === 'Invalid error message: messages cannot exceed 1000 characters.')\n    }\n}\n\n// objectToMap and mapToObject\nexport const objectToMap = <KeyType extends String, ValueType>(obj: {[key: string]: any}) => {\n    return new Map<KeyType, ValueType>(Object.keys(obj).map(k => {\n        return [k as any as KeyType, obj[k] as any as ValueType];\n    }));\n}\nexport const mapToObject = <KeyType extends String, ValueType>(m: Map<KeyType, ValueType>) => {\n    const ret: {[key: string]: any} = {};\n    m.forEach((v, k) => {\n        ret[k.toString()] = v;\n    });\n    return ret;\n}\n\n// TODO: What is this?\n// FeedsConfig and FeedsConfigRAM\nexport interface FeedsConfig {\n    feeds: {[key: string]: FeedsConfigFeed},\n    feedIdsByName: {[key: string]: FeedId}\n}\nexport interface FeedsConfigRAM {\n    feeds: Map<FeedId, FeedsConfigFeed>,\n    feedIdsByName: Map<FeedName, FeedId>\n}\nexport const toFeedsConfigRAM = (x: FeedsConfig): FeedsConfigRAM => {\n    return {\n        feeds: objectToMap<FeedId, FeedsConfigFeed>(x.feeds),\n        feedIdsByName: objectToMap<FeedName, FeedId>(x.feedIdsByName)\n    }\n}\nexport const toFeedsConfig = (x: FeedsConfigRAM): FeedsConfig => {\n    return {\n        feeds: mapToObject<FeedId, FeedsConfigFeed>(x.feeds),\n        feedIdsByName: mapToObject<FeedName, FeedId>(x.feedIdsByName)\n    }\n}\nexport const isFeedsConfig = (x: any): x is FeedsConfig => {\n    return _validateObject(x, {\n        feeds: isObjectOf(isFeedId, isFeedsConfigFeed),\n        feedIdsByName: isObjectOf(isFeedName, isFeedId)\n    })\n}\n\n\n// SubfeedAccessRule\nexport interface SubfeedAccessRule {\n    nodeId: NodeId,\n    write: boolean\n}\nexport const isSubfeedAccessRule = (x: any): x is SubfeedAccessRule => {\n    return _validateObject(x, {\n        nodeId: isNodeId,\n        write: isBoolean\n    })\n}\nexport const exampleSubfeedAccessDeniedRule = { nodeId: new Array(65).join('a') as any as NodeId, write: false } as SubfeedAccessRule\nexport const exampleSubfeedAccessAllowedRule = { nodeId: new Array(65).join('a') as any as NodeId, write: true } as SubfeedAccessRule\n_tests.SubfeedAccessRule = () => {\n    assert(isSubfeedAccessRule(exampleSubfeedAccessDeniedRule));\n    assert(isSubfeedAccessRule(exampleSubfeedAccessAllowedRule));\n}\n\n// SubfeedAccessRules\nexport interface SubfeedAccessRules {\n    rules: SubfeedAccessRule[]\n}\nexport const isSubfeedAccessRules = (x: any): x is SubfeedAccessRules => {\n    return _validateObject(x, {\n        rules: isArrayOf(isSubfeedAccessRule)\n    })\n}\n_tests.SubfeedAccessRules = () => {\n    assert(isArrayOf(isSubfeedAccessRule)([exampleSubfeedAccessAllowedRule, exampleSubfeedAccessDeniedRule]))\n}\n\n\n// SubfeedWatchName\nexport interface SubfeedWatchName extends String {\n    __subfeedWatchName__: never; // phantom\n}\nexport const isSubfeedWatchName = (x: any) => {\n    return isString(x);\n}\nexport const exampleSubfeedWatchName = \"Example Subfeed Watch Name\" as any as SubfeedWatchName;\n_tests.SubfeedWatchName = () => { assert(isSubfeedWatchName(exampleSubfeedWatchName)) }\n\n\n// SubfeedWatch\nexport interface SubfeedWatch {\n    feedId: FeedId,\n    subfeedHash: SubfeedHash,\n    position: number\n    // No name?\n}\nexport const exampleSubfeedWatch: SubfeedWatch = { \n    feedId: new Array(65).join('F') as any as FeedId,\n    subfeedHash: new Array(41).join('b') as any as SubfeedHash,\n    position: 4\n}\nexport const isSubfeedWatch = (x: any): x is SubfeedWatch => {\n    return _validateObject(x, {\n        feedId: isFeedId,\n        subfeedHash: isSubfeedHash,\n        position: isNumber\n    });\n}\n_tests.SubfeedWatch = () => { assert(isSubfeedWatch(exampleSubfeedWatch)) }\n\n\n// FeedSubfeedId\nexport interface FeedSubfeedId extends String {\n    __feedSubfeedId__: never; // phantom\n}\nexport const feedSubfeedId = (feedId: FeedId, subfeedHash: SubfeedHash): FeedSubfeedId => {\n    return (feedId.toString() + ':' + subfeedHash.toString()) as any as FeedSubfeedId; \n}\nexport const isFeedSubfeedId = (x: any): x is FeedSubfeedId => {\n    if (!isString(x)) return false;\n    const parts = x.split(':');\n    return (parts.length === 2) &&\n           (isFeedId(parts[0])) &&\n           (isSubfeedHash(parts[1]));\n}\nexport const exampleFeedSubfeedId: FeedSubfeedId = feedSubfeedId(new Array(65).join('F') as any as FeedId, new Array(41).join('b') as any as SubfeedHash);\n_tests.FeedSubfeedId = () => {\n    assert(isFeedSubfeedId(exampleFeedSubfeedId));\n}\n\n\n// TODO: Skipped this part--want to discuss\n// SubfeedWatches and SubfeedWatchesRAM\nexport type SubfeedWatches = {[key: string]: SubfeedWatch};\nexport const isSubfeedWatches = (x: any): x is SubfeedWatches => {\n    return isObjectOf(isSubfeedWatchName, isSubfeedWatch)(x);\n}\nexport type SubfeedWatchesRAM = Map<SubfeedWatchName, SubfeedWatch>;\nexport const toSubfeedWatchesRAM = (x: SubfeedWatches) => {\n    return objectToMap<SubfeedWatchName, SubfeedWatch>(x);\n}\nexport const toSubfeedWatches = (x: SubfeedWatchesRAM) => {\n    return mapToObject<SubfeedWatchName, SubfeedWatch>(x);\n}\n\n\n// ChannelName\nexport interface LiveFeedSubscriptionName extends String {\n    __liveFeedSubscriptionName__: never // phantom type\n}\nexport const isLiveFeedSubscriptionName = (x: any): x is LiveFeedSubscriptionName => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-zA-Z_\\-\\. ]{4,160}?$/.test(x));\n}\n\n// LiveFeedSubscription\nexport interface LiveFeedSubscription {\n    subscriptionName: LiveFeedSubscriptionName,\n    feedId: FeedId,\n    subfeedHash: SubfeedHash,\n    position: number\n}\nexport const isLiveFeedSubscription = (x: any): x is LiveFeedSubscription => {\n    return _validateObject(x, {\n        subscriptionName: isLiveFeedSubscriptionName,\n        feedId: isFeedId,\n        subfeedHash: isSubfeedHash,\n        position: isNumber\n    })\n}\nexport const exampleLiveFeedSubscription: LiveFeedSubscription = {\n    subscriptionName: \"This is my subscription\" as any as LiveFeedSubscriptionName,\n    feedId: new Array(65).join('F') as any as FeedId,\n    subfeedHash: new Array(41).join('b') as any as SubfeedHash,\n    position: 12\n}\n_tests.LiveFeedSubscription = () => { assert(isLiveFeedSubscription(exampleLiveFeedSubscription)) }\n\n\n// LiveFeedSubscriptions\nexport interface LiveFeedSubscriptions {\n    subscriptions: LiveFeedSubscription[]\n}\nexport const isLiveFeedSubscriptions = (x: any): x is LiveFeedSubscriptions => {\n    return _validateObject(x, {\n        subscriptions: isArrayOf(isLiveFeedSubscription)\n    })\n}\n_tests.LiveFeedSubscriptions = () => { \n    assert(isArrayOf(isLiveFeedSubscription)([exampleLiveFeedSubscription]));\n }\n\n\n// ChannelInfo\nexport interface ChannelInfo {\n    nodes: ChannelNodeInfo[]\n}\nexport const isChannelInfo = (x: any): x is ChannelInfo => {\n    return _validateObject(x, {\n        nodes: isArrayOf(isChannelNodeInfo)\n    })\n}\nexport const exampleChannelInfo: ChannelInfo = { nodes: [exampleChannelNodeInfo] } as any as ChannelInfo\n_tests.ChannelInfo = () => { assert(isChannelInfo(exampleChannelInfo)) }\n\n\nexport interface MulticastAnnounceMessageBody {\n    protocolVersion: ProtocolVersion,\n    fromNodeId: NodeId,\n    messageType: 'announce', // Should be actual type/enum?\n    requestData: AnnounceRequestData\n}\nexport const isMulticastAnnounceMessageBody = (x: any): x is MulticastAnnounceMessageBody => {\n    return _validateObject(x, {\n        protocolVersion: isProtocolVersion,\n        fromNodeId: isNodeId,\n        messageType: isEqualTo('announce'),\n        requestData: isAnnounceRequestData\n    })\n}\n\nexport interface MulticastAnnounceMessage {\n    body: MulticastAnnounceMessageBody,\n    signature: Signature\n}\nexport const isMulticastAnnounceMessage = (x: any): x is MulticastAnnounceMessage => {\n    return _validateObject(x, {\n        body: isMulticastAnnounceMessageBody,\n        signature: isSignature\n    })\n}\nexport const exampleMulticastAnnounceMessage: MulticastAnnounceMessage = {\n    body: {\n        protocolVersion: \"valid example protocol\" as any as ProtocolVersion,\n        fromNodeId: new Array(65).join('a') as any as NodeId,\n        messageType: 'announce',\n        requestData: {  // TODO: This should be standardized; and we are growing toward a weird cross-import situation.\n            requestType: 'announce',\n            channelNodeInfo: exampleChannelNodeInfo\n        }\n    },\n    signature: new Array(65).join('a') as any as Signature\n}\n_tests.MulticastAnnounceMessage = () => {\n    assert(isMulticastAnnounceMessage(exampleMulticastAnnounceMessage));\n}\n\n\nexport const jsonObjectsMatch = (x1: any, x2: any): boolean => {\n    if (!isJSONObject(x1)) throw Error('x1 is not a json object in jsonObjectsMatch');\n    if (!isJSONObject(x2)) throw Error('x2 is not a json object in jsonObjectsMatch');\n    return (JSONStringifyDeterministic(x1) === JSONStringifyDeterministic(x2));\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9c036afc6f955c3f1c93599f7afc51c0d39b8c29","contentHash":"c4951073a59929dcc659dcfe13ac3fe3c9e463e4babe9de088f78ea78fc3f9b0"},"/home/jsoules/src/kachery-p2p/daemon/src/common/crypto_util.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/common/crypto_util.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":325}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":51}},"5":{"start":{"line":8,"column":15},"end":{"line":8,"column":44}},"6":{"start":{"line":9,"column":15},"end":{"line":9,"column":32}},"7":{"start":{"line":10,"column":28},"end":{"line":10,"column":54}},"8":{"start":{"line":11,"column":32},"end":{"line":11,"column":66}},"9":{"start":{"line":12,"column":0},"end":{"line":21,"column":2}},"10":{"start":{"line":13,"column":4},"end":{"line":20,"column":5}},"11":{"start":{"line":14,"column":8},"end":{"line":14,"column":123}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":26}},"13":{"start":{"line":18,"column":8},"end":{"line":18,"column":26}},"14":{"start":{"line":19,"column":8},"end":{"line":19,"column":58}},"15":{"start":{"line":22,"column":0},"end":{"line":31,"column":2}},"16":{"start":{"line":23,"column":4},"end":{"line":30,"column":5}},"17":{"start":{"line":24,"column":8},"end":{"line":24,"column":144}},"18":{"start":{"line":27,"column":8},"end":{"line":27,"column":26}},"19":{"start":{"line":28,"column":8},"end":{"line":28,"column":26}},"20":{"start":{"line":29,"column":8},"end":{"line":29,"column":63}},"21":{"start":{"line":32,"column":0},"end":{"line":52,"column":2}},"22":{"start":{"line":33,"column":4},"end":{"line":43,"column":5}},"23":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"24":{"start":{"line":35,"column":12},"end":{"line":35,"column":25}},"25":{"start":{"line":37,"column":24},"end":{"line":37,"column":58}},"26":{"start":{"line":39,"column":27},"end":{"line":39,"column":29}},"27":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"28":{"start":{"line":41,"column":12},"end":{"line":41,"column":25}},"29":{"start":{"line":44,"column":4},"end":{"line":51,"column":5}},"30":{"start":{"line":45,"column":8},"end":{"line":45,"column":163}},"31":{"start":{"line":48,"column":8},"end":{"line":48,"column":26}},"32":{"start":{"line":49,"column":8},"end":{"line":49,"column":60}},"33":{"start":{"line":50,"column":8},"end":{"line":50,"column":21}},"34":{"start":{"line":53,"column":0},"end":{"line":73,"column":2}},"35":{"start":{"line":54,"column":4},"end":{"line":64,"column":5}},"36":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"37":{"start":{"line":56,"column":12},"end":{"line":56,"column":25}},"38":{"start":{"line":58,"column":24},"end":{"line":58,"column":58}},"39":{"start":{"line":60,"column":27},"end":{"line":60,"column":29}},"40":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"41":{"start":{"line":62,"column":12},"end":{"line":62,"column":25}},"42":{"start":{"line":65,"column":4},"end":{"line":72,"column":5}},"43":{"start":{"line":66,"column":8},"end":{"line":66,"column":142}},"44":{"start":{"line":69,"column":8},"end":{"line":69,"column":26}},"45":{"start":{"line":70,"column":8},"end":{"line":70,"column":60}},"46":{"start":{"line":71,"column":8},"end":{"line":71,"column":21}},"47":{"start":{"line":74,"column":0},"end":{"line":78,"column":2}},"48":{"start":{"line":75,"column":17},"end":{"line":75,"column":52}},"49":{"start":{"line":76,"column":4},"end":{"line":76,"column":23}},"50":{"start":{"line":77,"column":4},"end":{"line":77,"column":32}},"51":{"start":{"line":79,"column":0},"end":{"line":92,"column":2}},"52":{"start":{"line":80,"column":14},"end":{"line":80,"column":35}},"53":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"54":{"start":{"line":82,"column":8},"end":{"line":82,"column":53}},"55":{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},"56":{"start":{"line":85,"column":8},"end":{"line":85,"column":53}},"57":{"start":{"line":87,"column":16},"end":{"line":87,"column":59}},"58":{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},"59":{"start":{"line":89,"column":8},"end":{"line":89,"column":53}},"60":{"start":{"line":91,"column":4},"end":{"line":91,"column":49}},"61":{"start":{"line":93,"column":0},"end":{"line":95,"column":2}},"62":{"start":{"line":94,"column":4},"end":{"line":94,"column":34}},"63":{"start":{"line":96,"column":0},"end":{"line":109,"column":2}},"64":{"start":{"line":97,"column":14},"end":{"line":97,"column":36}},"65":{"start":{"line":98,"column":4},"end":{"line":100,"column":5}},"66":{"start":{"line":99,"column":8},"end":{"line":99,"column":54}},"67":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"68":{"start":{"line":102,"column":8},"end":{"line":102,"column":54}},"69":{"start":{"line":104,"column":16},"end":{"line":104,"column":59}},"70":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"71":{"start":{"line":106,"column":8},"end":{"line":106,"column":54}},"72":{"start":{"line":108,"column":4},"end":{"line":108,"column":53}},"73":{"start":{"line":110,"column":0},"end":{"line":115,"column":2}},"74":{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},"75":{"start":{"line":112,"column":8},"end":{"line":112,"column":64}},"76":{"start":{"line":114,"column":4},"end":{"line":114,"column":135}},"77":{"start":{"line":116,"column":0},"end":{"line":121,"column":2}},"78":{"start":{"line":117,"column":4},"end":{"line":119,"column":5}},"79":{"start":{"line":118,"column":8},"end":{"line":118,"column":65}},"80":{"start":{"line":120,"column":4},"end":{"line":120,"column":141}},"81":{"start":{"line":122,"column":0},"end":{"line":140,"column":2}},"82":{"start":{"line":123,"column":38},"end":{"line":135,"column":6}},"83":{"start":{"line":136,"column":4},"end":{"line":139,"column":6}},"84":{"start":{"line":142,"column":0},"end":{"line":147,"column":2}},"85":{"start":{"line":143,"column":18},"end":{"line":143,"column":20}},"86":{"start":{"line":144,"column":4},"end":{"line":144,"column":84}},"87":{"start":{"line":144,"column":48},"end":{"line":144,"column":66}},"88":{"start":{"line":144,"column":67},"end":{"line":144,"column":80}},"89":{"start":{"line":145,"column":4},"end":{"line":145,"column":19}},"90":{"start":{"line":146,"column":4},"end":{"line":146,"column":47}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":23},"end":{"line":12,"column":24}},"loc":{"start":{"line":12,"column":41},"end":{"line":21,"column":1}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":27},"end":{"line":22,"column":28}},"loc":{"start":{"line":22,"column":45},"end":{"line":31,"column":1}},"line":22},"3":{"name":"(anonymous_3)","decl":{"start":{"line":32,"column":30},"end":{"line":32,"column":31}},"loc":{"start":{"line":32,"column":95},"end":{"line":52,"column":1}},"line":32},"4":{"name":"(anonymous_4)","decl":{"start":{"line":53,"column":26},"end":{"line":53,"column":27}},"loc":{"start":{"line":53,"column":91},"end":{"line":73,"column":1}},"line":53},"5":{"name":"(anonymous_5)","decl":{"start":{"line":74,"column":18},"end":{"line":74,"column":19}},"loc":{"start":{"line":74,"column":27},"end":{"line":78,"column":1}},"line":74},"6":{"name":"(anonymous_6)","decl":{"start":{"line":79,"column":25},"end":{"line":79,"column":26}},"loc":{"start":{"line":79,"column":40},"end":{"line":92,"column":1}},"line":79},"7":{"name":"(anonymous_7)","decl":{"start":{"line":93,"column":31},"end":{"line":93,"column":32}},"loc":{"start":{"line":93,"column":49},"end":{"line":95,"column":1}},"line":93},"8":{"name":"(anonymous_8)","decl":{"start":{"line":96,"column":26},"end":{"line":96,"column":27}},"loc":{"start":{"line":96,"column":42},"end":{"line":109,"column":1}},"line":96},"9":{"name":"(anonymous_9)","decl":{"start":{"line":110,"column":25},"end":{"line":110,"column":26}},"loc":{"start":{"line":110,"column":32},"end":{"line":115,"column":1}},"line":110},"10":{"name":"(anonymous_10)","decl":{"start":{"line":116,"column":26},"end":{"line":116,"column":27}},"loc":{"start":{"line":116,"column":33},"end":{"line":121,"column":1}},"line":116},"11":{"name":"(anonymous_11)","decl":{"start":{"line":122,"column":24},"end":{"line":122,"column":25}},"loc":{"start":{"line":122,"column":30},"end":{"line":140,"column":1}},"line":122},"12":{"name":"(anonymous_12)","decl":{"start":{"line":142,"column":37},"end":{"line":142,"column":38}},"loc":{"start":{"line":142,"column":65},"end":{"line":147,"column":1}},"line":142},"13":{"name":"(anonymous_13)","decl":{"start":{"line":144,"column":24},"end":{"line":144,"column":25}},"loc":{"start":{"line":144,"column":46},"end":{"line":144,"column":82}},"line":144}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":32,"column":58},"end":{"line":32,"column":90}},"type":"default-arg","locations":[{"start":{"line":32,"column":65},"end":{"line":32,"column":90}}],"line":32},"4":{"loc":{"start":{"line":33,"column":4},"end":{"line":43,"column":5}},"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":43,"column":5}},{"start":{"line":33,"column":4},"end":{"line":43,"column":5}}],"line":33},"5":{"loc":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},{"start":{"line":34,"column":8},"end":{"line":36,"column":9}}],"line":34},"6":{"loc":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},{"start":{"line":40,"column":8},"end":{"line":42,"column":9}}],"line":40},"7":{"loc":{"start":{"line":53,"column":54},"end":{"line":53,"column":86}},"type":"default-arg","locations":[{"start":{"line":53,"column":61},"end":{"line":53,"column":86}}],"line":53},"8":{"loc":{"start":{"line":54,"column":4},"end":{"line":64,"column":5}},"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":64,"column":5}},{"start":{"line":54,"column":4},"end":{"line":64,"column":5}}],"line":54},"9":{"loc":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},{"start":{"line":55,"column":8},"end":{"line":57,"column":9}}],"line":55},"10":{"loc":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},{"start":{"line":61,"column":8},"end":{"line":63,"column":9}}],"line":61},"11":{"loc":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},{"start":{"line":81,"column":4},"end":{"line":83,"column":5}}],"line":81},"12":{"loc":{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},{"start":{"line":84,"column":4},"end":{"line":86,"column":5}}],"line":84},"13":{"loc":{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},{"start":{"line":88,"column":4},"end":{"line":90,"column":5}}],"line":88},"14":{"loc":{"start":{"line":98,"column":4},"end":{"line":100,"column":5}},"type":"if","locations":[{"start":{"line":98,"column":4},"end":{"line":100,"column":5}},{"start":{"line":98,"column":4},"end":{"line":100,"column":5}}],"line":98},"15":{"loc":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},{"start":{"line":101,"column":4},"end":{"line":103,"column":5}}],"line":101},"16":{"loc":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},{"start":{"line":105,"column":4},"end":{"line":107,"column":5}}],"line":105},"17":{"loc":{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},"type":"if","locations":[{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},{"start":{"line":111,"column":4},"end":{"line":113,"column":5}}],"line":111},"18":{"loc":{"start":{"line":117,"column":4},"end":{"line":119,"column":5}},"type":"if","locations":[{"start":{"line":117,"column":4},"end":{"line":119,"column":5}},{"start":{"line":117,"column":4},"end":{"line":119,"column":5}}],"line":117},"19":{"loc":{"start":{"line":142,"column":43},"end":{"line":142,"column":60}},"type":"default-arg","locations":[{"start":{"line":142,"column":51},"end":{"line":142,"column":60}}],"line":142}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":1,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0},"f":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0]},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/common/crypto_util.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/common/crypto_util.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport { elapsedSince, FeedId, JSONObject, KeyPair, PrivateKey, PrivateKeyHex, PublicKey, PublicKeyHex, Sha1Hash, Signature, Timestamp } from '../interfaces/core';\nimport { kacheryP2PSerialize } from './util';\n\nconst ed25519PubKeyPrefix = \"302a300506032b6570032100\";\nconst ed25519PrivateKeyPrefix = \"302e020100300506032b657004220420\";\n\nexport const getSignature = (obj: Object, keyPair: KeyPair): Signature => {\n    try {\n        return crypto.sign(null, kacheryP2PSerialize(obj), keyPair.privateKey.toString()).toString('hex') as any as Signature;\n    }\n    catch(err) {\n        console.warn(obj);\n        console.warn(err);\n        throw Error('Exception when creating signature.');\n    }\n}\n\nexport const getSignatureJson = (obj: Object, keyPair: KeyPair): Signature => {\n    try {\n        return crypto.sign(null, Buffer.from(JSONStringifyDeterministic(obj)), keyPair.privateKey.toString()).toString('hex') as any as Signature;\n    }\n    catch(err) {\n        console.warn(obj);\n        console.warn(err);\n        throw Error('Exception when creating signature Json.');\n    }\n}\n\nexport const verifySignatureJson = (obj: JSONObject & {timestamp?: Timestamp}, signature: Signature, publicKey: PublicKey, opts: {checkTimestamp: boolean}={checkTimestamp: false}) => {\n    if (opts.checkTimestamp) {\n        if (!obj.timestamp) {\n            return false;\n        }\n        const elapsed = elapsedSince(obj.timestamp)\n        // needs to be less than 30 minutes old\n        const numMinutes = 30;\n        if (elapsed > numMinutes * 60 * 1000) {\n            return false;\n        }\n    }\n    try {\n        return crypto.verify(null, Buffer.from(JSONStringifyDeterministic(obj)), publicKey.toString(), Buffer.from(signature.toString(), 'hex'));\n    }\n    catch(err) {\n        console.warn(err);\n        console.warn('Exception when verifying signature.');\n        return false;\n    }\n}\n\nexport const verifySignature = (obj: Object & {timestamp?: Timestamp}, signature: Signature, publicKey: PublicKey, opts={checkTimestamp: false}): boolean => {\n    if (opts.checkTimestamp) {\n        if (!obj.timestamp) {\n            return false;\n        }\n        const elapsed = elapsedSince(obj.timestamp)\n        // needs to be less than 30 minutes old\n        const numMinutes = 30;\n        if (elapsed > numMinutes * 60 * 1000) {\n            return false;\n        }\n    }\n    try {\n        return crypto.verify(null, kacheryP2PSerialize(obj), publicKey.toString(), Buffer.from(signature.toString(), 'hex'));\n    }\n    catch(err) {\n        console.warn(err);\n        console.warn('Exception when verifying signature.');\n        return false;\n    }\n}\n\nexport const sha1sum = (txt: string): Sha1Hash => {\n    var shasum = crypto.createHash('sha1')\n    shasum.update(txt)\n    return shasum.digest('hex') as any as Sha1Hash;\n}\n\nexport const publicKeyToHex = (publicKey: PublicKey): PublicKeyHex => {\n    const x = publicKey.split('\\n');\n    if (x[0] !== '-----BEGIN PUBLIC KEY-----') {\n        throw Error('Problem in public key format.');\n    }\n    if (x[2] !== '-----END PUBLIC KEY-----') {\n        throw Error('Problem in public key format.');\n    }\n    const ret = Buffer.from(x[1], 'base64').toString('hex');\n    if (!ret.startsWith(ed25519PubKeyPrefix)) {\n        throw Error('Problem in public key format.');\n    }\n    return ret.slice(ed25519PubKeyPrefix.length) as any as PublicKeyHex;\n}\n\nexport const publicKeyHexToFeedId = (publicKeyHex: PublicKeyHex): FeedId => {\n    return publicKeyToHex as any as FeedId;\n}\n\nexport const privateKeyToHex = (privateKey: PrivateKey): PrivateKeyHex => {\n    const x = privateKey.split('\\n');\n    if (x[0] !== '-----BEGIN PRIVATE KEY-----') {\n        throw Error('Problem in private key format.');\n    }\n    if (x[2] !== '-----END PRIVATE KEY-----') {\n        throw Error('Problem in private key format.');\n    }\n    const ret = Buffer.from(x[1], 'base64').toString('hex');\n    if (!ret.startsWith(ed25519PrivateKeyPrefix)) {\n        throw Error('Problem in private key format.');\n    }\n    return ret.slice(ed25519PrivateKeyPrefix.length) as any as PrivateKeyHex;\n}\n\nexport const hexToPublicKey = (x: PublicKeyHex): PublicKey => {\n    if (!x) {\n        throw Error('Error in hexToPublicKey. Input is empty.');\n    }\n    return `-----BEGIN PUBLIC KEY-----\\n${Buffer.from(ed25519PubKeyPrefix + x, 'hex').toString('base64')}\\n-----END PUBLIC KEY-----\\n` as any as PublicKey;\n}\n\nexport const hexToPrivateKey = (x: PrivateKeyHex): PrivateKey => {\n    if (!x) {\n        throw Error('Error in hexToPrivateKey. Input is empty.');\n    }\n    return `-----BEGIN PRIVATE KEY-----\\n${Buffer.from(ed25519PrivateKeyPrefix + x, 'hex').toString('base64')}\\n-----END PRIVATE KEY-----\\n` as any as PrivateKey;\n}\n\nexport const createKeyPair = () => {\n    const {publicKey, privateKey} = crypto.generateKeyPairSync('ed25519', {\n        // modulusLength: 1024,\n        publicKeyEncoding: {\n            type: 'spki',\n            format: 'pem'\n        },\n        privateKeyEncoding: {\n            type: 'pkcs8',\n            format: 'pem'\n            // cipher: 'aes-256-cbc',\n            // passphrase: 'top secret'\n        }\n    });\n    return {\n        publicKey: publicKey as any as PublicKey,\n        privateKey: privateKey as any as PrivateKey\n    }\n}\n\n// Thanks: https://stackoverflow.com/questions/16167581/sort-object-properties-and-json-stringify\nexport const JSONStringifyDeterministic = ( obj: Object, space: string | number | undefined =undefined ) => {\n    var allKeys: string[] = [];\n    JSON.stringify( obj, function( key, value ){ allKeys.push( key ); return value; } )\n    allKeys.sort();\n    return JSON.stringify( obj, allKeys, space );\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cf3b9a17a81f3389c497cacc41efe253e9b9ae54","contentHash":"7fc2d347c3ab2262ae5275f851a011ea1e63a5414508ffd8cd2ea87bea5a7e11"},"/home/jsoules/src/kachery-p2p/daemon/src/common/util.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/common/util.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":192}},"4":{"start":{"line":7,"column":15},"end":{"line":7,"column":47}},"5":{"start":{"line":8,"column":13},"end":{"line":8,"column":43}},"6":{"start":{"line":9,"column":0},"end":{"line":15,"column":2}},"7":{"start":{"line":10,"column":15},"end":{"line":10,"column":17}},"8":{"start":{"line":11,"column":19},"end":{"line":11,"column":83}},"9":{"start":{"line":12,"column":4},"end":{"line":13,"column":77}},"10":{"start":{"line":12,"column":17},"end":{"line":12,"column":18}},"11":{"start":{"line":13,"column":8},"end":{"line":13,"column":77}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":16}},"13":{"start":{"line":16,"column":0},"end":{"line":25,"column":2}},"14":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"15":{"start":{"line":18,"column":8},"end":{"line":18,"column":84}},"16":{"start":{"line":20,"column":15},"end":{"line":20,"column":17}},"17":{"start":{"line":21,"column":19},"end":{"line":21,"column":73}},"18":{"start":{"line":22,"column":4},"end":{"line":23,"column":77}},"19":{"start":{"line":22,"column":17},"end":{"line":22,"column":18}},"20":{"start":{"line":23,"column":8},"end":{"line":23,"column":77}},"21":{"start":{"line":24,"column":4},"end":{"line":24,"column":16}},"22":{"start":{"line":26,"column":0},"end":{"line":31,"column":2}},"23":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"24":{"start":{"line":28,"column":8},"end":{"line":28,"column":37}},"25":{"start":{"line":30,"column":4},"end":{"line":30,"column":17}},"26":{"start":{"line":32,"column":0},"end":{"line":35,"column":2}},"27":{"start":{"line":33,"column":16},"end":{"line":33,"column":67}},"28":{"start":{"line":34,"column":4},"end":{"line":34,"column":27}},"29":{"start":{"line":36,"column":0},"end":{"line":38,"column":2}},"30":{"start":{"line":37,"column":4},"end":{"line":37,"column":57}},"31":{"start":{"line":39,"column":0},"end":{"line":41,"column":2}},"32":{"start":{"line":40,"column":4},"end":{"line":40,"column":72}},"33":{"start":{"line":42,"column":25},"end":{"line":62,"column":1}},"34":{"start":{"line":43,"column":4},"end":{"line":61,"column":5}},"35":{"start":{"line":44,"column":8},"end":{"line":44,"column":17}},"36":{"start":{"line":46,"column":9},"end":{"line":61,"column":5}},"37":{"start":{"line":47,"column":8},"end":{"line":57,"column":9}},"38":{"start":{"line":48,"column":12},"end":{"line":48,"column":53}},"39":{"start":{"line":48,"column":31},"end":{"line":48,"column":50}},"40":{"start":{"line":51,"column":25},"end":{"line":51,"column":46}},"41":{"start":{"line":52,"column":22},"end":{"line":52,"column":24}},"42":{"start":{"line":53,"column":12},"end":{"line":55,"column":13}},"43":{"start":{"line":54,"column":16},"end":{"line":54,"column":48}},"44":{"start":{"line":56,"column":12},"end":{"line":56,"column":23}},"45":{"start":{"line":60,"column":8},"end":{"line":60,"column":17}},"46":{"start":{"line":63,"column":38},"end":{"line":91,"column":1}},"47":{"start":{"line":64,"column":4},"end":{"line":90,"column":5}},"48":{"start":{"line":67,"column":20},"end":{"line":67,"column":28}},"49":{"start":{"line":68,"column":8},"end":{"line":74,"column":9}},"50":{"start":{"line":69,"column":12},"end":{"line":69,"column":23}},"51":{"start":{"line":72,"column":12},"end":{"line":72,"column":30}},"52":{"start":{"line":73,"column":12},"end":{"line":73,"column":68}},"53":{"start":{"line":76,"column":9},"end":{"line":90,"column":5}},"54":{"start":{"line":77,"column":8},"end":{"line":86,"column":9}},"55":{"start":{"line":78,"column":12},"end":{"line":78,"column":66}},"56":{"start":{"line":78,"column":31},"end":{"line":78,"column":63}},"57":{"start":{"line":81,"column":24},"end":{"line":81,"column":26}},"58":{"start":{"line":82,"column":12},"end":{"line":84,"column":13}},"59":{"start":{"line":83,"column":16},"end":{"line":83,"column":61}},"60":{"start":{"line":85,"column":12},"end":{"line":85,"column":23}},"61":{"start":{"line":89,"column":8},"end":{"line":89,"column":17}},"62":{"start":{"line":92,"column":0},"end":{"line":92,"column":62}},"63":{"start":{"line":92,"column":27},"end":{"line":92,"column":61}},"64":{"start":{"line":92,"column":44},"end":{"line":92,"column":60}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":23},"end":{"line":9,"column":24}},"loc":{"start":{"line":9,"column":38},"end":{"line":15,"column":1}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":28},"end":{"line":16,"column":29}},"loc":{"start":{"line":16,"column":43},"end":{"line":25,"column":1}},"line":16},"3":{"name":"(anonymous_3)","decl":{"start":{"line":26,"column":29},"end":{"line":26,"column":30}},"loc":{"start":{"line":26,"column":52},"end":{"line":31,"column":1}},"line":26},"4":{"name":"(anonymous_4)","decl":{"start":{"line":32,"column":23},"end":{"line":32,"column":24}},"loc":{"start":{"line":32,"column":39},"end":{"line":35,"column":1}},"line":32},"5":{"name":"(anonymous_5)","decl":{"start":{"line":36,"column":30},"end":{"line":36,"column":31}},"loc":{"start":{"line":36,"column":37},"end":{"line":38,"column":1}},"line":36},"6":{"name":"(anonymous_6)","decl":{"start":{"line":39,"column":32},"end":{"line":39,"column":33}},"loc":{"start":{"line":39,"column":39},"end":{"line":41,"column":1}},"line":39},"7":{"name":"(anonymous_7)","decl":{"start":{"line":42,"column":25},"end":{"line":42,"column":26}},"loc":{"start":{"line":42,"column":32},"end":{"line":62,"column":1}},"line":42},"8":{"name":"(anonymous_8)","decl":{"start":{"line":48,"column":25},"end":{"line":48,"column":26}},"loc":{"start":{"line":48,"column":31},"end":{"line":48,"column":50}},"line":48},"9":{"name":"(anonymous_9)","decl":{"start":{"line":63,"column":38},"end":{"line":63,"column":39}},"loc":{"start":{"line":63,"column":45},"end":{"line":91,"column":1}},"line":63},"10":{"name":"(anonymous_10)","decl":{"start":{"line":78,"column":25},"end":{"line":78,"column":26}},"loc":{"start":{"line":78,"column":31},"end":{"line":78,"column":63}},"line":78},"11":{"name":"(anonymous_11)","decl":{"start":{"line":92,"column":20},"end":{"line":92,"column":21}},"loc":{"start":{"line":92,"column":27},"end":{"line":92,"column":61}},"line":92},"12":{"name":"(anonymous_12)","decl":{"start":{"line":92,"column":39},"end":{"line":92,"column":40}},"loc":{"start":{"line":92,"column":44},"end":{"line":92,"column":60}},"line":92}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},{"start":{"line":17,"column":4},"end":{"line":19,"column":5}}],"line":17},"4":{"loc":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},{"start":{"line":27,"column":4},"end":{"line":29,"column":5}}],"line":27},"5":{"loc":{"start":{"line":43,"column":4},"end":{"line":61,"column":5}},"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":61,"column":5}},{"start":{"line":43,"column":4},"end":{"line":61,"column":5}}],"line":43},"6":{"loc":{"start":{"line":46,"column":9},"end":{"line":61,"column":5}},"type":"if","locations":[{"start":{"line":46,"column":9},"end":{"line":61,"column":5}},{"start":{"line":46,"column":9},"end":{"line":61,"column":5}}],"line":46},"7":{"loc":{"start":{"line":47,"column":8},"end":{"line":57,"column":9}},"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":57,"column":9}},{"start":{"line":47,"column":8},"end":{"line":57,"column":9}}],"line":47},"8":{"loc":{"start":{"line":64,"column":4},"end":{"line":90,"column":5}},"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":90,"column":5}},{"start":{"line":64,"column":4},"end":{"line":90,"column":5}}],"line":64},"9":{"loc":{"start":{"line":68,"column":8},"end":{"line":74,"column":9}},"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":74,"column":9}},{"start":{"line":68,"column":8},"end":{"line":74,"column":9}}],"line":68},"10":{"loc":{"start":{"line":76,"column":9},"end":{"line":90,"column":5}},"type":"if","locations":[{"start":{"line":76,"column":9},"end":{"line":90,"column":5}},{"start":{"line":76,"column":9},"end":{"line":90,"column":5}}],"line":76},"11":{"loc":{"start":{"line":77,"column":8},"end":{"line":86,"column":9}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":86,"column":9}},{"start":{"line":77,"column":8},"end":{"line":86,"column":9}}],"line":77}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":1,"15":0,"16":1,"17":1,"18":1,"19":1,"20":10,"21":1,"22":1,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":1,"30":0,"31":1,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":0,"64":0},"f":{"0":2,"1":0,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"0":[1,1,1],"1":[0,2],"2":[2,2],"3":[0,1],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/common/util.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/common/util.ts"],"names":[],"mappings":"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","sourcesContent":["import bson from 'bson';\nimport fs from 'fs';\nimport { FileKey, Sha1Hash } from '../interfaces/core';\n\nexport const randomString = (num_chars: number) => {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < num_chars; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    return text;\n}\n\nexport const randomAlphaString = (num_chars: number) => {\n    if (!num_chars) {\n        throw Error('randomAlphaString: num_chars needs to be a positive integer.')\n    }\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    for (var i = 0; i < num_chars; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    return text;\n}\n\nexport const sha1MatchesFileKey = ({sha1, fileKey}: {sha1: Sha1Hash, fileKey: FileKey}) => {\n    if (fileKey.sha1) {\n        return fileKey.sha1 === sha1\n    }\n    return false\n}\n\nexport const readJsonFile = async (path: string) => {\n    const txt = await fs.promises.readFile(path, 'utf-8');\n    return JSON.parse(txt);\n}\n\nexport const kacheryP2PSerialize = (x: Object) => {\n    return bson.serialize(sortKeysInObject(x));\n}\n\nexport const kacheryP2PDeserialize = (x: Buffer) => {\n    return convertBinaryToBufferInObject(bson.deserialize(x));\n}\n\nconst sortKeysInObject = (x: any): any => {\n    if (x instanceof Buffer) {\n        return x;\n    }\n    else if (x instanceof Object) {\n        if (Array.isArray(x)) {\n            return x.map(a => (sortKeysInObject(a)));\n        }\n        else {\n            const keys = Object.keys(x).sort();\n            let ret: any = {};\n            for (let k of keys) {\n                ret[k] = sortKeysInObject(x[k]);\n            }\n            return ret;\n        }\n    }\n    else {\n        return x;\n    }\n}\n\nconst convertBinaryToBufferInObject = (x: any): any => {\n    if (x instanceof bson.Binary) {\n        // This might be the troublesome line.\n        // We should check to see if the underlying type is byte array before returning the internal buffer.\n        const ret = x.buffer\n        if (ret instanceof Buffer) {\n            return ret\n        }\n        else {\n            console.warn(ret)\n            throw Error(`Problem in convertBinaryToBufferInObject`)\n        }\n    }\n    else if (x instanceof Object) {\n        if (Array.isArray(x)) {\n            return x.map(a => (convertBinaryToBufferInObject(a)));\n        }\n        else {\n            const ret: any = {};\n            for (let k in x) {\n                ret[k] = convertBinaryToBufferInObject(x[k])\n            }\n            return ret;\n        }\n    }\n    else {\n        return x;\n    }\n}\n\n\nexport const sleepMsec = (m: number) => new Promise(r => setTimeout(r, m));"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ddeb7c130d73f654b283703a41ec090d8531058b","contentHash":"2bfdaddcaa2680b0fc11a6bcff83eae056ff22be4c3c02f0c401eff4078d1310"},"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/NodeToNodeRequest.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/NodeToNodeRequest.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":927}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":51}},"5":{"start":{"line":8,"column":15},"end":{"line":8,"column":40}},"6":{"start":{"line":9,"column":26},"end":{"line":9,"column":55}},"7":{"start":{"line":10,"column":26},"end":{"line":10,"column":64}},"8":{"start":{"line":11,"column":15},"end":{"line":11,"column":32}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":20}},"10":{"start":{"line":13,"column":0},"end":{"line":17,"column":2}},"11":{"start":{"line":14,"column":4},"end":{"line":15,"column":21}},"12":{"start":{"line":15,"column":8},"end":{"line":15,"column":21}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":38}},"14":{"start":{"line":18,"column":0},"end":{"line":20,"column":2}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":40}},"16":{"start":{"line":21,"column":0},"end":{"line":21,"column":100}},"17":{"start":{"line":21,"column":34},"end":{"line":21,"column":97}},"18":{"start":{"line":22,"column":0},"end":{"line":31,"column":2}},"19":{"start":{"line":23,"column":4},"end":{"line":30,"column":7}},"20":{"start":{"line":32,"column":0},"end":{"line":41,"column":2}},"21":{"start":{"line":33,"column":4},"end":{"line":40,"column":7}},"22":{"start":{"line":42,"column":0},"end":{"line":53,"column":2}},"23":{"start":{"line":43,"column":4},"end":{"line":52,"column":22}},"24":{"start":{"line":54,"column":0},"end":{"line":65,"column":2}},"25":{"start":{"line":55,"column":4},"end":{"line":64,"column":22}},"26":{"start":{"line":66,"column":0},"end":{"line":70,"column":2}},"27":{"start":{"line":67,"column":4},"end":{"line":69,"column":7}},"28":{"start":{"line":71,"column":0},"end":{"line":76,"column":2}},"29":{"start":{"line":72,"column":4},"end":{"line":75,"column":7}},"30":{"start":{"line":77,"column":0},"end":{"line":82,"column":2}},"31":{"start":{"line":78,"column":4},"end":{"line":81,"column":7}},"32":{"start":{"line":83,"column":0},"end":{"line":88,"column":2}},"33":{"start":{"line":84,"column":4},"end":{"line":87,"column":7}},"34":{"start":{"line":89,"column":0},"end":{"line":94,"column":2}},"35":{"start":{"line":90,"column":4},"end":{"line":93,"column":7}},"36":{"start":{"line":95,"column":0},"end":{"line":101,"column":2}},"37":{"start":{"line":96,"column":4},"end":{"line":100,"column":7}},"38":{"start":{"line":102,"column":0},"end":{"line":107,"column":2}},"39":{"start":{"line":103,"column":4},"end":{"line":106,"column":7}},"40":{"start":{"line":108,"column":0},"end":{"line":114,"column":2}},"41":{"start":{"line":109,"column":4},"end":{"line":113,"column":7}},"42":{"start":{"line":115,"column":0},"end":{"line":120,"column":2}},"43":{"start":{"line":116,"column":4},"end":{"line":119,"column":7}},"44":{"start":{"line":121,"column":0},"end":{"line":127,"column":2}},"45":{"start":{"line":122,"column":4},"end":{"line":126,"column":7}},"46":{"start":{"line":128,"column":0},"end":{"line":133,"column":2}},"47":{"start":{"line":129,"column":4},"end":{"line":132,"column":7}},"48":{"start":{"line":134,"column":0},"end":{"line":139,"column":2}},"49":{"start":{"line":135,"column":4},"end":{"line":138,"column":7}},"50":{"start":{"line":140,"column":0},"end":{"line":147,"column":2}},"51":{"start":{"line":141,"column":4},"end":{"line":146,"column":7}},"52":{"start":{"line":148,"column":0},"end":{"line":154,"column":2}},"53":{"start":{"line":149,"column":4},"end":{"line":153,"column":7}},"54":{"start":{"line":155,"column":0},"end":{"line":164,"column":2}},"55":{"start":{"line":156,"column":4},"end":{"line":163,"column":7}},"56":{"start":{"line":165,"column":0},"end":{"line":172,"column":2}},"57":{"start":{"line":166,"column":4},"end":{"line":171,"column":7}},"58":{"start":{"line":173,"column":0},"end":{"line":180,"column":2}},"59":{"start":{"line":174,"column":4},"end":{"line":179,"column":7}},"60":{"start":{"line":181,"column":0},"end":{"line":188,"column":2}},"61":{"start":{"line":182,"column":4},"end":{"line":187,"column":7}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":21},"end":{"line":13,"column":22}},"loc":{"start":{"line":13,"column":28},"end":{"line":17,"column":1}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":25},"end":{"line":18,"column":26}},"loc":{"start":{"line":18,"column":31},"end":{"line":20,"column":1}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":21,"column":26},"end":{"line":21,"column":27}},"loc":{"start":{"line":21,"column":32},"end":{"line":21,"column":99}},"line":21},"4":{"name":"(anonymous_4)","decl":{"start":{"line":22,"column":30},"end":{"line":22,"column":31}},"loc":{"start":{"line":22,"column":37},"end":{"line":31,"column":1}},"line":22},"5":{"name":"(anonymous_5)","decl":{"start":{"line":32,"column":31},"end":{"line":32,"column":32}},"loc":{"start":{"line":32,"column":38},"end":{"line":41,"column":1}},"line":32},"6":{"name":"(anonymous_6)","decl":{"start":{"line":42,"column":34},"end":{"line":42,"column":35}},"loc":{"start":{"line":42,"column":41},"end":{"line":53,"column":1}},"line":42},"7":{"name":"(anonymous_7)","decl":{"start":{"line":54,"column":35},"end":{"line":54,"column":36}},"loc":{"start":{"line":54,"column":42},"end":{"line":65,"column":1}},"line":54},"8":{"name":"(anonymous_8)","decl":{"start":{"line":66,"column":29},"end":{"line":66,"column":30}},"loc":{"start":{"line":66,"column":36},"end":{"line":70,"column":1}},"line":66},"9":{"name":"(anonymous_9)","decl":{"start":{"line":71,"column":30},"end":{"line":71,"column":31}},"loc":{"start":{"line":71,"column":37},"end":{"line":76,"column":1}},"line":71},"10":{"name":"(anonymous_10)","decl":{"start":{"line":77,"column":38},"end":{"line":77,"column":39}},"loc":{"start":{"line":77,"column":45},"end":{"line":82,"column":1}},"line":77},"11":{"name":"(anonymous_11)","decl":{"start":{"line":83,"column":39},"end":{"line":83,"column":40}},"loc":{"start":{"line":83,"column":46},"end":{"line":88,"column":1}},"line":83},"12":{"name":"(anonymous_12)","decl":{"start":{"line":89,"column":32},"end":{"line":89,"column":33}},"loc":{"start":{"line":89,"column":39},"end":{"line":94,"column":1}},"line":89},"13":{"name":"(anonymous_13)","decl":{"start":{"line":95,"column":33},"end":{"line":95,"column":34}},"loc":{"start":{"line":95,"column":40},"end":{"line":101,"column":1}},"line":95},"14":{"name":"(anonymous_14)","decl":{"start":{"line":102,"column":36},"end":{"line":102,"column":37}},"loc":{"start":{"line":102,"column":43},"end":{"line":107,"column":1}},"line":102},"15":{"name":"(anonymous_15)","decl":{"start":{"line":108,"column":37},"end":{"line":108,"column":38}},"loc":{"start":{"line":108,"column":44},"end":{"line":114,"column":1}},"line":108},"16":{"name":"(anonymous_16)","decl":{"start":{"line":115,"column":40},"end":{"line":115,"column":41}},"loc":{"start":{"line":115,"column":47},"end":{"line":120,"column":1}},"line":115},"17":{"name":"(anonymous_17)","decl":{"start":{"line":121,"column":41},"end":{"line":121,"column":42}},"loc":{"start":{"line":121,"column":48},"end":{"line":127,"column":1}},"line":121},"18":{"name":"(anonymous_18)","decl":{"start":{"line":128,"column":48},"end":{"line":128,"column":49}},"loc":{"start":{"line":128,"column":55},"end":{"line":133,"column":1}},"line":128},"19":{"name":"(anonymous_19)","decl":{"start":{"line":134,"column":49},"end":{"line":134,"column":50}},"loc":{"start":{"line":134,"column":56},"end":{"line":139,"column":1}},"line":134},"20":{"name":"(anonymous_20)","decl":{"start":{"line":140,"column":47},"end":{"line":140,"column":48}},"loc":{"start":{"line":140,"column":54},"end":{"line":147,"column":1}},"line":140},"21":{"name":"(anonymous_21)","decl":{"start":{"line":148,"column":48},"end":{"line":148,"column":49}},"loc":{"start":{"line":148,"column":55},"end":{"line":154,"column":1}},"line":148},"22":{"name":"(anonymous_22)","decl":{"start":{"line":155,"column":49},"end":{"line":155,"column":50}},"loc":{"start":{"line":155,"column":56},"end":{"line":164,"column":1}},"line":155},"23":{"name":"(anonymous_23)","decl":{"start":{"line":165,"column":50},"end":{"line":165,"column":51}},"loc":{"start":{"line":165,"column":57},"end":{"line":172,"column":1}},"line":165},"24":{"name":"(anonymous_24)","decl":{"start":{"line":173,"column":40},"end":{"line":173,"column":41}},"loc":{"start":{"line":173,"column":47},"end":{"line":180,"column":1}},"line":173},"25":{"name":"(anonymous_25)","decl":{"start":{"line":181,"column":41},"end":{"line":181,"column":42}},"loc":{"start":{"line":181,"column":48},"end":{"line":188,"column":1}},"line":181}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":14,"column":4},"end":{"line":15,"column":21}},"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":15,"column":21}},{"start":{"line":14,"column":4},"end":{"line":15,"column":21}}],"line":14},"4":{"loc":{"start":{"line":43,"column":11},"end":{"line":52,"column":21}},"type":"cond-expr","locations":[{"start":{"line":52,"column":9},"end":{"line":52,"column":13}},{"start":{"line":52,"column":16},"end":{"line":52,"column":21}}],"line":43},"5":{"loc":{"start":{"line":55,"column":11},"end":{"line":64,"column":21}},"type":"cond-expr","locations":[{"start":{"line":64,"column":9},"end":{"line":64,"column":13}},{"start":{"line":64,"column":16},"end":{"line":64,"column":21}}],"line":55}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":1,"15":0,"16":1,"17":0,"18":1,"19":0,"20":1,"21":0,"22":1,"23":0,"24":1,"25":0,"26":1,"27":0,"28":1,"29":0,"30":1,"31":0,"32":1,"33":0,"34":1,"35":0,"36":1,"37":0,"38":1,"39":0,"40":1,"41":0,"42":1,"43":0,"44":1,"45":0,"46":1,"47":0,"48":1,"49":0,"50":1,"51":0,"52":1,"53":0,"54":1,"55":0,"56":1,"57":0,"58":1,"59":0,"60":1,"61":0},"f":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/NodeToNodeRequest.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/interfaces/NodeToNodeRequest.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert'\nimport { randomAlphaString } from \"../common/util\"\nimport { protocolVersion } from \"../protocolVersion\"\nimport { ApiProbeResponse, isApiProbeResponse } from '../services/PublicApiServer'\nimport { ChannelInfo, ChannelName, ChannelNodeInfo, ErrorMessage, FeedId, FileKey, isArrayOf, isBigInt, isBoolean, isChannelInfo, isChannelName, isChannelNodeInfo, isEqualTo, isErrorMessage, isFeedId, isFileKey, isLiveFeedSubscriptions, isNodeId, isNull, isNumber, isOneOf, isRequestId, isSignedSubfeedMessage, isString, isSubfeedHash, isSubmittedSubfeedMessage, isTimestamp, LiveFeedSubscriptions, NodeId, optional, ProtocolVersion, RequestId, Signature, SignedSubfeedMessage, SubfeedHash, SubmittedSubfeedMessage, Timestamp, _validateObject } from \"./core\"\n\nexport const _tests: {[key: string]: () => void} = {}\n\n// StreamId\nexport interface StreamId extends String {\n    __streamId__: never // phantom type\n}\nexport const isStreamId = (x: any): x is StreamId => {\n    if (!isString(x)) return false;\n    return (/^[A-Za-z]{10}$/.test(x))\n}\nexport const createStreamId = () => {\n    return randomAlphaString(10) as any as StreamId\n}\n_tests.StreamId = () => { assert(isStreamId(createStreamId())) }\n\n\nexport interface NodeToNodeRequest {\n    body: {\n        protocolVersion: ProtocolVersion,\n        requestId: RequestId,\n        fromNodeId: NodeId,\n        toNodeId: NodeId,\n        timestamp: Timestamp,\n        requestData: NodeToNodeRequestData,\n    },\n    signature: Signature\n}\nexport const isNodeToNodeRequest = (x: any): x is NodeToNodeRequest => {\n    return _validateObject(x, {\n        protocolVersion: isEqualTo(protocolVersion()),\n        requestId: isRequestId,\n        fromNodeId: isNodeId,\n        toNodeId: isNodeId,\n        timestamp: isTimestamp,\n        requestData: isNodeToNodeRequestData\n    })\n}\nexport interface NodeToNodeResponse {\n    body: {\n        protocolVersion: ProtocolVersion,\n        requestId: RequestId,\n        fromNodeId: NodeId,\n        toNodeId: NodeId,\n        timestamp: Timestamp,\n        responseData: NodeToNodeResponseData\n    },\n    signature: Signature\n}\nexport const isNodeToNodeResponse = (x: any): x is NodeToNodeResponse => {\n    return _validateObject(x, {\n        protocolVersion: isEqualTo(protocolVersion()),\n        requestId: isRequestId,\n        fromNodeId: isNodeId,\n        toNodeId: isNodeId,\n        timestamp: isTimestamp,\n        responseData: isNodeToNodeResponseData\n    })\n}\n\nexport type NodeToNodeRequestData = (\n    ProbeRequestData |\n    GetChannelInfoRequestData |\n    AnnounceRequestData |\n    CheckForFileRequestData |\n    CheckForLiveFeedRequestData |\n    SetLiveFeedSubscriptionsRequestData |\n    SubmitMessageToLiveFeedRequestData |\n    GetLiveFeedSignedMessagesRequestData |\n    DownloadFileDataRequestData\n)\nexport const isNodeToNodeRequestData = (x: any): x is NodeToNodeRequestData => {\n    return isOneOf([\n        isGetChannelInfoRequestData,\n        isAnnounceRequestData,\n        isCheckForFileRequestData,\n        isCheckForLiveFeedRequestData,\n        isSetLiveFeedSubscriptionsRequestData,\n        isSubmitMessageToLiveFeedRequestData,\n        isGetLiveFeedSignedMessagesRequestData,\n        isDownloadFileDataRequestData\n    ]) ? true : false;\n}\nexport type NodeToNodeResponseData = (\n    ProbeResponseData |\n    GetChannelInfoResponseData |\n    AnnounceResponseData |\n    CheckForFileResponseData |\n    CheckForLiveFeedResponseData |\n    SetLiveFeedSubscriptionsResponseData |\n    SubmitMessageToLiveFeedResponseData |\n    GetLiveFeedSignedMessagesResponseData |\n    DownloadFileDataResponseData\n)\nexport const isNodeToNodeResponseData = (x: any): x is NodeToNodeResponseData => {\n    return isOneOf([\n        isGetChannelInfoResponseData,\n        isAnnounceResponseData,\n        isCheckForFileResponseData,\n        isCheckForLiveFeedResponseData,\n        isSetLiveFeedSubscriptionsResponseData,\n        isSubmitMessageToLiveFeedResponseData,\n        isGetLiveFeedSignedMessagesResponseData,\n        isDownloadFileDataResponseData\n    ]) ? true : false;\n}\n\n// probe\nexport interface ProbeRequestData {\n    requestType: 'probe'\n}\nexport const isProbeRequestData = (x: any): x is ProbeRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('probe')\n    })\n}\nexport interface ProbeResponseData {\n    requestType: 'probe',\n    probeResponse: ApiProbeResponse\n}\nexport const isProbeResponseData = (x: any): x is ProbeResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('probe'),\n        probeResponse: isApiProbeResponse\n    })\n}\n\n// getChannelInfo\nexport interface GetChannelInfoRequestData {\n    requestType: 'getChannelInfo',\n    channelName: ChannelName\n}\nexport const isGetChannelInfoRequestData = (x: any): x is GetChannelInfoRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('getChannelInfo'),\n        channelName: isChannelName\n    })\n}\nexport interface GetChannelInfoResponseData {\n    requestType: 'getChannelInfo',\n    channelInfo: ChannelInfo\n}\nexport const isGetChannelInfoResponseData = (x: any): x is GetChannelInfoResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('getChannelInfo'),\n        channelInfo: isChannelInfo\n    })\n}\n\n// announce\nexport interface AnnounceRequestData {\n    requestType: 'announce',\n    channelNodeInfo: ChannelNodeInfo\n}\nexport const isAnnounceRequestData = (x: any): x is AnnounceRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('announce'),\n        channelNodeInfo: isChannelNodeInfo\n    })\n}\nexport interface AnnounceResponseData {\n    requestType: 'announce',\n    success: boolean,\n    errorMessage: ErrorMessage | null\n}\nexport const isAnnounceResponseData = (x: any): x is AnnounceResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('announce'),\n        success: isBoolean,\n        errorMessage: isErrorMessage\n    })\n}\n\n// checkForFile\nexport interface CheckForFileRequestData {\n    requestType: 'checkForFile',\n    fileKey: FileKey\n}\nexport const isCheckForFileRequestData = (x: any): x is CheckForFileRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('checkForFile'),\n        fileKey: isFileKey\n    })\n}\nexport interface CheckForFileResponseData {\n    requestType: 'checkForFile',\n    found: boolean,\n    size: bigint | null\n}\nexport const isCheckForFileResponseData = (x: any): x is CheckForFileResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('checkForFile'),\n        found: isBoolean,\n        size: isOneOf([isNull, isBigInt])\n    })\n}\n\n// checkForLiveFeed\nexport interface CheckForLiveFeedRequestData {\n    requestType: 'checkForLiveFeed',\n    feedId: FeedId\n}\nexport const isCheckForLiveFeedRequestData = (x: any): x is CheckForLiveFeedRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('checkForLiveFeed'),\n        feedId: isFeedId\n    })\n}\nexport interface CheckForLiveFeedResponseData {\n    requestType: 'checkForLiveFeed',\n    found: boolean\n}\nexport const isCheckForLiveFeedResponseData = (x: any): x is CheckForLiveFeedResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('checkForLiveFeed'),\n        found: isBoolean,\n        numMessages: optional(isNumber)\n    })\n}\n\n// setLiveFeedSubscriptions\nexport interface SetLiveFeedSubscriptionsRequestData {\n    requestType: 'setLiveFeedSubscriptions',\n    liveFeedSubscriptions: LiveFeedSubscriptions\n}\nexport const isSetLiveFeedSubscriptionsRequestData = (x: any): x is SetLiveFeedSubscriptionsRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('setLiveFeedSubscriptions'),\n        liveFeedSubscriptions: isLiveFeedSubscriptions\n    })\n}\nexport interface SetLiveFeedSubscriptionsResponseData {\n    requestType: 'setLiveFeedSubscriptions',\n    success: boolean\n}\nexport const isSetLiveFeedSubscriptionsResponseData = (x: any): x is SetLiveFeedSubscriptionsResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('setLiveFeedSubscriptions'),\n        success: isBoolean\n    })\n}\n\n// submitMessageToLiveFeed\nexport interface SubmitMessageToLiveFeedRequestData {\n    requestType: 'submitMessageToLiveFeed',\n    feedId: FeedId,\n    subfeedHash: SubfeedHash,\n    message: SubmittedSubfeedMessage\n}\nexport const isSubmitMessageToLiveFeedRequestData = (x: any): x is SubmitMessageToLiveFeedRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('submitMessageToLiveFeed'),\n        feedId: isFeedId,\n        subfeedHash: isSubfeedHash,\n        message: isSubmittedSubfeedMessage\n    })\n}\nexport interface SubmitMessageToLiveFeedResponseData {\n    requestType: 'submitMessageToLiveFeed',\n    success: boolean,\n    errorMessage: ErrorMessage | null\n}\nexport const isSubmitMessageToLiveFeedResponseData = (x: any): x is SubmitMessageToLiveFeedResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('submitMessageToLiveFeed'),\n        success: isBoolean,\n        errorMessage: isOneOf([isNull, isErrorMessage])\n    })\n}\n\n// getLiveFeedSignedMessages\nexport interface GetLiveFeedSignedMessagesRequestData {\n    requestType: 'getLiveFeedSignedMessages',\n    feedId: FeedId,\n    subfeedHash: SubfeedHash,\n    position: number,\n    maxNumMessages: number,\n    waitMsec: number\n}\nexport const isGetLiveFeedSignedMessagesRequestData = (x: any): x is GetLiveFeedSignedMessagesRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('getLiveFeedSignedMessages'),\n        feedId: isFeedId,\n        subfeedHash: isSubfeedHash,\n        position: isNumber,\n        maxNumMessages: isNumber,\n        waitMsec: isNumber\n    })\n}\nexport interface GetLiveFeedSignedMessagesResponseData {\n    requestType: 'getLiveFeedSignedMessages',\n    success: boolean,\n    signedMessages: SignedSubfeedMessage[] | null,\n    errorMessage: ErrorMessage | null\n}\nexport const isGetLiveFeedSignedMessagesResponseData = (x: any): x is GetLiveFeedSignedMessagesResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('getLiveFeedSignedMessages'),\n        success: isBoolean,\n        signedMessages: isArrayOf(isSignedSubfeedMessage),\n        errorMessage: isOneOf([isNull, isErrorMessage])\n    })\n}\n\n// downloadFileData\nexport interface DownloadFileDataRequestData {\n    requestType: 'downloadFileData',\n    fileKey: FileKey,\n    startByte: bigint,\n    endByte: bigint\n}\nexport const isDownloadFileDataRequestData = (x: any): x is DownloadFileDataRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('downloadFileData'),\n        fileKey: isFileKey,\n        startByte: isBigInt,\n        endByte: isBigInt\n    })\n}\nexport interface DownloadFileDataResponseData {\n    requestType: 'downloadFileData',\n    success: boolean,\n    streamId: StreamId | null,\n    errorMessage: ErrorMessage | null\n}\nexport const isDownloadFileDataResponseData = (x: any): x is DownloadFileDataResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('downloadFileData'),\n        success: isBoolean,\n        streamId: isOneOf([isNull, isStreamId]),\n        errorMessage: isOneOf([isNull, isErrorMessage])\n    })\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dccd552a9f8fa8c42450b4e406c48c26177d8beb","contentHash":"73eee3b1d605f1962104a8d98dc280d8e24a5e008f59c1f0f4c7ff2969fdd27e"},"/home/jsoules/src/kachery-p2p/daemon/src/protocolVersion.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/protocolVersion.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":57}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":23},"end":{"line":5,"column":42}},"4":{"start":{"line":6,"column":0},"end":{"line":8,"column":2}},"5":{"start":{"line":7,"column":4},"end":{"line":7,"column":28}},"6":{"start":{"line":9,"column":0},"end":{"line":11,"column":2}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":26},"end":{"line":6,"column":27}},"loc":{"start":{"line":6,"column":32},"end":{"line":8,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":24},"end":{"line":9,"column":25}},"loc":{"start":{"line":9,"column":30},"end":{"line":11,"column":1}},"line":9}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0},"f":{"0":0,"1":0},"b":{},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/protocolVersion.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/protocolVersion.ts"],"names":[],"mappings":";;;AAEA,MAAM,gBAAgB,GAAG,mBAAmB,CAAC;AAC7C,MAAM,cAAc,GAAG,mBAAmB,CAAC;AAE9B,QAAA,eAAe,GAAG,GAAoB,EAAE;IACjD,OAAO,gBAA0C,CAAC;AACtD,CAAC,CAAA;AAEY,QAAA,aAAa,GAAG,GAAkB,EAAE;IAC7C,OAAO,cAAsC,CAAC;AAClD,CAAC,CAAA","sourcesContent":["import { DaemonVersion, ProtocolVersion } from './interfaces/core';\n\nconst PROTOCOL_VERSION = 'kachery-p2p-0.5.0';\nconst DAEMON_VERSION = 'kachery-p2p-0.5.0';\n\nexport const protocolVersion = (): ProtocolVersion => {\n    return PROTOCOL_VERSION as any as ProtocolVersion;\n}\n\nexport const daemonVersion = (): DaemonVersion => {\n    return DAEMON_VERSION as any as DaemonVersion;\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4135c62b79a82806a118b219f2ba4dd86871d249","contentHash":"470b6b35cdcd436a55d9e45bff5c56b16ed562832cc9e123dab21b312f65e2e3"},"/home/jsoules/src/kachery-p2p/daemon/src/services/PublicApiServer.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/services/PublicApiServer.ts","statementMap":{"0":{"start":{"line":2,"column":29},"end":{"line":8,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":5,"column":5}},"2":{"start":{"line":4,"column":8},"end":{"line":4,"column":78}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":36}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"5":{"start":{"line":9,"column":29},"end":{"line":14,"column":1}},"6":{"start":{"line":10,"column":4},"end":{"line":12,"column":5}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":78}},"8":{"start":{"line":13,"column":4},"end":{"line":13,"column":36}},"9":{"start":{"line":15,"column":22},"end":{"line":17,"column":1}},"10":{"start":{"line":16,"column":4},"end":{"line":16,"column":62}},"11":{"start":{"line":19,"column":0},"end":{"line":19,"column":62}},"12":{"start":{"line":20,"column":0},"end":{"line":20,"column":36}},"13":{"start":{"line":21,"column":18},"end":{"line":21,"column":53}},"14":{"start":{"line":22,"column":17},"end":{"line":22,"column":44}},"15":{"start":{"line":23,"column":28},"end":{"line":23,"column":83}},"16":{"start":{"line":24,"column":15},"end":{"line":24,"column":40}},"17":{"start":{"line":25,"column":15},"end":{"line":25,"column":44}},"18":{"start":{"line":26,"column":28},"end":{"line":26,"column":70}},"19":{"start":{"line":27,"column":26},"end":{"line":27,"column":55}},"20":{"start":{"line":29,"column":0},"end":{"line":39,"column":2}},"21":{"start":{"line":30,"column":4},"end":{"line":38,"column":7}},"22":{"start":{"line":43,"column":8},"end":{"line":43,"column":32}},"23":{"start":{"line":44,"column":8},"end":{"line":44,"column":35}},"24":{"start":{"line":45,"column":8},"end":{"line":45,"column":44}},"25":{"start":{"line":46,"column":8},"end":{"line":46,"column":31}},"26":{"start":{"line":47,"column":8},"end":{"line":47,"column":50}},"27":{"start":{"line":48,"column":8},"end":{"line":49,"column":38}},"28":{"start":{"line":50,"column":8},"end":{"line":50,"column":64}},"29":{"start":{"line":51,"column":8},"end":{"line":51,"column":65}},"30":{"start":{"line":53,"column":8},"end":{"line":53,"column":73}},"31":{"start":{"line":54,"column":8},"end":{"line":56,"column":11}},"32":{"start":{"line":55,"column":12},"end":{"line":55,"column":19}},"33":{"start":{"line":58,"column":8},"end":{"line":66,"column":11}},"34":{"start":{"line":60,"column":12},"end":{"line":64,"column":15}},"35":{"start":{"line":61,"column":16},"end":{"line":61,"column":47}},"36":{"start":{"line":63,"column":16},"end":{"line":63,"column":70}},"37":{"start":{"line":67,"column":8},"end":{"line":75,"column":11}},"38":{"start":{"line":69,"column":12},"end":{"line":73,"column":15}},"39":{"start":{"line":70,"column":16},"end":{"line":70,"column":47}},"40":{"start":{"line":72,"column":16},"end":{"line":72,"column":70}},"41":{"start":{"line":77,"column":8},"end":{"line":95,"column":11}},"42":{"start":{"line":78,"column":28},"end":{"line":78,"column":36}},"43":{"start":{"line":79,"column":12},"end":{"line":82,"column":13}},"44":{"start":{"line":80,"column":16},"end":{"line":80,"column":89}},"45":{"start":{"line":81,"column":16},"end":{"line":81,"column":23}},"46":{"start":{"line":83,"column":12},"end":{"line":83,"column":36}},"47":{"start":{"line":85,"column":12},"end":{"line":93,"column":15}},"48":{"start":{"line":90,"column":16},"end":{"line":90,"column":63}},"49":{"start":{"line":92,"column":16},"end":{"line":92,"column":70}},"50":{"start":{"line":97,"column":8},"end":{"line":118,"column":11}},"51":{"start":{"line":98,"column":29},"end":{"line":98,"column":48}},"52":{"start":{"line":99,"column":27},"end":{"line":99,"column":44}},"53":{"start":{"line":101,"column":12},"end":{"line":115,"column":15}},"54":{"start":{"line":106,"column":16},"end":{"line":108,"column":17}},"55":{"start":{"line":107,"column":20},"end":{"line":107,"column":53}},"56":{"start":{"line":109,"column":16},"end":{"line":111,"column":17}},"57":{"start":{"line":110,"column":20},"end":{"line":110,"column":51}},"58":{"start":{"line":112,"column":16},"end":{"line":112,"column":62}},"59":{"start":{"line":114,"column":16},"end":{"line":114,"column":70}},"60":{"start":{"line":117,"column":12},"end":{"line":117,"column":32}},"61":{"start":{"line":122,"column":25},"end":{"line":130,"column":9}},"62":{"start":{"line":131,"column":8},"end":{"line":132,"column":70}},"63":{"start":{"line":132,"column":12},"end":{"line":132,"column":70}},"64":{"start":{"line":133,"column":8},"end":{"line":133,"column":27}},"65":{"start":{"line":137,"column":25},"end":{"line":137,"column":99}},"66":{"start":{"line":138,"column":8},"end":{"line":139,"column":70}},"67":{"start":{"line":139,"column":12},"end":{"line":139,"column":70}},"68":{"start":{"line":140,"column":8},"end":{"line":140,"column":27}},"69":{"start":{"line":144,"column":67},"end":{"line":144,"column":135}},"70":{"start":{"line":145,"column":22},"end":{"line":145,"column":27}},"71":{"start":{"line":146,"column":8},"end":{"line":152,"column":11}},"72":{"start":{"line":147,"column":12},"end":{"line":147,"column":27}},"73":{"start":{"line":148,"column":12},"end":{"line":151,"column":15}},"74":{"start":{"line":153,"column":8},"end":{"line":155,"column":11}},"75":{"start":{"line":154,"column":12},"end":{"line":154,"column":27}},"76":{"start":{"line":156,"column":8},"end":{"line":158,"column":11}},"77":{"start":{"line":157,"column":12},"end":{"line":157,"column":22}},"78":{"start":{"line":159,"column":8},"end":{"line":168,"column":11}},"79":{"start":{"line":160,"column":12},"end":{"line":167,"column":13}},"80":{"start":{"line":161,"column":16},"end":{"line":161,"column":34}},"81":{"start":{"line":162,"column":16},"end":{"line":162,"column":61}},"82":{"start":{"line":163,"column":16},"end":{"line":163,"column":26}},"83":{"start":{"line":166,"column":16},"end":{"line":166,"column":50}},"84":{"start":{"line":169,"column":8},"end":{"line":171,"column":11}},"85":{"start":{"line":170,"column":12},"end":{"line":170,"column":21}},"86":{"start":{"line":175,"column":8},"end":{"line":175,"column":70}},"87":{"start":{"line":176,"column":8},"end":{"line":181,"column":9}},"88":{"start":{"line":177,"column":12},"end":{"line":177,"column":47}},"89":{"start":{"line":180,"column":12},"end":{"line":180,"column":74}},"90":{"start":{"line":182,"column":8},"end":{"line":182,"column":36}},"91":{"start":{"line":183,"column":8},"end":{"line":188,"column":9}},"92":{"start":{"line":184,"column":12},"end":{"line":184,"column":37}},"93":{"start":{"line":187,"column":12},"end":{"line":187,"column":82}},"94":{"start":{"line":192,"column":24},"end":{"line":196,"column":9}},"95":{"start":{"line":194,"column":16},"end":{"line":194,"column":73}},"96":{"start":{"line":197,"column":8},"end":{"line":197,"column":87}},"97":{"start":{"line":200,"column":0},"end":{"line":200,"column":34}},"98":{"start":{"line":201,"column":0},"end":{"line":201,"column":105}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":70},"end":{"line":2,"column":71}},"loc":{"start":{"line":2,"column":109},"end":{"line":8,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":70},"end":{"line":9,"column":71}},"loc":{"start":{"line":9,"column":102},"end":{"line":14,"column":1}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":15,"column":56},"end":{"line":15,"column":57}},"loc":{"start":{"line":15,"column":71},"end":{"line":17,"column":1}},"line":15},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":29},"end":{"line":29,"column":30}},"loc":{"start":{"line":29,"column":36},"end":{"line":39,"column":1}},"line":29},"4":{"name":"(anonymous_4)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":45},"end":{"line":119,"column":5}},"line":42},"5":{"name":"(anonymous_5)","decl":{"start":{"line":54,"column":53},"end":{"line":54,"column":54}},"loc":{"start":{"line":54,"column":73},"end":{"line":56,"column":9}},"line":54},"6":{"name":"(anonymous_6)","decl":{"start":{"line":58,"column":57},"end":{"line":58,"column":58}},"loc":{"start":{"line":58,"column":77},"end":{"line":66,"column":9}},"line":58},"7":{"name":"(anonymous_7)","decl":{"start":{"line":60,"column":71},"end":{"line":60,"column":72}},"loc":{"start":{"line":60,"column":83},"end":{"line":62,"column":13}},"line":60},"8":{"name":"(anonymous_8)","decl":{"start":{"line":62,"column":15},"end":{"line":62,"column":16}},"loc":{"start":{"line":62,"column":30},"end":{"line":64,"column":13}},"line":62},"9":{"name":"(anonymous_9)","decl":{"start":{"line":67,"column":58},"end":{"line":67,"column":59}},"loc":{"start":{"line":67,"column":78},"end":{"line":75,"column":9}},"line":67},"10":{"name":"(anonymous_10)","decl":{"start":{"line":69,"column":71},"end":{"line":69,"column":72}},"loc":{"start":{"line":69,"column":83},"end":{"line":71,"column":13}},"line":69},"11":{"name":"(anonymous_11)","decl":{"start":{"line":71,"column":15},"end":{"line":71,"column":16}},"loc":{"start":{"line":71,"column":30},"end":{"line":73,"column":13}},"line":71},"12":{"name":"(anonymous_12)","decl":{"start":{"line":77,"column":70},"end":{"line":77,"column":71}},"loc":{"start":{"line":77,"column":90},"end":{"line":95,"column":9}},"line":77},"13":{"name":"(anonymous_13)","decl":{"start":{"line":89,"column":15},"end":{"line":89,"column":16}},"loc":{"start":{"line":89,"column":27},"end":{"line":91,"column":13}},"line":89},"14":{"name":"(anonymous_14)","decl":{"start":{"line":91,"column":15},"end":{"line":91,"column":16}},"loc":{"start":{"line":91,"column":30},"end":{"line":93,"column":13}},"line":91},"15":{"name":"(anonymous_15)","decl":{"start":{"line":97,"column":78},"end":{"line":97,"column":79}},"loc":{"start":{"line":97,"column":98},"end":{"line":118,"column":9}},"line":97},"16":{"name":"(anonymous_16)","decl":{"start":{"line":105,"column":15},"end":{"line":105,"column":16}},"loc":{"start":{"line":105,"column":27},"end":{"line":113,"column":13}},"line":105},"17":{"name":"(anonymous_17)","decl":{"start":{"line":113,"column":15},"end":{"line":113,"column":16}},"loc":{"start":{"line":113,"column":30},"end":{"line":115,"column":13}},"line":113},"18":{"name":"(anonymous_18)","decl":{"start":{"line":121,"column":4},"end":{"line":121,"column":5}},"loc":{"start":{"line":121,"column":30},"end":{"line":134,"column":5}},"line":121},"19":{"name":"(anonymous_19)","decl":{"start":{"line":136,"column":4},"end":{"line":136,"column":5}},"loc":{"start":{"line":136,"column":46},"end":{"line":141,"column":5}},"line":136},"20":{"name":"(anonymous_20)","decl":{"start":{"line":143,"column":4},"end":{"line":143,"column":5}},"loc":{"start":{"line":143,"column":45},"end":{"line":172,"column":5}},"line":143},"21":{"name":"(anonymous_21)","decl":{"start":{"line":146,"column":18},"end":{"line":146,"column":19}},"loc":{"start":{"line":146,"column":28},"end":{"line":152,"column":9}},"line":146},"22":{"name":"(anonymous_22)","decl":{"start":{"line":153,"column":15},"end":{"line":153,"column":16}},"loc":{"start":{"line":153,"column":25},"end":{"line":155,"column":9}},"line":153},"23":{"name":"(anonymous_23)","decl":{"start":{"line":156,"column":19},"end":{"line":156,"column":20}},"loc":{"start":{"line":156,"column":25},"end":{"line":158,"column":9}},"line":156},"24":{"name":"(anonymous_24)","decl":{"start":{"line":159,"column":16},"end":{"line":159,"column":17}},"loc":{"start":{"line":159,"column":25},"end":{"line":168,"column":9}},"line":159},"25":{"name":"(anonymous_25)","decl":{"start":{"line":169,"column":24},"end":{"line":169,"column":25}},"loc":{"start":{"line":169,"column":30},"end":{"line":171,"column":9}},"line":169},"26":{"name":"(anonymous_26)","decl":{"start":{"line":174,"column":4},"end":{"line":174,"column":5}},"loc":{"start":{"line":174,"column":54},"end":{"line":189,"column":5}},"line":174},"27":{"name":"(anonymous_27)","decl":{"start":{"line":191,"column":4},"end":{"line":191,"column":5}},"loc":{"start":{"line":191,"column":23},"end":{"line":198,"column":5}},"line":191},"28":{"name":"(anonymous_28)","decl":{"start":{"line":193,"column":20},"end":{"line":193,"column":21}},"loc":{"start":{"line":193,"column":28},"end":{"line":195,"column":13}},"line":193}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":29},"end":{"line":8,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":30},"end":{"line":2,"column":34}},{"start":{"line":2,"column":38},"end":{"line":2,"column":65}},{"start":{"line":2,"column":70},"end":{"line":8,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":4},"end":{"line":5,"column":5}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":5,"column":5}},{"start":{"line":3,"column":4},"end":{"line":5,"column":5}}],"line":3},"2":{"loc":{"start":{"line":9,"column":29},"end":{"line":14,"column":1}},"type":"binary-expr","locations":[{"start":{"line":9,"column":30},"end":{"line":9,"column":34}},{"start":{"line":9,"column":38},"end":{"line":9,"column":65}},{"start":{"line":9,"column":70},"end":{"line":14,"column":1}}],"line":9},"3":{"loc":{"start":{"line":10,"column":4},"end":{"line":12,"column":5}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":12,"column":5}},{"start":{"line":10,"column":4},"end":{"line":12,"column":5}}],"line":10},"4":{"loc":{"start":{"line":15,"column":22},"end":{"line":17,"column":1}},"type":"binary-expr","locations":[{"start":{"line":15,"column":23},"end":{"line":15,"column":27}},{"start":{"line":15,"column":31},"end":{"line":15,"column":51}},{"start":{"line":15,"column":56},"end":{"line":17,"column":1}}],"line":15},"5":{"loc":{"start":{"line":16,"column":11},"end":{"line":16,"column":61}},"type":"cond-expr","locations":[{"start":{"line":16,"column":37},"end":{"line":16,"column":40}},{"start":{"line":16,"column":43},"end":{"line":16,"column":61}}],"line":16},"6":{"loc":{"start":{"line":16,"column":12},"end":{"line":16,"column":33}},"type":"binary-expr","locations":[{"start":{"line":16,"column":12},"end":{"line":16,"column":15}},{"start":{"line":16,"column":19},"end":{"line":16,"column":33}}],"line":16},"7":{"loc":{"start":{"line":42,"column":22},"end":{"line":42,"column":43}},"type":"default-arg","locations":[{"start":{"line":42,"column":29},"end":{"line":42,"column":43}}],"line":42},"8":{"loc":{"start":{"line":79,"column":12},"end":{"line":82,"column":13}},"type":"if","locations":[{"start":{"line":79,"column":12},"end":{"line":82,"column":13}},{"start":{"line":79,"column":12},"end":{"line":82,"column":13}}],"line":79},"9":{"loc":{"start":{"line":106,"column":16},"end":{"line":108,"column":17}},"type":"if","locations":[{"start":{"line":106,"column":16},"end":{"line":108,"column":17}},{"start":{"line":106,"column":16},"end":{"line":108,"column":17}}],"line":106},"10":{"loc":{"start":{"line":109,"column":16},"end":{"line":111,"column":17}},"type":"if","locations":[{"start":{"line":109,"column":16},"end":{"line":111,"column":17}},{"start":{"line":109,"column":16},"end":{"line":111,"column":17}}],"line":109},"11":{"loc":{"start":{"line":131,"column":8},"end":{"line":132,"column":70}},"type":"if","locations":[{"start":{"line":131,"column":8},"end":{"line":132,"column":70}},{"start":{"line":131,"column":8},"end":{"line":132,"column":70}}],"line":131},"12":{"loc":{"start":{"line":138,"column":8},"end":{"line":139,"column":70}},"type":"if","locations":[{"start":{"line":138,"column":8},"end":{"line":139,"column":70}},{"start":{"line":138,"column":8},"end":{"line":139,"column":70}}],"line":138},"13":{"loc":{"start":{"line":160,"column":12},"end":{"line":167,"column":13}},"type":"if","locations":[{"start":{"line":160,"column":12},"end":{"line":167,"column":13}},{"start":{"line":160,"column":12},"end":{"line":167,"column":13}}],"line":160}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":1,"10":2,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":1,"98":1},"f":{"0":0,"1":0,"2":2,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},"b":{"0":[1,1,1],"1":[0,0],"2":[1,1,1],"3":[0,0],"4":[1,1,1],"5":[1,1],"6":[2,2],"7":[0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/services/PublicApiServer.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/services/PublicApiServer.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Express } from 'express';\nimport { Socket } from 'net';\nimport { action } from '../common/action';\nimport start_http_server from '../common/start_http_server';\nimport { sleepMsec } from '../common/util';\nimport { Address, DaemonVersion, isAddress, isBoolean, isDaemonVersion, isJSONObject, isNodeId, isNull, isOneOf, isProtocolVersion, JSONObject, NodeId, Port, ProtocolVersion, _validateObject } from '../interfaces/core';\nimport { isNodeToNodeRequest, isStreamId, NodeToNodeRequest, NodeToNodeResponse, StreamId } from '../interfaces/NodeToNodeRequest';\nimport KacheryP2PNode from '../KacheryP2PNode';\nimport { daemonVersion, protocolVersion } from '../protocolVersion';\nimport { ByteCount } from '../udp/UdpCongestionManager';\n\ninterface Req {\n    body: any,\n    on: (eventName: string, callback: () => void) => void,\n    connection: Socket\n}\n\ninterface Res {\n    json: (obj: JSONObject) => void,\n    end: () => void,\n    status: (s: number) => Res,\n    send: (x: any) => Res,\n    writeHead: Function\n}\n\nexport interface ApiProbeResponse {\n    success: boolean,\n    protocolVersion: ProtocolVersion,\n    daemonVersion: DaemonVersion,\n    nodeId: NodeId,\n    isBootstrapNode: boolean,\n    webSocketAddress: Address | null,\n    publicUdpSocketAddress: Address | null\n};\nexport const isApiProbeResponse = (x: any): x is ApiProbeResponse => {\n    return _validateObject(x, {\n        success: isBoolean,\n        protocolVersion: isProtocolVersion,\n        daemonVersion: isDaemonVersion,\n        nodeId: isNodeId,\n        isBootstrapNode: isBoolean,\n        webSocketAddress: isOneOf([isNull, isAddress]),\n        publicUdpSocketAddress: isOneOf([isNull, isAddress])\n    });\n}\n\nexport default class PublicApiServer {\n    #node: KacheryP2PNode\n    #verbose: number\n    #stopperCallbacks: (() => void)[]\n    #app: Express\n    // This is the public API server for communication between nodes\n    constructor(node: KacheryP2PNode, opts: {verbose: number}={verbose: 0}) {\n        this.#node = node; // The kachery-p2p daemon\n        this.#verbose = opts.verbose\n        this.#app = express(); // the express app\n\n        this.#app.set('json spaces', 4); // when we respond with json, this is how it will be formatted\n        // this.#app.use(cors()); // in the future, if we want to do this\n        this.#app.use(express.json());\n\n        this.#app.all('/*', (req, res, next) => {\n            next();\n        });\n\n        // /probe - check whether the daemon is up and running and return info such as the node ID\n        this.#app.get('/probe', async (req, res) => {\n            /////////////////////////////////////////////////////////////////////////\n            await action('/probe', {context: 'Public API'}, async () => {\n                await this._apiProbe(req, res) \n            }, async (err: Error) => {\n                await this._errorResponse(req, res, 500, err.message);\n            });\n            /////////////////////////////////////////////////////////////////////////\n        });\n        this.#app.post('/probe', async (req, res) => {\n            /////////////////////////////////////////////////////////////////////////\n            await action('/probe', {context: 'Public API'}, async () => {\n                await this._apiProbe(req, res) \n            }, async (err: Error) => {\n                await this._errorResponse(req, res, 500, err.message);\n            });\n            /////////////////////////////////////////////////////////////////////////\n        });\n        // /nodeToNodeRequest\n        this.#app.post('/nodeToNodeRequest', async (req, res) => {\n            const reqBody = req.body;\n            if (!isNodeToNodeRequest(reqBody)) {\n                await this._errorResponse(req, res, 500, 'Invalid node-to-node request');\n                return;\n            }\n            reqBody.body.fromNodeId\n            /////////////////////////////////////////////////////////////////////////\n            await action('/nodeToNodeRequest', {\n                context: 'Public API',\n                fromNodeId: reqBody.body.fromNodeId,\n                requestType: reqBody.body.requestData.requestType\n            }, async () => {\n                await this._apiNodeToNodeRequest(reqBody, res) \n            }, async (err: Error) => {\n                await this._errorResponse(req, res, 500, err.message);\n            });\n            /////////////////////////////////////////////////////////////////////////\n        });\n        // /download\n        this.#app.get('/download/:nodeId/:streamId', async (req, res) => {\n            const streamId = req.params.streamId\n            const nodeId = req.params.nodeId\n            /////////////////////////////////////////////////////////////////////////\n            await action('/download', {\n                context: 'Public API',\n                nodeId,\n                streamId\n            }, async () => {\n                if (!isStreamId(streamId)) {\n                    throw Error ('Invalid stream ID')\n                }\n                if (!isNodeId(nodeId)) {\n                    throw Error ('Invalid node ID')\n                }\n                this._apiDownload(nodeId, streamId, req, res)\n            }, async (err: Error) => {\n                await this._errorResponse(req, res, 500, err.message);\n            });\n            /////////////////////////////////////////////////////////////////////////\n            req.params.streamId\n        });\n    }\n    // /probe - check whether the daemon is up and running and return info such as the node ID\n    async _apiProbe(req: Req, res: Res) {\n        const response: ApiProbeResponse = {\n            success: true,\n            protocolVersion: protocolVersion(),\n            daemonVersion: daemonVersion(),\n            nodeId: this.#node.nodeId(),\n            isBootstrapNode: this.#node.isBootstrapNode(),\n            webSocketAddress: this.#node.webSocketAddress(),\n            publicUdpSocketAddress: this.#node.publicUdpSocketAddress()\n        };\n        if (!isJSONObject(response)) throw Error('Unexpected, not a JSON-serializable object');\n        res.json(response);\n    }\n    // /nodeToNodeRequest\n    async _apiNodeToNodeRequest(reqBody: NodeToNodeRequest, res: Res) {\n        const response: NodeToNodeResponse = await this.#node.handleNodeToNodeRequest(reqBody);\n        if (!isJSONObject(response)) throw Error('Unexpected, not a JSON-serializable object');\n        res.json(response);\n    }\n    // /download\n    _apiDownload(nodeId: NodeId, streamId: StreamId, req: Req, res: Res) {\n        const {onData, onStarted, onFinished, onError, cancel} = this.#node.streamFileData(nodeId, streamId)\n        let started = false\n        onStarted((size: ByteCount) => {\n            started = true\n            res.writeHead(200, {\n                'Content-Type': 'application/octet-stream',\n                'Content-Length': size\n            });\n        })\n        \n        onData((data: Buffer) => {\n            res.send(data)\n        })\n        onFinished(() => {\n            res.end()\n        })\n        onError((err: Error) => {\n            if (started) {\n                console.warn(err)\n                console.warn('Error in streaming file data')\n                res.end()\n            }\n            else {\n                res.status(500).send(err.message);\n            }\n        })\n        req.on('close', () => {\n            cancel()\n        });\n    }\n    // Helper function for returning http request with an error response\n    async _errorResponse(req: Req, res: Res, code: number, errorString: string) {\n        console.info(`Responding with error: ${code} ${errorString}`);\n        try {\n            res.status(code).send(errorString);\n        }\n        catch(err) {\n            console.warn(`Problem sending error`, {error: err.message});\n        }\n        await sleepMsec(100);\n        try {\n            req.connection.destroy();\n        }\n        catch(err) {\n            console.warn('Problem destroying connection', {error: err.message});\n        }\n    }\n    // Start listening via http/https\n    async listen(port: Port) {\n        const stopper = {\n            onStop: (cb: () => void) => {\n                this.#stopperCallbacks.push(cb);\n            }\n        }\n        start_http_server(this.#app, port, stopper);\n    }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a02dba0a86590803d8e743c6307337a158b1bb00","contentHash":"820d229b156bc43e34e63ca271d4c9d2985bb215363a1f78490b9ef26e269713"},"/home/jsoules/src/kachery-p2p/daemon/src/common/action.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/common/action.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":24}},"2":{"start":{"line":4,"column":0},"end":{"line":14,"column":2}},"3":{"start":{"line":5,"column":4},"end":{"line":13,"column":5}},"4":{"start":{"line":6,"column":8},"end":{"line":6,"column":52}},"5":{"start":{"line":7,"column":8},"end":{"line":7,"column":26}},"6":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"7":{"start":{"line":11,"column":12},"end":{"line":11,"column":31}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":17},"end":{"line":4,"column":18}},"loc":{"start":{"line":4,"column":71},"end":{"line":14,"column":1}},"line":4}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},{"start":{"line":10,"column":8},"end":{"line":12,"column":9}}],"line":10}},"s":{"0":1,"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0},"f":{"0":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/common/action.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/common/action.ts"],"names":[],"mappings":";;;AAAa,QAAA,MAAM,GAAG,KAAK,EACvB,UAAkB,EAClB,UAAe,EACf,SAA8B,EAC9B,OAA+C,EACjD,EAAE;IACA,IAAI;QACA,OAAO,CAAC,IAAI,CAAC,GAAG,UAAU,IAAI,UAAU,EAAE,CAAC,CAAC;QAC5C,MAAM,SAAS,EAAE,CAAA;KACpB;IACD,OAAM,GAAG,EAAE;QACP,IAAI,OAAO,EAAE;YACT,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC;SACtB;KACJ;AACL,CAAC,CAAA","sourcesContent":["export const action = async (\n    actionName: string,\n    actionData: any,\n    operation: () => Promise<void>,\n    onError: ((err: Error) => Promise<void>) | null\n) => {\n    try {\n        console.info(`${actionName} ${actionData}`);\n        await operation()\n    }\n    catch(err) {\n        if (onError) {\n            await onError(err);\n        }\n    }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"24bcf0f1025c543075aa13e2ebbdeca452d65214","contentHash":"e9a822bb648d8f1c86b8b2688c0c2397b6cecc03808e2b315e1c4b444844a4d6"},"/home/jsoules/src/kachery-p2p/daemon/src/common/start_http_server.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/common/start_http_server.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":13},"end":{"line":6,"column":43}},"4":{"start":{"line":7,"column":15},"end":{"line":7,"column":47}},"5":{"start":{"line":8,"column":16},"end":{"line":8,"column":49}},"6":{"start":{"line":9,"column":15},"end":{"line":9,"column":44}},"7":{"start":{"line":10,"column":26},"end":{"line":38,"column":1}},"8":{"start":{"line":14,"column":4},"end":{"line":32,"column":5}},"9":{"start":{"line":17,"column":8},"end":{"line":17,"column":27}},"10":{"start":{"line":20,"column":24},"end":{"line":24,"column":9}},"11":{"start":{"line":26,"column":8},"end":{"line":26,"column":60}},"12":{"start":{"line":29,"column":8},"end":{"line":29,"column":26}},"13":{"start":{"line":31,"column":8},"end":{"line":31,"column":50}},"14":{"start":{"line":33,"column":4},"end":{"line":35,"column":7}},"15":{"start":{"line":34,"column":8},"end":{"line":34,"column":23}},"16":{"start":{"line":36,"column":4},"end":{"line":36,"column":31}},"17":{"start":{"line":37,"column":4},"end":{"line":37,"column":92}},"18":{"start":{"line":39,"column":0},"end":{"line":39,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":26},"end":{"line":10,"column":27}},"loc":{"start":{"line":10,"column":57},"end":{"line":38,"column":1}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":33,"column":19},"end":{"line":33,"column":20}},"loc":{"start":{"line":33,"column":25},"end":{"line":35,"column":5}},"line":33}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":14,"column":4},"end":{"line":32,"column":5}},"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":32,"column":5}},{"start":{"line":14,"column":4},"end":{"line":32,"column":5}}],"line":14},"4":{"loc":{"start":{"line":14,"column":8},"end":{"line":14,"column":94}},"type":"cond-expr","locations":[{"start":{"line":14,"column":34},"end":{"line":14,"column":49}},{"start":{"line":14,"column":52},"end":{"line":14,"column":94}}],"line":14}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1},"f":{"0":3,"1":0,"2":0},"b":{"0":[1,1,1],"1":[0,3],"2":[3,3],"3":[0,0],"4":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/common/start_http_server.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/common/start_http_server.ts"],"names":[],"mappings":";;;;;AACA,4CAAoB;AACpB,gDAAwB;AACxB,kDAA0B;AAC1B,6CAAoD;AAEpD,MAAM,iBAAiB,GAAG,CAAC,GAAY,EAAE,WAAiB,EAAE,OAAiD,EAAE,EAAE;IAC7G,wEAAwE;IACxE,IAAI,QAA0B,CAAC;IAC/B,IAAI,MAAkC,CAAC;IACvC,IAAI,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,eAAQ,CAAC,WAAW,CAAC,GAAG,IAAI,IAAI,GAAG,EAAE;QACjF,uDAAuD;QACvD,0BAA0B;QAC1B,QAAQ,GAAG,OAAO,CAAC;QACnB,2DAA2D;QAC3D,qEAAqE;QACrE,MAAM,OAAO,GAAG;YACZ,GAAG,EAAE,YAAE,CAAC,YAAY,CAAC,SAAS,GAAG,yBAAyB,CAAC;YAC3D,IAAI,EAAE,YAAE,CAAC,YAAY,CAAC,SAAS,GAAG,2BAA2B,CAAC;YAC9D,EAAE,EAAE,YAAE,CAAC,YAAY,CAAC,SAAS,GAAG,uBAAuB,CAAC;SAC3D,CAAC;QAEF,0BAA0B;QAC1B,MAAM,GAAG,eAAK,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;KAC7C;SAAM;QACH,QAAQ,GAAG,MAAM,CAAC;QAClB,6CAA6C;QAC7C,MAAM,GAAG,cAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;KACnC;IACD,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE;QAChB,MAAM,CAAC,KAAK,EAAE,CAAC;IACnB,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC3B,OAAO,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAC,EAAE,EAAC,KAAK,EAAE,IAAI,EAAC,CAAC,CAAC;AACxF,CAAC,CAAA;AAED,kBAAe,iBAAiB,CAAC","sourcesContent":["import { Express } from 'express';\nimport fs from 'fs';\nimport http from 'http';\nimport https from 'https';\nimport { Port, toNumber } from '../interfaces/core';\n\nconst start_http_server = (app: Express, listen_port: Port, stopper: {onStop: (callback: () => void) => void}) => {\n    // convenient for starting either as http or https depending on the port\n    let protocol: 'http' | 'https';\n    let server: http.Server | https.Server;\n    if (process.env.SSL != null ? process.env.SSL : toNumber(listen_port) % 1000 == 443) {\n        // The port number ends with 443, so we are using https\n        // app.USING_HTTPS = true;\n        protocol = 'https';\n        // Look for the credentials inside the encryption directory\n        // You can generate these for free using the tools of letsencrypt.org\n        const options = {\n            key: fs.readFileSync(__dirname + '/encryption/privkey.pem'),\n            cert: fs.readFileSync(__dirname + '/encryption/fullchain.pem'),\n            ca: fs.readFileSync(__dirname + '/encryption/chain.pem')\n        };\n\n        // Create the https server\n        server = https.createServer(options, app);\n    } else {\n        protocol = 'http';\n        // Create the http server and start listening\n        server = http.createServer(app);\n    }\n    stopper.onStop(() => {\n        server.close();\n    });\n    server.listen(listen_port);\n    console.info('API server is running', {protocol, port: listen_port}, {print: true});\n}\n\nexport default start_http_server;"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1b57b953b11b4b5af2dcf4b058372ef910081863","contentHash":"034e7153deb693bd825ebaf7841d9a599259b299ce9600fa4e1e76391b1f5ec2"}}