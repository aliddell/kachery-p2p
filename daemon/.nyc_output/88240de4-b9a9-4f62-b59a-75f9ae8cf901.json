{"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/core.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/core.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":2915}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":51}},"5":{"start":{"line":8,"column":22},"end":{"line":8,"column":54}},"6":{"start":{"line":9,"column":15},"end":{"line":9,"column":40}},"7":{"start":{"line":10,"column":28},"end":{"line":10,"column":58}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":20}},"9":{"start":{"line":12,"column":0},"end":{"line":12,"column":60}},"10":{"start":{"line":13,"column":0},"end":{"line":17,"column":2}},"11":{"start":{"line":14,"column":4},"end":{"line":15,"column":21}},"12":{"start":{"line":15,"column":8},"end":{"line":15,"column":21}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":49}},"14":{"start":{"line":18,"column":0},"end":{"line":20,"column":2}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":80}},"16":{"start":{"line":21,"column":0},"end":{"line":21,"column":56}},"17":{"start":{"line":22,"column":0},"end":{"line":26,"column":2}},"18":{"start":{"line":23,"column":4},"end":{"line":24,"column":21}},"19":{"start":{"line":24,"column":8},"end":{"line":24,"column":21}},"20":{"start":{"line":25,"column":4},"end":{"line":25,"column":50}},"21":{"start":{"line":27,"column":0},"end":{"line":29,"column":2}},"22":{"start":{"line":28,"column":4},"end":{"line":28,"column":76}},"23":{"start":{"line":30,"column":0},"end":{"line":34,"column":2}},"24":{"start":{"line":31,"column":4},"end":{"line":32,"column":21}},"25":{"start":{"line":32,"column":8},"end":{"line":32,"column":21}},"26":{"start":{"line":33,"column":4},"end":{"line":33,"column":41}},"27":{"start":{"line":35,"column":0},"end":{"line":46,"column":2}},"28":{"start":{"line":37,"column":4},"end":{"line":42,"column":5}},"29":{"start":{"line":38,"column":8},"end":{"line":38,"column":26}},"30":{"start":{"line":41,"column":8},"end":{"line":41,"column":20}},"31":{"start":{"line":43,"column":4},"end":{"line":44,"column":20}},"32":{"start":{"line":44,"column":8},"end":{"line":44,"column":20}},"33":{"start":{"line":45,"column":4},"end":{"line":45,"column":13}},"34":{"start":{"line":47,"column":0},"end":{"line":72,"column":2}},"35":{"start":{"line":48,"column":4},"end":{"line":49,"column":21}},"36":{"start":{"line":49,"column":8},"end":{"line":49,"column":21}},"37":{"start":{"line":50,"column":26},"end":{"line":52,"column":5}},"38":{"start":{"line":51,"column":8},"end":{"line":51,"column":71}},"39":{"start":{"line":53,"column":20},"end":{"line":55,"column":5}},"40":{"start":{"line":54,"column":8},"end":{"line":54,"column":174}},"41":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"42":{"start":{"line":57,"column":8},"end":{"line":57,"column":21}},"43":{"start":{"line":59,"column":4},"end":{"line":70,"column":5}},"44":{"start":{"line":60,"column":8},"end":{"line":69,"column":9}},"45":{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},"46":{"start":{"line":62,"column":16},"end":{"line":62,"column":29}},"47":{"start":{"line":64,"column":12},"end":{"line":68,"column":13}},"48":{"start":{"line":65,"column":16},"end":{"line":67,"column":17}},"49":{"start":{"line":66,"column":20},"end":{"line":66,"column":33}},"50":{"start":{"line":71,"column":4},"end":{"line":71,"column":16}},"51":{"start":{"line":74,"column":0},"end":{"line":76,"column":2}},"52":{"start":{"line":75,"column":4},"end":{"line":75,"column":53}},"53":{"start":{"line":78,"column":0},"end":{"line":80,"column":2}},"54":{"start":{"line":79,"column":4},"end":{"line":79,"column":53}},"55":{"start":{"line":82,"column":0},"end":{"line":84,"column":2}},"56":{"start":{"line":83,"column":4},"end":{"line":83,"column":55}},"57":{"start":{"line":86,"column":0},"end":{"line":88,"column":2}},"58":{"start":{"line":87,"column":4},"end":{"line":87,"column":53}},"59":{"start":{"line":90,"column":0},"end":{"line":92,"column":2}},"60":{"start":{"line":91,"column":4},"end":{"line":91,"column":53}},"61":{"start":{"line":94,"column":0},"end":{"line":96,"column":2}},"62":{"start":{"line":95,"column":4},"end":{"line":95,"column":22}},"63":{"start":{"line":98,"column":0},"end":{"line":100,"column":2}},"64":{"start":{"line":99,"column":4},"end":{"line":99,"column":54}},"65":{"start":{"line":102,"column":0},"end":{"line":110,"column":2}},"66":{"start":{"line":103,"column":4},"end":{"line":109,"column":6}},"67":{"start":{"line":104,"column":8},"end":{"line":107,"column":9}},"68":{"start":{"line":105,"column":12},"end":{"line":106,"column":28}},"69":{"start":{"line":106,"column":16},"end":{"line":106,"column":28}},"70":{"start":{"line":108,"column":8},"end":{"line":108,"column":21}},"71":{"start":{"line":111,"column":0},"end":{"line":124,"column":2}},"72":{"start":{"line":112,"column":4},"end":{"line":123,"column":5}},"73":{"start":{"line":113,"column":29},"end":{"line":113,"column":47}},"74":{"start":{"line":114,"column":8},"end":{"line":116,"column":10}},"75":{"start":{"line":115,"column":12},"end":{"line":115,"column":60}},"76":{"start":{"line":119,"column":8},"end":{"line":122,"column":10}},"77":{"start":{"line":120,"column":24},"end":{"line":120,"column":42}},"78":{"start":{"line":121,"column":12},"end":{"line":121,"column":76}},"79":{"start":{"line":126,"column":0},"end":{"line":130,"column":2}},"80":{"start":{"line":127,"column":4},"end":{"line":129,"column":6}},"81":{"start":{"line":128,"column":8},"end":{"line":128,"column":27}},"82":{"start":{"line":132,"column":0},"end":{"line":144,"column":2}},"83":{"start":{"line":133,"column":4},"end":{"line":143,"column":6}},"84":{"start":{"line":134,"column":8},"end":{"line":142,"column":25}},"85":{"start":{"line":135,"column":12},"end":{"line":138,"column":13}},"86":{"start":{"line":136,"column":16},"end":{"line":137,"column":33}},"87":{"start":{"line":137,"column":20},"end":{"line":137,"column":33}},"88":{"start":{"line":139,"column":12},"end":{"line":139,"column":24}},"89":{"start":{"line":142,"column":12},"end":{"line":142,"column":25}},"90":{"start":{"line":148,"column":19},"end":{"line":162,"column":1}},"91":{"start":{"line":149,"column":4},"end":{"line":161,"column":6}},"92":{"start":{"line":150,"column":8},"end":{"line":160,"column":25}},"93":{"start":{"line":151,"column":12},"end":{"line":156,"column":13}},"94":{"start":{"line":152,"column":16},"end":{"line":153,"column":33}},"95":{"start":{"line":153,"column":20},"end":{"line":153,"column":33}},"96":{"start":{"line":154,"column":16},"end":{"line":155,"column":33}},"97":{"start":{"line":155,"column":20},"end":{"line":155,"column":33}},"98":{"start":{"line":157,"column":12},"end":{"line":157,"column":24}},"99":{"start":{"line":160,"column":12},"end":{"line":160,"column":25}},"100":{"start":{"line":163,"column":0},"end":{"line":168,"column":2}},"101":{"start":{"line":164,"column":30},"end":{"line":164,"column":76}},"102":{"start":{"line":165,"column":4},"end":{"line":165,"column":80}},"103":{"start":{"line":167,"column":4},"end":{"line":167,"column":67}},"104":{"start":{"line":171,"column":0},"end":{"line":174,"column":2}},"105":{"start":{"line":172,"column":32},"end":{"line":172,"column":78}},"106":{"start":{"line":173,"column":4},"end":{"line":173,"column":63}},"107":{"start":{"line":175,"column":0},"end":{"line":198,"column":2}},"108":{"start":{"line":176,"column":4},"end":{"line":177,"column":21}},"109":{"start":{"line":177,"column":8},"end":{"line":177,"column":21}},"110":{"start":{"line":178,"column":4},"end":{"line":179,"column":21}},"111":{"start":{"line":179,"column":8},"end":{"line":179,"column":21}},"112":{"start":{"line":180,"column":4},"end":{"line":183,"column":5}},"113":{"start":{"line":181,"column":8},"end":{"line":182,"column":25}},"114":{"start":{"line":182,"column":12},"end":{"line":182,"column":25}},"115":{"start":{"line":184,"column":4},"end":{"line":196,"column":5}},"116":{"start":{"line":185,"column":22},"end":{"line":185,"column":29}},"117":{"start":{"line":186,"column":8},"end":{"line":195,"column":9}},"118":{"start":{"line":187,"column":12},"end":{"line":188,"column":29}},"119":{"start":{"line":188,"column":16},"end":{"line":188,"column":29}},"120":{"start":{"line":191,"column":12},"end":{"line":192,"column":29}},"121":{"start":{"line":192,"column":16},"end":{"line":192,"column":29}},"122":{"start":{"line":193,"column":12},"end":{"line":194,"column":29}},"123":{"start":{"line":194,"column":16},"end":{"line":194,"column":29}},"124":{"start":{"line":197,"column":4},"end":{"line":197,"column":16}},"125":{"start":{"line":199,"column":0},"end":{"line":199,"column":27}},"126":{"start":{"line":200,"column":0},"end":{"line":204,"column":2}},"127":{"start":{"line":201,"column":4},"end":{"line":202,"column":21}},"128":{"start":{"line":202,"column":8},"end":{"line":202,"column":21}},"129":{"start":{"line":203,"column":4},"end":{"line":203,"column":30}},"130":{"start":{"line":205,"column":0},"end":{"line":207,"column":2}},"131":{"start":{"line":206,"column":4},"end":{"line":206,"column":13}},"132":{"start":{"line":208,"column":0},"end":{"line":213,"column":2}},"133":{"start":{"line":209,"column":4},"end":{"line":209,"column":58}},"134":{"start":{"line":210,"column":4},"end":{"line":210,"column":45}},"135":{"start":{"line":211,"column":4},"end":{"line":211,"column":45}},"136":{"start":{"line":212,"column":4},"end":{"line":212,"column":45}},"137":{"start":{"line":214,"column":0},"end":{"line":214,"column":36}},"138":{"start":{"line":215,"column":0},"end":{"line":219,"column":2}},"139":{"start":{"line":216,"column":4},"end":{"line":217,"column":21}},"140":{"start":{"line":217,"column":8},"end":{"line":217,"column":21}},"141":{"start":{"line":218,"column":4},"end":{"line":218,"column":131}},"142":{"start":{"line":220,"column":0},"end":{"line":222,"column":2}},"143":{"start":{"line":221,"column":4},"end":{"line":221,"column":66}},"144":{"start":{"line":223,"column":0},"end":{"line":226,"column":2}},"145":{"start":{"line":227,"column":0},"end":{"line":232,"column":2}},"146":{"start":{"line":228,"column":4},"end":{"line":231,"column":7}},"147":{"start":{"line":233,"column":0},"end":{"line":235,"column":2}},"148":{"start":{"line":234,"column":4},"end":{"line":234,"column":64}},"149":{"start":{"line":236,"column":0},"end":{"line":236,"column":72}},"150":{"start":{"line":237,"column":0},"end":{"line":243,"column":2}},"151":{"start":{"line":238,"column":4},"end":{"line":239,"column":21}},"152":{"start":{"line":239,"column":8},"end":{"line":239,"column":21}},"153":{"start":{"line":240,"column":4},"end":{"line":241,"column":21}},"154":{"start":{"line":241,"column":8},"end":{"line":241,"column":21}},"155":{"start":{"line":242,"column":4},"end":{"line":242,"column":16}},"156":{"start":{"line":244,"column":0},"end":{"line":247,"column":2}},"157":{"start":{"line":245,"column":16},"end":{"line":245,"column":38}},"158":{"start":{"line":246,"column":4},"end":{"line":246,"column":15}},"159":{"start":{"line":248,"column":0},"end":{"line":250,"column":2}},"160":{"start":{"line":249,"column":4},"end":{"line":249,"column":13}},"161":{"start":{"line":251,"column":0},"end":{"line":253,"column":2}},"162":{"start":{"line":252,"column":4},"end":{"line":252,"column":46}},"163":{"start":{"line":254,"column":0},"end":{"line":258,"column":2}},"164":{"start":{"line":255,"column":4},"end":{"line":255,"column":68}},"165":{"start":{"line":256,"column":4},"end":{"line":256,"column":46}},"166":{"start":{"line":257,"column":4},"end":{"line":257,"column":48}},"167":{"start":{"line":259,"column":0},"end":{"line":262,"column":2}},"168":{"start":{"line":260,"column":4},"end":{"line":260,"column":51}},"169":{"start":{"line":261,"column":4},"end":{"line":261,"column":67}},"170":{"start":{"line":263,"column":0},"end":{"line":268,"column":2}},"171":{"start":{"line":264,"column":17},"end":{"line":264,"column":39}},"172":{"start":{"line":265,"column":21},"end":{"line":265,"column":29}},"173":{"start":{"line":266,"column":17},"end":{"line":266,"column":46}},"174":{"start":{"line":267,"column":4},"end":{"line":267,"column":47}},"175":{"start":{"line":269,"column":25},"end":{"line":269,"column":141}},"176":{"start":{"line":270,"column":0},"end":{"line":275,"column":2}},"177":{"start":{"line":271,"column":4},"end":{"line":272,"column":21}},"178":{"start":{"line":272,"column":8},"end":{"line":272,"column":21}},"179":{"start":{"line":274,"column":4},"end":{"line":274,"column":83}},"180":{"start":{"line":276,"column":0},"end":{"line":276,"column":94}},"181":{"start":{"line":276,"column":35},"end":{"line":276,"column":91}},"182":{"start":{"line":277,"column":26},"end":{"line":277,"column":144}},"183":{"start":{"line":278,"column":0},"end":{"line":282,"column":2}},"184":{"start":{"line":279,"column":4},"end":{"line":280,"column":21}},"185":{"start":{"line":280,"column":8},"end":{"line":280,"column":21}},"186":{"start":{"line":281,"column":4},"end":{"line":281,"column":85}},"187":{"start":{"line":283,"column":0},"end":{"line":283,"column":97}},"188":{"start":{"line":283,"column":36},"end":{"line":283,"column":94}},"189":{"start":{"line":284,"column":28},"end":{"line":284,"column":94}},"190":{"start":{"line":285,"column":0},"end":{"line":289,"column":2}},"191":{"start":{"line":286,"column":4},"end":{"line":287,"column":21}},"192":{"start":{"line":287,"column":8},"end":{"line":287,"column":21}},"193":{"start":{"line":288,"column":4},"end":{"line":288,"column":38}},"194":{"start":{"line":290,"column":0},"end":{"line":290,"column":103}},"195":{"start":{"line":290,"column":38},"end":{"line":290,"column":100}},"196":{"start":{"line":291,"column":29},"end":{"line":291,"column":95}},"197":{"start":{"line":292,"column":0},"end":{"line":296,"column":2}},"198":{"start":{"line":293,"column":4},"end":{"line":294,"column":21}},"199":{"start":{"line":294,"column":8},"end":{"line":294,"column":21}},"200":{"start":{"line":295,"column":4},"end":{"line":295,"column":38}},"201":{"start":{"line":297,"column":0},"end":{"line":297,"column":106}},"202":{"start":{"line":297,"column":39},"end":{"line":297,"column":103}},"203":{"start":{"line":298,"column":24},"end":{"line":298,"column":66}},"204":{"start":{"line":299,"column":0},"end":{"line":303,"column":2}},"205":{"start":{"line":300,"column":4},"end":{"line":301,"column":21}},"206":{"start":{"line":301,"column":8},"end":{"line":301,"column":21}},"207":{"start":{"line":302,"column":4},"end":{"line":302,"column":41}},"208":{"start":{"line":304,"column":0},"end":{"line":304,"column":118}},"209":{"start":{"line":304,"column":34},"end":{"line":304,"column":115}},"210":{"start":{"line":306,"column":0},"end":{"line":308,"column":2}},"211":{"start":{"line":307,"column":4},"end":{"line":307,"column":59}},"212":{"start":{"line":309,"column":23},"end":{"line":312,"column":1}},"213":{"start":{"line":313,"column":0},"end":{"line":320,"column":2}},"214":{"start":{"line":314,"column":4},"end":{"line":317,"column":7}},"215":{"start":{"line":321,"column":0},"end":{"line":321,"column":90}},"216":{"start":{"line":321,"column":35},"end":{"line":321,"column":87}},"217":{"start":{"line":322,"column":0},"end":{"line":322,"column":94}},"218":{"start":{"line":323,"column":0},"end":{"line":327,"column":2}},"219":{"start":{"line":324,"column":4},"end":{"line":325,"column":21}},"220":{"start":{"line":325,"column":8},"end":{"line":325,"column":21}},"221":{"start":{"line":326,"column":4},"end":{"line":326,"column":39}},"222":{"start":{"line":328,"column":0},"end":{"line":328,"column":102}},"223":{"start":{"line":328,"column":35},"end":{"line":328,"column":99}},"224":{"start":{"line":329,"column":0},"end":{"line":329,"column":91}},"225":{"start":{"line":330,"column":0},"end":{"line":334,"column":2}},"226":{"start":{"line":331,"column":4},"end":{"line":332,"column":21}},"227":{"start":{"line":332,"column":8},"end":{"line":332,"column":21}},"228":{"start":{"line":333,"column":4},"end":{"line":333,"column":39}},"229":{"start":{"line":335,"column":0},"end":{"line":335,"column":93}},"230":{"start":{"line":335,"column":32},"end":{"line":335,"column":90}},"231":{"start":{"line":336,"column":0},"end":{"line":336,"column":52}},"232":{"start":{"line":337,"column":0},"end":{"line":341,"column":2}},"233":{"start":{"line":338,"column":4},"end":{"line":339,"column":21}},"234":{"start":{"line":339,"column":8},"end":{"line":339,"column":21}},"235":{"start":{"line":340,"column":4},"end":{"line":340,"column":50}},"236":{"start":{"line":342,"column":0},"end":{"line":342,"column":108}},"237":{"start":{"line":342,"column":37},"end":{"line":342,"column":105}},"238":{"start":{"line":343,"column":0},"end":{"line":343,"column":91}},"239":{"start":{"line":344,"column":0},"end":{"line":348,"column":2}},"240":{"start":{"line":345,"column":4},"end":{"line":346,"column":21}},"241":{"start":{"line":346,"column":8},"end":{"line":346,"column":21}},"242":{"start":{"line":347,"column":4},"end":{"line":347,"column":42}},"243":{"start":{"line":349,"column":0},"end":{"line":349,"column":93}},"244":{"start":{"line":349,"column":32},"end":{"line":349,"column":90}},"245":{"start":{"line":351,"column":0},"end":{"line":353,"column":2}},"246":{"start":{"line":352,"column":4},"end":{"line":352,"column":18}},"247":{"start":{"line":354,"column":0},"end":{"line":356,"column":2}},"248":{"start":{"line":355,"column":4},"end":{"line":355,"column":13}},"249":{"start":{"line":357,"column":0},"end":{"line":357,"column":72}},"250":{"start":{"line":358,"column":0},"end":{"line":362,"column":2}},"251":{"start":{"line":359,"column":4},"end":{"line":360,"column":21}},"252":{"start":{"line":360,"column":8},"end":{"line":360,"column":21}},"253":{"start":{"line":361,"column":4},"end":{"line":361,"column":42}},"254":{"start":{"line":363,"column":0},"end":{"line":363,"column":108}},"255":{"start":{"line":363,"column":37},"end":{"line":363,"column":105}},"256":{"start":{"line":364,"column":0},"end":{"line":373,"column":2}},"257":{"start":{"line":374,"column":0},"end":{"line":383,"column":2}},"258":{"start":{"line":375,"column":4},"end":{"line":382,"column":7}},"259":{"start":{"line":384,"column":0},"end":{"line":384,"column":96}},"260":{"start":{"line":384,"column":33},"end":{"line":384,"column":93}},"261":{"start":{"line":385,"column":0},"end":{"line":385,"column":70}},"262":{"start":{"line":386,"column":0},"end":{"line":390,"column":2}},"263":{"start":{"line":387,"column":4},"end":{"line":389,"column":7}},"264":{"start":{"line":388,"column":23},"end":{"line":388,"column":39}},"265":{"start":{"line":391,"column":0},"end":{"line":391,"column":129}},"266":{"start":{"line":391,"column":44},"end":{"line":391,"column":126}},"267":{"start":{"line":392,"column":0},"end":{"line":402,"column":2}},"268":{"start":{"line":393,"column":4},"end":{"line":401,"column":7}},"269":{"start":{"line":403,"column":0},"end":{"line":414,"column":2}},"270":{"start":{"line":415,"column":0},"end":{"line":420,"column":2}},"271":{"start":{"line":416,"column":4},"end":{"line":419,"column":7}},"272":{"start":{"line":421,"column":0},"end":{"line":421,"column":120}},"273":{"start":{"line":421,"column":41},"end":{"line":421,"column":117}},"274":{"start":{"line":423,"column":0},"end":{"line":423,"column":49}},"275":{"start":{"line":424,"column":0},"end":{"line":426,"column":2}},"276":{"start":{"line":425,"column":4},"end":{"line":425,"column":31}},"277":{"start":{"line":427,"column":0},"end":{"line":427,"column":117}},"278":{"start":{"line":427,"column":40},"end":{"line":427,"column":114}},"279":{"start":{"line":428,"column":0},"end":{"line":428,"column":65}},"280":{"start":{"line":429,"column":0},"end":{"line":431,"column":2}},"281":{"start":{"line":430,"column":4},"end":{"line":430,"column":31}},"282":{"start":{"line":432,"column":0},"end":{"line":432,"column":141}},"283":{"start":{"line":432,"column":48},"end":{"line":432,"column":138}},"284":{"start":{"line":433,"column":0},"end":{"line":442,"column":2}},"285":{"start":{"line":443,"column":0},"end":{"line":458,"column":2}},"286":{"start":{"line":444,"column":4},"end":{"line":454,"column":21}},"287":{"start":{"line":454,"column":8},"end":{"line":454,"column":21}},"288":{"start":{"line":457,"column":4},"end":{"line":457,"column":16}},"289":{"start":{"line":460,"column":0},"end":{"line":460,"column":135}},"290":{"start":{"line":460,"column":46},"end":{"line":460,"column":132}},"291":{"start":{"line":462,"column":0},"end":{"line":462,"column":68}},"292":{"start":{"line":463,"column":0},"end":{"line":465,"column":2}},"293":{"start":{"line":464,"column":4},"end":{"line":464,"column":73}},"294":{"start":{"line":466,"column":0},"end":{"line":468,"column":2}},"295":{"start":{"line":467,"column":4},"end":{"line":467,"column":13}},"296":{"start":{"line":469,"column":0},"end":{"line":469,"column":144}},"297":{"start":{"line":469,"column":49},"end":{"line":469,"column":141}},"298":{"start":{"line":470,"column":0},"end":{"line":476,"column":2}},"299":{"start":{"line":471,"column":4},"end":{"line":474,"column":7}},"300":{"start":{"line":477,"column":0},"end":{"line":477,"column":102}},"301":{"start":{"line":478,"column":0},"end":{"line":478,"column":120}},"302":{"start":{"line":478,"column":41},"end":{"line":478,"column":117}},"303":{"start":{"line":479,"column":0},"end":{"line":481,"column":2}},"304":{"start":{"line":480,"column":4},"end":{"line":480,"column":31}},"305":{"start":{"line":482,"column":0},"end":{"line":482,"column":41}},"306":{"start":{"line":483,"column":0},"end":{"line":483,"column":99}},"307":{"start":{"line":483,"column":34},"end":{"line":483,"column":96}},"308":{"start":{"line":484,"column":0},"end":{"line":486,"column":2}},"309":{"start":{"line":485,"column":4},"end":{"line":485,"column":54}},"310":{"start":{"line":487,"column":0},"end":{"line":493,"column":2}},"311":{"start":{"line":488,"column":4},"end":{"line":492,"column":5}},"312":{"start":{"line":489,"column":8},"end":{"line":489,"column":17}},"313":{"start":{"line":491,"column":8},"end":{"line":491,"column":86}},"314":{"start":{"line":494,"column":0},"end":{"line":494,"column":91}},"315":{"start":{"line":495,"column":0},"end":{"line":505,"column":2}},"316":{"start":{"line":496,"column":4},"end":{"line":496,"column":74}},"317":{"start":{"line":497,"column":4},"end":{"line":504,"column":5}},"318":{"start":{"line":498,"column":32},"end":{"line":498,"column":57}},"319":{"start":{"line":499,"column":16},"end":{"line":499,"column":53}},"320":{"start":{"line":500,"column":8},"end":{"line":500,"column":32}},"321":{"start":{"line":503,"column":8},"end":{"line":503,"column":107}},"322":{"start":{"line":508,"column":0},"end":{"line":512,"column":2}},"323":{"start":{"line":509,"column":4},"end":{"line":511,"column":8}},"324":{"start":{"line":510,"column":8},"end":{"line":510,"column":27}},"325":{"start":{"line":513,"column":0},"end":{"line":519,"column":2}},"326":{"start":{"line":514,"column":16},"end":{"line":514,"column":18}},"327":{"start":{"line":515,"column":4},"end":{"line":517,"column":7}},"328":{"start":{"line":516,"column":8},"end":{"line":516,"column":30}},"329":{"start":{"line":518,"column":4},"end":{"line":518,"column":15}},"330":{"start":{"line":520,"column":0},"end":{"line":525,"column":2}},"331":{"start":{"line":521,"column":4},"end":{"line":524,"column":6}},"332":{"start":{"line":526,"column":0},"end":{"line":531,"column":2}},"333":{"start":{"line":527,"column":4},"end":{"line":530,"column":6}},"334":{"start":{"line":532,"column":0},"end":{"line":537,"column":2}},"335":{"start":{"line":533,"column":4},"end":{"line":536,"column":7}},"336":{"start":{"line":539,"column":0},"end":{"line":539,"column":64}},"337":{"start":{"line":539,"column":37},"end":{"line":539,"column":61}},"338":{"start":{"line":540,"column":0},"end":{"line":545,"column":2}},"339":{"start":{"line":541,"column":4},"end":{"line":544,"column":7}},"340":{"start":{"line":546,"column":0},"end":{"line":546,"column":89}},"341":{"start":{"line":547,"column":0},"end":{"line":547,"column":89}},"342":{"start":{"line":548,"column":0},"end":{"line":551,"column":2}},"343":{"start":{"line":549,"column":4},"end":{"line":549,"column":90}},"344":{"start":{"line":550,"column":4},"end":{"line":550,"column":91}},"345":{"start":{"line":552,"column":0},"end":{"line":556,"column":2}},"346":{"start":{"line":553,"column":4},"end":{"line":555,"column":7}},"347":{"start":{"line":557,"column":0},"end":{"line":559,"column":2}},"348":{"start":{"line":558,"column":4},"end":{"line":558,"column":152}},"349":{"start":{"line":560,"column":0},"end":{"line":562,"column":2}},"350":{"start":{"line":561,"column":4},"end":{"line":561,"column":31}},"351":{"start":{"line":563,"column":0},"end":{"line":563,"column":63}},"352":{"start":{"line":564,"column":0},"end":{"line":564,"column":123}},"353":{"start":{"line":564,"column":42},"end":{"line":564,"column":120}},"354":{"start":{"line":565,"column":0},"end":{"line":569,"column":2}},"355":{"start":{"line":570,"column":0},"end":{"line":576,"column":2}},"356":{"start":{"line":571,"column":4},"end":{"line":575,"column":7}},"357":{"start":{"line":577,"column":0},"end":{"line":577,"column":111}},"358":{"start":{"line":577,"column":38},"end":{"line":577,"column":108}},"359":{"start":{"line":578,"column":0},"end":{"line":580,"column":2}},"360":{"start":{"line":579,"column":4},"end":{"line":579,"column":62}},"361":{"start":{"line":581,"column":0},"end":{"line":588,"column":2}},"362":{"start":{"line":582,"column":4},"end":{"line":583,"column":21}},"363":{"start":{"line":583,"column":8},"end":{"line":583,"column":21}},"364":{"start":{"line":584,"column":18},"end":{"line":584,"column":30}},"365":{"start":{"line":585,"column":4},"end":{"line":587,"column":42}},"366":{"start":{"line":589,"column":0},"end":{"line":589,"column":104}},"367":{"start":{"line":590,"column":0},"end":{"line":592,"column":2}},"368":{"start":{"line":591,"column":4},"end":{"line":591,"column":76}},"369":{"start":{"line":593,"column":0},"end":{"line":595,"column":2}},"370":{"start":{"line":594,"column":4},"end":{"line":594,"column":77}},"371":{"start":{"line":596,"column":0},"end":{"line":598,"column":2}},"372":{"start":{"line":597,"column":4},"end":{"line":597,"column":34}},"373":{"start":{"line":599,"column":0},"end":{"line":601,"column":2}},"374":{"start":{"line":600,"column":4},"end":{"line":600,"column":34}},"375":{"start":{"line":602,"column":0},"end":{"line":608,"column":2}},"376":{"start":{"line":603,"column":4},"end":{"line":607,"column":7}},"377":{"start":{"line":609,"column":0},"end":{"line":613,"column":2}},"378":{"start":{"line":615,"column":0},"end":{"line":615,"column":117}},"379":{"start":{"line":615,"column":40},"end":{"line":615,"column":114}},"380":{"start":{"line":616,"column":0},"end":{"line":620,"column":2}},"381":{"start":{"line":617,"column":4},"end":{"line":618,"column":21}},"382":{"start":{"line":618,"column":8},"end":{"line":618,"column":21}},"383":{"start":{"line":619,"column":4},"end":{"line":619,"column":38}},"384":{"start":{"line":621,"column":0},"end":{"line":623,"column":2}},"385":{"start":{"line":622,"column":4},"end":{"line":622,"column":40}},"386":{"start":{"line":624,"column":0},"end":{"line":624,"column":103}},"387":{"start":{"line":624,"column":35},"end":{"line":624,"column":100}},"388":{"start":{"line":625,"column":0},"end":{"line":629,"column":2}},"389":{"start":{"line":626,"column":4},"end":{"line":627,"column":21}},"390":{"start":{"line":627,"column":8},"end":{"line":627,"column":21}},"391":{"start":{"line":628,"column":4},"end":{"line":628,"column":51}},"392":{"start":{"line":630,"column":0},"end":{"line":637,"column":2}},"393":{"start":{"line":631,"column":4},"end":{"line":636,"column":7}},"394":{"start":{"line":638,"column":0},"end":{"line":643,"column":2}},"395":{"start":{"line":644,"column":0},"end":{"line":644,"column":135}},"396":{"start":{"line":644,"column":46},"end":{"line":644,"column":132}},"397":{"start":{"line":645,"column":0},"end":{"line":649,"column":2}},"398":{"start":{"line":646,"column":4},"end":{"line":648,"column":7}},"399":{"start":{"line":650,"column":0},"end":{"line":652,"column":2}},"400":{"start":{"line":651,"column":4},"end":{"line":651,"column":111}},"401":{"start":{"line":653,"column":0},"end":{"line":657,"column":2}},"402":{"start":{"line":654,"column":4},"end":{"line":656,"column":7}},"403":{"start":{"line":658,"column":0},"end":{"line":658,"column":73}},"404":{"start":{"line":659,"column":0},"end":{"line":659,"column":108}},"405":{"start":{"line":659,"column":37},"end":{"line":659,"column":105}},"406":{"start":{"line":660,"column":0},"end":{"line":667,"column":2}},"407":{"start":{"line":661,"column":4},"end":{"line":666,"column":7}},"408":{"start":{"line":668,"column":0},"end":{"line":673,"column":2}},"409":{"start":{"line":669,"column":4},"end":{"line":672,"column":7}},"410":{"start":{"line":674,"column":0},"end":{"line":685,"column":2}},"411":{"start":{"line":686,"column":0},"end":{"line":688,"column":2}},"412":{"start":{"line":687,"column":4},"end":{"line":687,"column":98}},"413":{"start":{"line":689,"column":0},"end":{"line":695,"column":2}},"414":{"start":{"line":690,"column":4},"end":{"line":691,"column":67}},"415":{"start":{"line":691,"column":8},"end":{"line":691,"column":67}},"416":{"start":{"line":692,"column":4},"end":{"line":693,"column":67}},"417":{"start":{"line":693,"column":8},"end":{"line":693,"column":67}},"418":{"start":{"line":694,"column":4},"end":{"line":694,"column":107}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":28},"end":{"line":13,"column":29}},"loc":{"start":{"line":13,"column":35},"end":{"line":17,"column":1}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":33},"end":{"line":18,"column":34}},"loc":{"start":{"line":18,"column":39},"end":{"line":20,"column":1}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":22,"column":26},"end":{"line":22,"column":27}},"loc":{"start":{"line":22,"column":33},"end":{"line":26,"column":1}},"line":22},"4":{"name":"(anonymous_4)","decl":{"start":{"line":27,"column":31},"end":{"line":27,"column":32}},"loc":{"start":{"line":27,"column":37},"end":{"line":29,"column":1}},"line":27},"5":{"name":"(anonymous_5)","decl":{"start":{"line":30,"column":23},"end":{"line":30,"column":24}},"loc":{"start":{"line":30,"column":30},"end":{"line":34,"column":1}},"line":30},"6":{"name":"(anonymous_6)","decl":{"start":{"line":35,"column":29},"end":{"line":35,"column":30}},"loc":{"start":{"line":35,"column":36},"end":{"line":46,"column":1}},"line":35},"7":{"name":"(anonymous_7)","decl":{"start":{"line":47,"column":29},"end":{"line":47,"column":30}},"loc":{"start":{"line":47,"column":38},"end":{"line":72,"column":1}},"line":47},"8":{"name":"(anonymous_8)","decl":{"start":{"line":50,"column":26},"end":{"line":50,"column":27}},"loc":{"start":{"line":50,"column":33},"end":{"line":52,"column":5}},"line":50},"9":{"name":"(anonymous_9)","decl":{"start":{"line":53,"column":20},"end":{"line":53,"column":21}},"loc":{"start":{"line":53,"column":27},"end":{"line":55,"column":5}},"line":53},"10":{"name":"(anonymous_10)","decl":{"start":{"line":74,"column":19},"end":{"line":74,"column":20}},"loc":{"start":{"line":74,"column":26},"end":{"line":76,"column":1}},"line":74},"11":{"name":"(anonymous_11)","decl":{"start":{"line":78,"column":19},"end":{"line":78,"column":20}},"loc":{"start":{"line":78,"column":26},"end":{"line":80,"column":1}},"line":78},"12":{"name":"(anonymous_12)","decl":{"start":{"line":82,"column":21},"end":{"line":82,"column":22}},"loc":{"start":{"line":82,"column":28},"end":{"line":84,"column":1}},"line":82},"13":{"name":"(anonymous_13)","decl":{"start":{"line":86,"column":19},"end":{"line":86,"column":20}},"loc":{"start":{"line":86,"column":26},"end":{"line":88,"column":1}},"line":86},"14":{"name":"(anonymous_14)","decl":{"start":{"line":90,"column":19},"end":{"line":90,"column":20}},"loc":{"start":{"line":90,"column":26},"end":{"line":92,"column":1}},"line":90},"15":{"name":"(anonymous_15)","decl":{"start":{"line":94,"column":17},"end":{"line":94,"column":18}},"loc":{"start":{"line":94,"column":24},"end":{"line":96,"column":1}},"line":94},"16":{"name":"(anonymous_16)","decl":{"start":{"line":98,"column":20},"end":{"line":98,"column":21}},"loc":{"start":{"line":98,"column":27},"end":{"line":100,"column":1}},"line":98},"17":{"name":"(anonymous_17)","decl":{"start":{"line":102,"column":18},"end":{"line":102,"column":19}},"loc":{"start":{"line":102,"column":37},"end":{"line":110,"column":1}},"line":102},"18":{"name":"(anonymous_18)","decl":{"start":{"line":103,"column":11},"end":{"line":103,"column":12}},"loc":{"start":{"line":103,"column":18},"end":{"line":109,"column":5}},"line":103},"19":{"name":"(anonymous_19)","decl":{"start":{"line":111,"column":19},"end":{"line":111,"column":20}},"loc":{"start":{"line":111,"column":43},"end":{"line":124,"column":1}},"line":111},"20":{"name":"(anonymous_20)","decl":{"start":{"line":114,"column":15},"end":{"line":114,"column":16}},"loc":{"start":{"line":114,"column":22},"end":{"line":116,"column":9}},"line":114},"21":{"name":"(anonymous_21)","decl":{"start":{"line":119,"column":15},"end":{"line":119,"column":16}},"loc":{"start":{"line":119,"column":22},"end":{"line":122,"column":9}},"line":119},"22":{"name":"(anonymous_22)","decl":{"start":{"line":126,"column":20},"end":{"line":126,"column":21}},"loc":{"start":{"line":126,"column":31},"end":{"line":130,"column":1}},"line":126},"23":{"name":"(anonymous_23)","decl":{"start":{"line":127,"column":11},"end":{"line":127,"column":12}},"loc":{"start":{"line":127,"column":18},"end":{"line":129,"column":5}},"line":127},"24":{"name":"(anonymous_24)","decl":{"start":{"line":132,"column":20},"end":{"line":132,"column":21}},"loc":{"start":{"line":132,"column":38},"end":{"line":144,"column":1}},"line":132},"25":{"name":"(anonymous_25)","decl":{"start":{"line":133,"column":11},"end":{"line":133,"column":12}},"loc":{"start":{"line":133,"column":18},"end":{"line":143,"column":5}},"line":133},"26":{"name":"(anonymous_26)","decl":{"start":{"line":148,"column":19},"end":{"line":148,"column":20}},"loc":{"start":{"line":148,"column":59},"end":{"line":162,"column":1}},"line":148},"27":{"name":"(anonymous_27)","decl":{"start":{"line":149,"column":11},"end":{"line":149,"column":12}},"loc":{"start":{"line":149,"column":18},"end":{"line":161,"column":5}},"line":149},"28":{"name":"(anonymous_28)","decl":{"start":{"line":163,"column":32},"end":{"line":163,"column":33}},"loc":{"start":{"line":163,"column":38},"end":{"line":168,"column":1}},"line":163},"29":{"name":"(anonymous_29)","decl":{"start":{"line":171,"column":45},"end":{"line":171,"column":46}},"loc":{"start":{"line":171,"column":51},"end":{"line":174,"column":1}},"line":171},"30":{"name":"(anonymous_30)","decl":{"start":{"line":175,"column":26},"end":{"line":175,"column":27}},"loc":{"start":{"line":175,"column":39},"end":{"line":198,"column":1}},"line":175},"31":{"name":"(anonymous_31)","decl":{"start":{"line":200,"column":17},"end":{"line":200,"column":18}},"loc":{"start":{"line":200,"column":24},"end":{"line":204,"column":1}},"line":200},"32":{"name":"(anonymous_32)","decl":{"start":{"line":205,"column":19},"end":{"line":205,"column":20}},"loc":{"start":{"line":205,"column":26},"end":{"line":207,"column":1}},"line":205},"33":{"name":"(anonymous_33)","decl":{"start":{"line":208,"column":22},"end":{"line":208,"column":23}},"loc":{"start":{"line":208,"column":28},"end":{"line":213,"column":1}},"line":208},"34":{"name":"(anonymous_34)","decl":{"start":{"line":215,"column":21},"end":{"line":215,"column":22}},"loc":{"start":{"line":215,"column":28},"end":{"line":219,"column":1}},"line":215},"35":{"name":"(anonymous_35)","decl":{"start":{"line":220,"column":26},"end":{"line":220,"column":27}},"loc":{"start":{"line":220,"column":32},"end":{"line":222,"column":1}},"line":220},"36":{"name":"(anonymous_36)","decl":{"start":{"line":227,"column":20},"end":{"line":227,"column":21}},"loc":{"start":{"line":227,"column":27},"end":{"line":232,"column":1}},"line":227},"37":{"name":"(anonymous_37)","decl":{"start":{"line":233,"column":25},"end":{"line":233,"column":26}},"loc":{"start":{"line":233,"column":31},"end":{"line":235,"column":1}},"line":233},"38":{"name":"(anonymous_38)","decl":{"start":{"line":237,"column":22},"end":{"line":237,"column":23}},"loc":{"start":{"line":237,"column":29},"end":{"line":243,"column":1}},"line":237},"39":{"name":"(anonymous_39)","decl":{"start":{"line":244,"column":23},"end":{"line":244,"column":24}},"loc":{"start":{"line":244,"column":29},"end":{"line":247,"column":1}},"line":244},"40":{"name":"(anonymous_40)","decl":{"start":{"line":248,"column":24},"end":{"line":248,"column":25}},"loc":{"start":{"line":248,"column":30},"end":{"line":250,"column":1}},"line":248},"41":{"name":"(anonymous_41)","decl":{"start":{"line":251,"column":23},"end":{"line":251,"column":24}},"loc":{"start":{"line":251,"column":38},"end":{"line":253,"column":1}},"line":251},"42":{"name":"(anonymous_42)","decl":{"start":{"line":254,"column":27},"end":{"line":254,"column":28}},"loc":{"start":{"line":254,"column":33},"end":{"line":258,"column":1}},"line":254},"43":{"name":"(anonymous_43)","decl":{"start":{"line":259,"column":31},"end":{"line":259,"column":32}},"loc":{"start":{"line":259,"column":37},"end":{"line":262,"column":1}},"line":259},"44":{"name":"(anonymous_44)","decl":{"start":{"line":263,"column":30},"end":{"line":263,"column":31}},"loc":{"start":{"line":263,"column":36},"end":{"line":268,"column":1}},"line":263},"45":{"name":"(anonymous_45)","decl":{"start":{"line":270,"column":22},"end":{"line":270,"column":23}},"loc":{"start":{"line":270,"column":29},"end":{"line":275,"column":1}},"line":270},"46":{"name":"(anonymous_46)","decl":{"start":{"line":276,"column":27},"end":{"line":276,"column":28}},"loc":{"start":{"line":276,"column":33},"end":{"line":276,"column":93}},"line":276},"47":{"name":"(anonymous_47)","decl":{"start":{"line":278,"column":23},"end":{"line":278,"column":24}},"loc":{"start":{"line":278,"column":30},"end":{"line":282,"column":1}},"line":278},"48":{"name":"(anonymous_48)","decl":{"start":{"line":283,"column":28},"end":{"line":283,"column":29}},"loc":{"start":{"line":283,"column":34},"end":{"line":283,"column":96}},"line":283},"49":{"name":"(anonymous_49)","decl":{"start":{"line":285,"column":25},"end":{"line":285,"column":26}},"loc":{"start":{"line":285,"column":32},"end":{"line":289,"column":1}},"line":285},"50":{"name":"(anonymous_50)","decl":{"start":{"line":290,"column":30},"end":{"line":290,"column":31}},"loc":{"start":{"line":290,"column":36},"end":{"line":290,"column":102}},"line":290},"51":{"name":"(anonymous_51)","decl":{"start":{"line":292,"column":26},"end":{"line":292,"column":27}},"loc":{"start":{"line":292,"column":33},"end":{"line":296,"column":1}},"line":292},"52":{"name":"(anonymous_52)","decl":{"start":{"line":297,"column":31},"end":{"line":297,"column":32}},"loc":{"start":{"line":297,"column":37},"end":{"line":297,"column":105}},"line":297},"53":{"name":"(anonymous_53)","decl":{"start":{"line":299,"column":21},"end":{"line":299,"column":22}},"loc":{"start":{"line":299,"column":28},"end":{"line":303,"column":1}},"line":299},"54":{"name":"(anonymous_54)","decl":{"start":{"line":304,"column":26},"end":{"line":304,"column":27}},"loc":{"start":{"line":304,"column":32},"end":{"line":304,"column":117}},"line":304},"55":{"name":"(anonymous_55)","decl":{"start":{"line":306,"column":28},"end":{"line":306,"column":29}},"loc":{"start":{"line":306,"column":40},"end":{"line":308,"column":1}},"line":306},"56":{"name":"(anonymous_56)","decl":{"start":{"line":313,"column":20},"end":{"line":313,"column":21}},"loc":{"start":{"line":313,"column":27},"end":{"line":320,"column":1}},"line":313},"57":{"name":"(anonymous_57)","decl":{"start":{"line":321,"column":27},"end":{"line":321,"column":28}},"loc":{"start":{"line":321,"column":33},"end":{"line":321,"column":89}},"line":321},"58":{"name":"(anonymous_58)","decl":{"start":{"line":323,"column":22},"end":{"line":323,"column":23}},"loc":{"start":{"line":323,"column":29},"end":{"line":327,"column":1}},"line":323},"59":{"name":"(anonymous_59)","decl":{"start":{"line":328,"column":27},"end":{"line":328,"column":28}},"loc":{"start":{"line":328,"column":33},"end":{"line":328,"column":101}},"line":328},"60":{"name":"(anonymous_60)","decl":{"start":{"line":330,"column":19},"end":{"line":330,"column":20}},"loc":{"start":{"line":330,"column":26},"end":{"line":334,"column":1}},"line":330},"61":{"name":"(anonymous_61)","decl":{"start":{"line":335,"column":24},"end":{"line":335,"column":25}},"loc":{"start":{"line":335,"column":30},"end":{"line":335,"column":92}},"line":335},"62":{"name":"(anonymous_62)","decl":{"start":{"line":337,"column":24},"end":{"line":337,"column":25}},"loc":{"start":{"line":337,"column":31},"end":{"line":341,"column":1}},"line":337},"63":{"name":"(anonymous_63)","decl":{"start":{"line":342,"column":29},"end":{"line":342,"column":30}},"loc":{"start":{"line":342,"column":35},"end":{"line":342,"column":107}},"line":342},"64":{"name":"(anonymous_64)","decl":{"start":{"line":344,"column":19},"end":{"line":344,"column":20}},"loc":{"start":{"line":344,"column":26},"end":{"line":348,"column":1}},"line":344},"65":{"name":"(anonymous_65)","decl":{"start":{"line":349,"column":24},"end":{"line":349,"column":25}},"loc":{"start":{"line":349,"column":30},"end":{"line":349,"column":92}},"line":349},"66":{"name":"(anonymous_66)","decl":{"start":{"line":351,"column":31},"end":{"line":351,"column":32}},"loc":{"start":{"line":351,"column":43},"end":{"line":353,"column":1}},"line":351},"67":{"name":"(anonymous_67)","decl":{"start":{"line":354,"column":31},"end":{"line":354,"column":32}},"loc":{"start":{"line":354,"column":38},"end":{"line":356,"column":1}},"line":354},"68":{"name":"(anonymous_68)","decl":{"start":{"line":358,"column":24},"end":{"line":358,"column":25}},"loc":{"start":{"line":358,"column":31},"end":{"line":362,"column":1}},"line":358},"69":{"name":"(anonymous_69)","decl":{"start":{"line":363,"column":29},"end":{"line":363,"column":30}},"loc":{"start":{"line":363,"column":35},"end":{"line":363,"column":107}},"line":363},"70":{"name":"(anonymous_70)","decl":{"start":{"line":374,"column":20},"end":{"line":374,"column":21}},"loc":{"start":{"line":374,"column":27},"end":{"line":383,"column":1}},"line":374},"71":{"name":"(anonymous_71)","decl":{"start":{"line":384,"column":25},"end":{"line":384,"column":26}},"loc":{"start":{"line":384,"column":31},"end":{"line":384,"column":95}},"line":384},"72":{"name":"(anonymous_72)","decl":{"start":{"line":386,"column":31},"end":{"line":386,"column":32}},"loc":{"start":{"line":386,"column":38},"end":{"line":390,"column":1}},"line":386},"73":{"name":"(anonymous_73)","decl":{"start":{"line":388,"column":16},"end":{"line":388,"column":17}},"loc":{"start":{"line":388,"column":23},"end":{"line":388,"column":39}},"line":388},"74":{"name":"(anonymous_74)","decl":{"start":{"line":391,"column":36},"end":{"line":391,"column":37}},"loc":{"start":{"line":391,"column":42},"end":{"line":391,"column":128}},"line":391},"75":{"name":"(anonymous_75)","decl":{"start":{"line":392,"column":32},"end":{"line":392,"column":33}},"loc":{"start":{"line":392,"column":39},"end":{"line":402,"column":1}},"line":392},"76":{"name":"(anonymous_76)","decl":{"start":{"line":415,"column":28},"end":{"line":415,"column":29}},"loc":{"start":{"line":415,"column":35},"end":{"line":420,"column":1}},"line":415},"77":{"name":"(anonymous_77)","decl":{"start":{"line":421,"column":33},"end":{"line":421,"column":34}},"loc":{"start":{"line":421,"column":39},"end":{"line":421,"column":119}},"line":421},"78":{"name":"(anonymous_78)","decl":{"start":{"line":424,"column":27},"end":{"line":424,"column":28}},"loc":{"start":{"line":424,"column":34},"end":{"line":426,"column":1}},"line":424},"79":{"name":"(anonymous_79)","decl":{"start":{"line":427,"column":32},"end":{"line":427,"column":33}},"loc":{"start":{"line":427,"column":38},"end":{"line":427,"column":116}},"line":427},"80":{"name":"(anonymous_80)","decl":{"start":{"line":429,"column":35},"end":{"line":429,"column":36}},"loc":{"start":{"line":429,"column":42},"end":{"line":431,"column":1}},"line":429},"81":{"name":"(anonymous_81)","decl":{"start":{"line":432,"column":40},"end":{"line":432,"column":41}},"loc":{"start":{"line":432,"column":46},"end":{"line":432,"column":140}},"line":432},"82":{"name":"(anonymous_82)","decl":{"start":{"line":443,"column":33},"end":{"line":443,"column":34}},"loc":{"start":{"line":443,"column":40},"end":{"line":458,"column":1}},"line":443},"83":{"name":"(anonymous_83)","decl":{"start":{"line":460,"column":38},"end":{"line":460,"column":39}},"loc":{"start":{"line":460,"column":44},"end":{"line":460,"column":134}},"line":460},"84":{"name":"(anonymous_84)","decl":{"start":{"line":463,"column":36},"end":{"line":463,"column":37}},"loc":{"start":{"line":463,"column":43},"end":{"line":465,"column":1}},"line":463},"85":{"name":"(anonymous_85)","decl":{"start":{"line":466,"column":50},"end":{"line":466,"column":51}},"loc":{"start":{"line":466,"column":57},"end":{"line":468,"column":1}},"line":466},"86":{"name":"(anonymous_86)","decl":{"start":{"line":469,"column":41},"end":{"line":469,"column":42}},"loc":{"start":{"line":469,"column":47},"end":{"line":469,"column":143}},"line":469},"87":{"name":"(anonymous_87)","decl":{"start":{"line":470,"column":28},"end":{"line":470,"column":29}},"loc":{"start":{"line":470,"column":35},"end":{"line":476,"column":1}},"line":470},"88":{"name":"(anonymous_88)","decl":{"start":{"line":478,"column":33},"end":{"line":478,"column":34}},"loc":{"start":{"line":478,"column":39},"end":{"line":478,"column":119}},"line":478},"89":{"name":"(anonymous_89)","decl":{"start":{"line":479,"column":21},"end":{"line":479,"column":22}},"loc":{"start":{"line":479,"column":28},"end":{"line":481,"column":1}},"line":479},"90":{"name":"(anonymous_90)","decl":{"start":{"line":483,"column":26},"end":{"line":483,"column":27}},"loc":{"start":{"line":483,"column":32},"end":{"line":483,"column":98}},"line":483},"91":{"name":"(anonymous_91)","decl":{"start":{"line":484,"column":25},"end":{"line":484,"column":26}},"loc":{"start":{"line":484,"column":32},"end":{"line":486,"column":1}},"line":484},"92":{"name":"(anonymous_92)","decl":{"start":{"line":487,"column":23},"end":{"line":487,"column":24}},"loc":{"start":{"line":487,"column":30},"end":{"line":493,"column":1}},"line":487},"93":{"name":"(anonymous_93)","decl":{"start":{"line":495,"column":30},"end":{"line":495,"column":31}},"loc":{"start":{"line":495,"column":36},"end":{"line":505,"column":1}},"line":495},"94":{"name":"(anonymous_94)","decl":{"start":{"line":508,"column":22},"end":{"line":508,"column":23}},"loc":{"start":{"line":508,"column":31},"end":{"line":512,"column":1}},"line":508},"95":{"name":"(anonymous_95)","decl":{"start":{"line":509,"column":40},"end":{"line":509,"column":41}},"loc":{"start":{"line":509,"column":45},"end":{"line":511,"column":5}},"line":509},"96":{"name":"(anonymous_96)","decl":{"start":{"line":513,"column":22},"end":{"line":513,"column":23}},"loc":{"start":{"line":513,"column":29},"end":{"line":519,"column":1}},"line":513},"97":{"name":"(anonymous_97)","decl":{"start":{"line":515,"column":14},"end":{"line":515,"column":15}},"loc":{"start":{"line":515,"column":24},"end":{"line":517,"column":5}},"line":515},"98":{"name":"(anonymous_98)","decl":{"start":{"line":520,"column":27},"end":{"line":520,"column":28}},"loc":{"start":{"line":520,"column":34},"end":{"line":525,"column":1}},"line":520},"99":{"name":"(anonymous_99)","decl":{"start":{"line":526,"column":24},"end":{"line":526,"column":25}},"loc":{"start":{"line":526,"column":31},"end":{"line":531,"column":1}},"line":526},"100":{"name":"(anonymous_100)","decl":{"start":{"line":532,"column":24},"end":{"line":532,"column":25}},"loc":{"start":{"line":532,"column":31},"end":{"line":537,"column":1}},"line":532},"101":{"name":"(anonymous_101)","decl":{"start":{"line":539,"column":29},"end":{"line":539,"column":30}},"loc":{"start":{"line":539,"column":35},"end":{"line":539,"column":63}},"line":539},"102":{"name":"(anonymous_102)","decl":{"start":{"line":540,"column":30},"end":{"line":540,"column":31}},"loc":{"start":{"line":540,"column":37},"end":{"line":545,"column":1}},"line":540},"103":{"name":"(anonymous_103)","decl":{"start":{"line":548,"column":35},"end":{"line":548,"column":36}},"loc":{"start":{"line":548,"column":41},"end":{"line":551,"column":1}},"line":548},"104":{"name":"(anonymous_104)","decl":{"start":{"line":552,"column":31},"end":{"line":552,"column":32}},"loc":{"start":{"line":552,"column":38},"end":{"line":556,"column":1}},"line":552},"105":{"name":"(anonymous_105)","decl":{"start":{"line":557,"column":36},"end":{"line":557,"column":37}},"loc":{"start":{"line":557,"column":42},"end":{"line":559,"column":1}},"line":557},"106":{"name":"(anonymous_106)","decl":{"start":{"line":560,"column":29},"end":{"line":560,"column":30}},"loc":{"start":{"line":560,"column":36},"end":{"line":562,"column":1}},"line":560},"107":{"name":"(anonymous_107)","decl":{"start":{"line":564,"column":34},"end":{"line":564,"column":35}},"loc":{"start":{"line":564,"column":40},"end":{"line":564,"column":122}},"line":564},"108":{"name":"(anonymous_108)","decl":{"start":{"line":570,"column":25},"end":{"line":570,"column":26}},"loc":{"start":{"line":570,"column":32},"end":{"line":576,"column":1}},"line":570},"109":{"name":"(anonymous_109)","decl":{"start":{"line":577,"column":30},"end":{"line":577,"column":31}},"loc":{"start":{"line":577,"column":36},"end":{"line":577,"column":110}},"line":577},"110":{"name":"(anonymous_110)","decl":{"start":{"line":578,"column":24},"end":{"line":578,"column":25}},"loc":{"start":{"line":578,"column":49},"end":{"line":580,"column":1}},"line":578},"111":{"name":"(anonymous_111)","decl":{"start":{"line":581,"column":26},"end":{"line":581,"column":27}},"loc":{"start":{"line":581,"column":33},"end":{"line":588,"column":1}},"line":581},"112":{"name":"(anonymous_112)","decl":{"start":{"line":590,"column":31},"end":{"line":590,"column":32}},"loc":{"start":{"line":590,"column":37},"end":{"line":592,"column":1}},"line":590},"113":{"name":"(anonymous_113)","decl":{"start":{"line":593,"column":27},"end":{"line":593,"column":28}},"loc":{"start":{"line":593,"column":34},"end":{"line":595,"column":1}},"line":593},"114":{"name":"(anonymous_114)","decl":{"start":{"line":596,"column":30},"end":{"line":596,"column":31}},"loc":{"start":{"line":596,"column":37},"end":{"line":598,"column":1}},"line":596},"115":{"name":"(anonymous_115)","decl":{"start":{"line":599,"column":27},"end":{"line":599,"column":28}},"loc":{"start":{"line":599,"column":34},"end":{"line":601,"column":1}},"line":599},"116":{"name":"(anonymous_116)","decl":{"start":{"line":602,"column":27},"end":{"line":602,"column":28}},"loc":{"start":{"line":602,"column":34},"end":{"line":608,"column":1}},"line":602},"117":{"name":"(anonymous_117)","decl":{"start":{"line":615,"column":32},"end":{"line":615,"column":33}},"loc":{"start":{"line":615,"column":38},"end":{"line":615,"column":116}},"line":615},"118":{"name":"(anonymous_118)","decl":{"start":{"line":616,"column":22},"end":{"line":616,"column":23}},"loc":{"start":{"line":616,"column":29},"end":{"line":620,"column":1}},"line":616},"119":{"name":"(anonymous_119)","decl":{"start":{"line":621,"column":26},"end":{"line":621,"column":27}},"loc":{"start":{"line":621,"column":32},"end":{"line":623,"column":1}},"line":621},"120":{"name":"(anonymous_120)","decl":{"start":{"line":624,"column":27},"end":{"line":624,"column":28}},"loc":{"start":{"line":624,"column":33},"end":{"line":624,"column":102}},"line":624},"121":{"name":"(anonymous_121)","decl":{"start":{"line":625,"column":37},"end":{"line":625,"column":38}},"loc":{"start":{"line":625,"column":44},"end":{"line":629,"column":1}},"line":625},"122":{"name":"(anonymous_122)","decl":{"start":{"line":630,"column":33},"end":{"line":630,"column":34}},"loc":{"start":{"line":630,"column":40},"end":{"line":637,"column":1}},"line":630},"123":{"name":"(anonymous_123)","decl":{"start":{"line":644,"column":38},"end":{"line":644,"column":39}},"loc":{"start":{"line":644,"column":44},"end":{"line":644,"column":134}},"line":644},"124":{"name":"(anonymous_124)","decl":{"start":{"line":645,"column":34},"end":{"line":645,"column":35}},"loc":{"start":{"line":645,"column":41},"end":{"line":649,"column":1}},"line":645},"125":{"name":"(anonymous_125)","decl":{"start":{"line":650,"column":39},"end":{"line":650,"column":40}},"loc":{"start":{"line":650,"column":45},"end":{"line":652,"column":1}},"line":650},"126":{"name":"(anonymous_126)","decl":{"start":{"line":653,"column":24},"end":{"line":653,"column":25}},"loc":{"start":{"line":653,"column":31},"end":{"line":657,"column":1}},"line":653},"127":{"name":"(anonymous_127)","decl":{"start":{"line":659,"column":29},"end":{"line":659,"column":30}},"loc":{"start":{"line":659,"column":35},"end":{"line":659,"column":107}},"line":659},"128":{"name":"(anonymous_128)","decl":{"start":{"line":660,"column":41},"end":{"line":660,"column":42}},"loc":{"start":{"line":660,"column":48},"end":{"line":667,"column":1}},"line":660},"129":{"name":"(anonymous_129)","decl":{"start":{"line":668,"column":37},"end":{"line":668,"column":38}},"loc":{"start":{"line":668,"column":44},"end":{"line":673,"column":1}},"line":668},"130":{"name":"(anonymous_130)","decl":{"start":{"line":686,"column":42},"end":{"line":686,"column":43}},"loc":{"start":{"line":686,"column":48},"end":{"line":688,"column":1}},"line":686},"131":{"name":"(anonymous_131)","decl":{"start":{"line":689,"column":27},"end":{"line":689,"column":28}},"loc":{"start":{"line":689,"column":39},"end":{"line":695,"column":1}},"line":689}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":14,"column":4},"end":{"line":15,"column":21}},"type":"if","locations":[{"start":{"line":14,"column":4},"end":{"line":15,"column":21}},{"start":{"line":14,"column":4},"end":{"line":15,"column":21}}],"line":14},"4":{"loc":{"start":{"line":23,"column":4},"end":{"line":24,"column":21}},"type":"if","locations":[{"start":{"line":23,"column":4},"end":{"line":24,"column":21}},{"start":{"line":23,"column":4},"end":{"line":24,"column":21}}],"line":23},"5":{"loc":{"start":{"line":31,"column":4},"end":{"line":32,"column":21}},"type":"if","locations":[{"start":{"line":31,"column":4},"end":{"line":32,"column":21}},{"start":{"line":31,"column":4},"end":{"line":32,"column":21}}],"line":31},"6":{"loc":{"start":{"line":43,"column":4},"end":{"line":44,"column":20}},"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":44,"column":20}},{"start":{"line":43,"column":4},"end":{"line":44,"column":20}}],"line":43},"7":{"loc":{"start":{"line":48,"column":4},"end":{"line":49,"column":21}},"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":49,"column":21}},{"start":{"line":48,"column":4},"end":{"line":49,"column":21}}],"line":48},"8":{"loc":{"start":{"line":54,"column":15},"end":{"line":54,"column":173}},"type":"binary-expr","locations":[{"start":{"line":54,"column":16},"end":{"line":54,"column":26}},{"start":{"line":54,"column":32},"end":{"line":54,"column":56}},{"start":{"line":54,"column":60},"end":{"line":54,"column":81}},{"start":{"line":54,"column":85},"end":{"line":54,"column":107}},{"start":{"line":54,"column":111},"end":{"line":54,"column":132}},{"start":{"line":54,"column":136},"end":{"line":54,"column":152}},{"start":{"line":54,"column":156},"end":{"line":54,"column":172}}],"line":54},"9":{"loc":{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":58,"column":5}},{"start":{"line":56,"column":4},"end":{"line":58,"column":5}}],"line":56},"10":{"loc":{"start":{"line":60,"column":8},"end":{"line":69,"column":9}},"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":69,"column":9}},{"start":{"line":60,"column":8},"end":{"line":69,"column":9}}],"line":60},"11":{"loc":{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},"type":"if","locations":[{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},{"start":{"line":61,"column":12},"end":{"line":63,"column":13}}],"line":61},"12":{"loc":{"start":{"line":64,"column":12},"end":{"line":68,"column":13}},"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":68,"column":13}},{"start":{"line":64,"column":12},"end":{"line":68,"column":13}}],"line":64},"13":{"loc":{"start":{"line":65,"column":16},"end":{"line":67,"column":17}},"type":"if","locations":[{"start":{"line":65,"column":16},"end":{"line":67,"column":17}},{"start":{"line":65,"column":16},"end":{"line":67,"column":17}}],"line":65},"14":{"loc":{"start":{"line":75,"column":12},"end":{"line":75,"column":51}},"type":"binary-expr","locations":[{"start":{"line":75,"column":13},"end":{"line":75,"column":23}},{"start":{"line":75,"column":29},"end":{"line":75,"column":50}}],"line":75},"15":{"loc":{"start":{"line":79,"column":12},"end":{"line":79,"column":51}},"type":"binary-expr","locations":[{"start":{"line":79,"column":13},"end":{"line":79,"column":23}},{"start":{"line":79,"column":29},"end":{"line":79,"column":50}}],"line":79},"16":{"loc":{"start":{"line":83,"column":12},"end":{"line":83,"column":53}},"type":"binary-expr","locations":[{"start":{"line":83,"column":13},"end":{"line":83,"column":23}},{"start":{"line":83,"column":29},"end":{"line":83,"column":52}}],"line":83},"17":{"loc":{"start":{"line":87,"column":12},"end":{"line":87,"column":51}},"type":"binary-expr","locations":[{"start":{"line":87,"column":13},"end":{"line":87,"column":23}},{"start":{"line":87,"column":29},"end":{"line":87,"column":50}}],"line":87},"18":{"loc":{"start":{"line":91,"column":12},"end":{"line":91,"column":51}},"type":"binary-expr","locations":[{"start":{"line":91,"column":13},"end":{"line":91,"column":23}},{"start":{"line":91,"column":29},"end":{"line":91,"column":50}}],"line":91},"19":{"loc":{"start":{"line":99,"column":12},"end":{"line":99,"column":52}},"type":"binary-expr","locations":[{"start":{"line":99,"column":13},"end":{"line":99,"column":23}},{"start":{"line":99,"column":29},"end":{"line":99,"column":51}}],"line":99},"20":{"loc":{"start":{"line":105,"column":12},"end":{"line":106,"column":28}},"type":"if","locations":[{"start":{"line":105,"column":12},"end":{"line":106,"column":28}},{"start":{"line":105,"column":12},"end":{"line":106,"column":28}}],"line":105},"21":{"loc":{"start":{"line":112,"column":4},"end":{"line":123,"column":5}},"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":123,"column":5}},{"start":{"line":112,"column":4},"end":{"line":123,"column":5}}],"line":112},"22":{"loc":{"start":{"line":115,"column":20},"end":{"line":115,"column":58}},"type":"binary-expr","locations":[{"start":{"line":115,"column":21},"end":{"line":115,"column":36}},{"start":{"line":115,"column":42},"end":{"line":115,"column":57}}],"line":115},"23":{"loc":{"start":{"line":121,"column":20},"end":{"line":121,"column":74}},"type":"binary-expr","locations":[{"start":{"line":121,"column":21},"end":{"line":121,"column":36}},{"start":{"line":121,"column":42},"end":{"line":121,"column":73}}],"line":121},"24":{"loc":{"start":{"line":134,"column":8},"end":{"line":142,"column":25}},"type":"if","locations":[{"start":{"line":134,"column":8},"end":{"line":142,"column":25}},{"start":{"line":134,"column":8},"end":{"line":142,"column":25}}],"line":134},"25":{"loc":{"start":{"line":134,"column":12},"end":{"line":134,"column":46}},"type":"binary-expr","locations":[{"start":{"line":134,"column":13},"end":{"line":134,"column":23}},{"start":{"line":134,"column":29},"end":{"line":134,"column":45}}],"line":134},"26":{"loc":{"start":{"line":136,"column":16},"end":{"line":137,"column":33}},"type":"if","locations":[{"start":{"line":136,"column":16},"end":{"line":137,"column":33}},{"start":{"line":136,"column":16},"end":{"line":137,"column":33}}],"line":136},"27":{"loc":{"start":{"line":150,"column":8},"end":{"line":160,"column":25}},"type":"if","locations":[{"start":{"line":150,"column":8},"end":{"line":160,"column":25}},{"start":{"line":150,"column":8},"end":{"line":160,"column":25}}],"line":150},"28":{"loc":{"start":{"line":152,"column":16},"end":{"line":153,"column":33}},"type":"if","locations":[{"start":{"line":152,"column":16},"end":{"line":153,"column":33}},{"start":{"line":152,"column":16},"end":{"line":153,"column":33}}],"line":152},"29":{"loc":{"start":{"line":154,"column":16},"end":{"line":155,"column":33}},"type":"if","locations":[{"start":{"line":154,"column":16},"end":{"line":155,"column":33}},{"start":{"line":154,"column":16},"end":{"line":155,"column":33}}],"line":154},"30":{"loc":{"start":{"line":176,"column":4},"end":{"line":177,"column":21}},"type":"if","locations":[{"start":{"line":176,"column":4},"end":{"line":177,"column":21}},{"start":{"line":176,"column":4},"end":{"line":177,"column":21}}],"line":176},"31":{"loc":{"start":{"line":178,"column":4},"end":{"line":179,"column":21}},"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":179,"column":21}},{"start":{"line":178,"column":4},"end":{"line":179,"column":21}}],"line":178},"32":{"loc":{"start":{"line":181,"column":8},"end":{"line":182,"column":25}},"type":"if","locations":[{"start":{"line":181,"column":8},"end":{"line":182,"column":25}},{"start":{"line":181,"column":8},"end":{"line":182,"column":25}}],"line":181},"33":{"loc":{"start":{"line":186,"column":8},"end":{"line":195,"column":9}},"type":"if","locations":[{"start":{"line":186,"column":8},"end":{"line":195,"column":9}},{"start":{"line":186,"column":8},"end":{"line":195,"column":9}}],"line":186},"34":{"loc":{"start":{"line":187,"column":12},"end":{"line":188,"column":29}},"type":"if","locations":[{"start":{"line":187,"column":12},"end":{"line":188,"column":29}},{"start":{"line":187,"column":12},"end":{"line":188,"column":29}}],"line":187},"35":{"loc":{"start":{"line":191,"column":12},"end":{"line":192,"column":29}},"type":"if","locations":[{"start":{"line":191,"column":12},"end":{"line":192,"column":29}},{"start":{"line":191,"column":12},"end":{"line":192,"column":29}}],"line":191},"36":{"loc":{"start":{"line":193,"column":12},"end":{"line":194,"column":29}},"type":"if","locations":[{"start":{"line":193,"column":12},"end":{"line":194,"column":29}},{"start":{"line":193,"column":12},"end":{"line":194,"column":29}}],"line":193},"37":{"loc":{"start":{"line":201,"column":4},"end":{"line":202,"column":21}},"type":"if","locations":[{"start":{"line":201,"column":4},"end":{"line":202,"column":21}},{"start":{"line":201,"column":4},"end":{"line":202,"column":21}}],"line":201},"38":{"loc":{"start":{"line":203,"column":11},"end":{"line":203,"column":29}},"type":"binary-expr","locations":[{"start":{"line":203,"column":11},"end":{"line":203,"column":16}},{"start":{"line":203,"column":20},"end":{"line":203,"column":29}}],"line":203},"39":{"loc":{"start":{"line":216,"column":4},"end":{"line":217,"column":21}},"type":"if","locations":[{"start":{"line":216,"column":4},"end":{"line":217,"column":21}},{"start":{"line":216,"column":4},"end":{"line":217,"column":21}}],"line":216},"40":{"loc":{"start":{"line":238,"column":4},"end":{"line":239,"column":21}},"type":"if","locations":[{"start":{"line":238,"column":4},"end":{"line":239,"column":21}},{"start":{"line":238,"column":4},"end":{"line":239,"column":21}}],"line":238},"41":{"loc":{"start":{"line":240,"column":4},"end":{"line":241,"column":21}},"type":"if","locations":[{"start":{"line":240,"column":4},"end":{"line":241,"column":21}},{"start":{"line":240,"column":4},"end":{"line":241,"column":21}}],"line":240},"42":{"loc":{"start":{"line":267,"column":21},"end":{"line":267,"column":45}},"type":"binary-expr","locations":[{"start":{"line":267,"column":21},"end":{"line":267,"column":31}},{"start":{"line":267,"column":35},"end":{"line":267,"column":45}}],"line":267},"43":{"loc":{"start":{"line":271,"column":4},"end":{"line":272,"column":21}},"type":"if","locations":[{"start":{"line":271,"column":4},"end":{"line":272,"column":21}},{"start":{"line":271,"column":4},"end":{"line":272,"column":21}}],"line":271},"44":{"loc":{"start":{"line":279,"column":4},"end":{"line":280,"column":21}},"type":"if","locations":[{"start":{"line":279,"column":4},"end":{"line":280,"column":21}},{"start":{"line":279,"column":4},"end":{"line":280,"column":21}}],"line":279},"45":{"loc":{"start":{"line":286,"column":4},"end":{"line":287,"column":21}},"type":"if","locations":[{"start":{"line":286,"column":4},"end":{"line":287,"column":21}},{"start":{"line":286,"column":4},"end":{"line":287,"column":21}}],"line":286},"46":{"loc":{"start":{"line":293,"column":4},"end":{"line":294,"column":21}},"type":"if","locations":[{"start":{"line":293,"column":4},"end":{"line":294,"column":21}},{"start":{"line":293,"column":4},"end":{"line":294,"column":21}}],"line":293},"47":{"loc":{"start":{"line":300,"column":4},"end":{"line":301,"column":21}},"type":"if","locations":[{"start":{"line":300,"column":4},"end":{"line":301,"column":21}},{"start":{"line":300,"column":4},"end":{"line":301,"column":21}}],"line":300},"48":{"loc":{"start":{"line":324,"column":4},"end":{"line":325,"column":21}},"type":"if","locations":[{"start":{"line":324,"column":4},"end":{"line":325,"column":21}},{"start":{"line":324,"column":4},"end":{"line":325,"column":21}}],"line":324},"49":{"loc":{"start":{"line":331,"column":4},"end":{"line":332,"column":21}},"type":"if","locations":[{"start":{"line":331,"column":4},"end":{"line":332,"column":21}},{"start":{"line":331,"column":4},"end":{"line":332,"column":21}}],"line":331},"50":{"loc":{"start":{"line":338,"column":4},"end":{"line":339,"column":21}},"type":"if","locations":[{"start":{"line":338,"column":4},"end":{"line":339,"column":21}},{"start":{"line":338,"column":4},"end":{"line":339,"column":21}}],"line":338},"51":{"loc":{"start":{"line":345,"column":4},"end":{"line":346,"column":21}},"type":"if","locations":[{"start":{"line":345,"column":4},"end":{"line":346,"column":21}},{"start":{"line":345,"column":4},"end":{"line":346,"column":21}}],"line":345},"52":{"loc":{"start":{"line":359,"column":4},"end":{"line":360,"column":21}},"type":"if","locations":[{"start":{"line":359,"column":4},"end":{"line":360,"column":21}},{"start":{"line":359,"column":4},"end":{"line":360,"column":21}}],"line":359},"53":{"loc":{"start":{"line":444,"column":4},"end":{"line":454,"column":21}},"type":"if","locations":[{"start":{"line":444,"column":4},"end":{"line":454,"column":21}},{"start":{"line":444,"column":4},"end":{"line":454,"column":21}}],"line":444},"54":{"loc":{"start":{"line":464,"column":12},"end":{"line":464,"column":71}},"type":"binary-expr","locations":[{"start":{"line":464,"column":13},"end":{"line":464,"column":32}},{"start":{"line":464,"column":38},"end":{"line":464,"column":70}}],"line":464},"55":{"loc":{"start":{"line":485,"column":11},"end":{"line":485,"column":53}},"type":"binary-expr","locations":[{"start":{"line":485,"column":12},"end":{"line":485,"column":31}},{"start":{"line":485,"column":37},"end":{"line":485,"column":52}}],"line":485},"56":{"loc":{"start":{"line":488,"column":4},"end":{"line":492,"column":5}},"type":"if","locations":[{"start":{"line":488,"column":4},"end":{"line":492,"column":5}},{"start":{"line":488,"column":4},"end":{"line":492,"column":5}}],"line":488},"57":{"loc":{"start":{"line":582,"column":4},"end":{"line":583,"column":21}},"type":"if","locations":[{"start":{"line":582,"column":4},"end":{"line":583,"column":21}},{"start":{"line":582,"column":4},"end":{"line":583,"column":21}}],"line":582},"58":{"loc":{"start":{"line":585,"column":11},"end":{"line":587,"column":41}},"type":"binary-expr","locations":[{"start":{"line":585,"column":12},"end":{"line":585,"column":30}},{"start":{"line":586,"column":9},"end":{"line":586,"column":35}},{"start":{"line":587,"column":9},"end":{"line":587,"column":40}}],"line":585},"59":{"loc":{"start":{"line":617,"column":4},"end":{"line":618,"column":21}},"type":"if","locations":[{"start":{"line":617,"column":4},"end":{"line":618,"column":21}},{"start":{"line":617,"column":4},"end":{"line":618,"column":21}}],"line":617},"60":{"loc":{"start":{"line":626,"column":4},"end":{"line":627,"column":21}},"type":"if","locations":[{"start":{"line":626,"column":4},"end":{"line":627,"column":21}},{"start":{"line":626,"column":4},"end":{"line":627,"column":21}}],"line":626},"61":{"loc":{"start":{"line":690,"column":4},"end":{"line":691,"column":67}},"type":"if","locations":[{"start":{"line":690,"column":4},"end":{"line":691,"column":67}},{"start":{"line":690,"column":4},"end":{"line":691,"column":67}}],"line":690},"62":{"loc":{"start":{"line":692,"column":4},"end":{"line":693,"column":67}},"type":"if","locations":[{"start":{"line":692,"column":4},"end":{"line":693,"column":67}},{"start":{"line":692,"column":4},"end":{"line":693,"column":67}}],"line":692}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":1,"15":0,"16":1,"17":1,"18":0,"19":0,"20":0,"21":1,"22":0,"23":1,"24":3,"25":1,"26":2,"27":1,"28":2,"29":2,"30":1,"31":1,"32":0,"33":1,"34":1,"35":10,"36":1,"37":9,"38":9,"39":9,"40":24,"41":9,"42":0,"43":9,"44":15,"45":15,"46":0,"47":15,"48":6,"49":0,"50":9,"51":1,"52":16,"53":1,"54":13,"55":1,"56":2,"57":1,"58":4,"59":1,"60":2,"61":1,"62":2,"63":1,"64":8,"65":1,"66":1,"67":3,"68":5,"69":2,"70":1,"71":1,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":1,"80":1,"81":2,"82":1,"83":1,"84":3,"85":2,"86":8,"87":1,"88":1,"89":1,"90":1,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":1,"101":0,"102":0,"103":0,"104":1,"105":0,"106":0,"107":1,"108":2,"109":1,"110":1,"111":1,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":1,"126":1,"127":0,"128":0,"129":0,"130":1,"131":0,"132":1,"133":0,"134":0,"135":0,"136":0,"137":1,"138":1,"139":0,"140":0,"141":0,"142":1,"143":0,"144":1,"145":1,"146":0,"147":1,"148":0,"149":1,"150":1,"151":0,"152":0,"153":0,"154":0,"155":0,"156":1,"157":2,"158":2,"159":1,"160":0,"161":1,"162":0,"163":1,"164":0,"165":0,"166":0,"167":1,"168":0,"169":0,"170":1,"171":0,"172":0,"173":0,"174":0,"175":1,"176":1,"177":0,"178":0,"179":0,"180":1,"181":0,"182":1,"183":1,"184":0,"185":0,"186":0,"187":1,"188":0,"189":1,"190":1,"191":0,"192":0,"193":0,"194":1,"195":0,"196":1,"197":1,"198":0,"199":0,"200":0,"201":1,"202":0,"203":1,"204":1,"205":0,"206":0,"207":0,"208":1,"209":0,"210":1,"211":0,"212":1,"213":1,"214":0,"215":1,"216":0,"217":1,"218":1,"219":0,"220":0,"221":0,"222":1,"223":0,"224":1,"225":1,"226":0,"227":0,"228":0,"229":1,"230":0,"231":1,"232":1,"233":0,"234":0,"235":0,"236":1,"237":0,"238":1,"239":1,"240":0,"241":0,"242":0,"243":1,"244":0,"245":1,"246":0,"247":1,"248":0,"249":1,"250":1,"251":0,"252":0,"253":0,"254":1,"255":0,"256":1,"257":1,"258":0,"259":1,"260":0,"261":1,"262":1,"263":0,"264":0,"265":1,"266":0,"267":1,"268":0,"269":1,"270":1,"271":0,"272":1,"273":0,"274":1,"275":1,"276":0,"277":1,"278":0,"279":1,"280":1,"281":0,"282":1,"283":0,"284":1,"285":1,"286":0,"287":0,"288":0,"289":1,"290":0,"291":1,"292":1,"293":0,"294":1,"295":0,"296":1,"297":0,"298":1,"299":0,"300":1,"301":1,"302":0,"303":1,"304":0,"305":1,"306":1,"307":0,"308":1,"309":1,"310":1,"311":1,"312":1,"313":0,"314":1,"315":1,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":1,"323":0,"324":0,"325":1,"326":0,"327":0,"328":0,"329":0,"330":1,"331":0,"332":1,"333":0,"334":1,"335":0,"336":1,"337":0,"338":1,"339":0,"340":1,"341":1,"342":1,"343":0,"344":0,"345":1,"346":0,"347":1,"348":0,"349":1,"350":0,"351":1,"352":1,"353":0,"354":1,"355":1,"356":0,"357":1,"358":0,"359":1,"360":1,"361":1,"362":0,"363":0,"364":0,"365":0,"366":1,"367":1,"368":0,"369":1,"370":0,"371":1,"372":0,"373":1,"374":0,"375":1,"376":0,"377":1,"378":1,"379":0,"380":1,"381":0,"382":0,"383":0,"384":1,"385":0,"386":1,"387":0,"388":1,"389":0,"390":0,"391":0,"392":1,"393":0,"394":1,"395":1,"396":0,"397":1,"398":0,"399":1,"400":0,"401":1,"402":0,"403":1,"404":1,"405":0,"406":1,"407":0,"408":1,"409":0,"410":1,"411":1,"412":0,"413":1,"414":0,"415":0,"416":0,"417":0,"418":0},"f":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":3,"6":2,"7":10,"8":9,"9":24,"10":16,"11":13,"12":2,"13":4,"14":2,"15":2,"16":8,"17":1,"18":3,"19":0,"20":0,"21":0,"22":1,"23":2,"24":1,"25":3,"26":0,"27":0,"28":0,"29":0,"30":2,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":2,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":1,"92":1,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":1,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0,0],"4":[0,0],"5":[1,2],"6":[0,1],"7":[1,9],"8":[24,24,24,18,18,15,9],"9":[0,9],"10":[15,0],"11":[0,15],"12":[6,9],"13":[0,6],"14":[16,16],"15":[13,13],"16":[2,2],"17":[4,4],"18":[2,2],"19":[8,8],"20":[2,3],"21":[0,0],"22":[0,0],"23":[0,0],"24":[2,1],"25":[3,3],"26":[1,7],"27":[0,0],"28":[0,0],"29":[0,0],"30":[1,1],"31":[1,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[1,1],"56":[1,0],"57":[0,0],"58":[0,0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/core.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/interfaces/core.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert'\nimport { hexToPublicKey, JSONStringifyDeterministic } from \"../common/crypto_util\";\nimport { randomAlphaString } from \"../common/util\";\nimport { AnnounceRequestData, isAnnounceRequestData, isAnnounceResponseData } from \"./NodeToNodeRequest\";\n\nexport const _tests: {[key: string]: Function} = {}\n\nexport interface ProtocolVersion extends String {\n    __protocolVersion__: never // phantom type\n}\nexport const exampleProtocolVersion: ProtocolVersion = \"example-protocol.Version\" as any as ProtocolVersion\nexport const isProtocolVersion = (x: any): x is ProtocolVersion => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-zA-z.\\ \\-]{4,30}?$/.test(x));\n}\n_tests.ProtocolVersion = () => {\n    assert(isProtocolVersion(exampleProtocolVersion))\n}\n\nexport interface DaemonVersion extends String {\n    __daemonVersion__: never // phantom\n}\nexport const exampleDaemonVersion: DaemonVersion = \"example-daemon.Version\" as any as DaemonVersion\nexport const isDaemonVersion = (x: any): x is DaemonVersion => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-zA-z\\.\\ \\-]{4,40}?$/.test(x));\n}\n_tests.DaemonVersion = () => {\n    assert(isDaemonVersion(exampleDaemonVersion))\n}\n\nexport type JSONPrimitive = string | number | boolean | null;\nexport type JSONValue = JSONPrimitive | JSONObject | JSONArray;\nexport type JSONObject = { [member: string]: JSONValue };\nexport interface JSONArray extends Array<JSONValue> {}\nexport const isJSONObject = (x: any): x is JSONObject => {\n    if (!isObject(x)) return false;\n    return isJSONSerializable(x);\n}\nexport const tryParseJsonObject = (x: string): JSONObject | null => {\n    let a: any;\n    try {\n        a = JSON.parse(x);\n    }\n    catch {\n        return null;\n    }\n    if (!isJSONObject(a)) return null;\n    return a;\n}\nexport const isJSONSerializable = (obj: any): boolean => {\n    if (!isObject(obj)) return false\n    const isPlainObject = (a: Object) => {\n        return Object.prototype.toString.call(a) === '[object Object]';\n    };\n    const isPlain = (a: any) => {\n      return (a === null) || (typeof a === 'undefined' || typeof a === 'string' || typeof a === 'boolean' || typeof a === 'number' || Array.isArray(a) || isPlainObject(a));\n    }\n    if (!isPlain(obj)) {\n      return false;\n    }\n    for (let property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        if (!isPlain(obj[property])) {\n          return false;\n        }\n        if (typeof obj[property] === \"object\") {\n          if (!isJSONSerializable(obj[property])) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n}\n\n// object\nexport const isObject = (x: any): x is Object => {\n    return ((x !== null) && (typeof x === 'object'));\n}\n\n// string\nexport const isString = (x: any): x is string => {\n    return ((x !== null) && (typeof x === 'string'));\n}\n\n// function\nexport const isFunction = (x: any): x is Function => {\n    return ((x !== null) && (typeof x === 'function'));\n}\n\n// number\nexport const isNumber = (x: any): x is number => {\n    return ((x !== null) && (typeof x === 'number'));\n}\n\n// bigint\nexport const isBigInt = (x: any): x is bigint => {\n    return ((x !== null) && (typeof x === 'bigint'));\n}\n\n// null\nexport const isNull = (x: any): x is null => {\n    return x === null;\n}\n\n// boolean\nexport const isBoolean = (x: any): x is boolean => {\n    return ((x !== null) && (typeof x === 'boolean'));\n}\n\n// isOneOf\nexport const isOneOf = (testFunctions: Function[]): ((x: any) => boolean) => {\n    return (x) => {\n        for (let tf of testFunctions) {\n            if (tf(x)) return true;\n        }\n        return false;\n    }\n}\n\nexport const optional = (testFunctionOrSpec: Function | ValidateObjectSpec): ((x: any) => boolean) => {\n    if (isFunction(testFunctionOrSpec)) {\n        const testFunction: Function = testFunctionOrSpec\n        return (x) => {\n            return ((x === undefined) || (testFunction(x)));\n        }\n    }\n    else {\n        return (x) => {\n            const obj: ValidateObjectSpec = testFunctionOrSpec\n            return ((x === undefined) || (_validateObject(x, obj)))\n        }\n    }   \n}\n\n// isEqualTo\nexport const isEqualTo = (value: any): ((x: any) => boolean) => {\n    return (x) => {\n        return x === value;\n    }\n}\n\n// isArrayOf\nexport const isArrayOf = (testFunction: (x: any) => boolean): ((x: any) => boolean) => {\n    return (x) => {\n        if ((x !== null) && (Array.isArray(x))) {\n            for (let a of x) {\n                if (!testFunction(a)) return false;\n            }\n            return true;\n        }\n        else return false;\n    }\n}\n\n//***** NOTE: The \"key\" test should not be needed here; Javascript converts all keys to strings\n//***** See comments in the tests below\n// isObjectOf\nconst isObjectOf = (keyTestFunction: (x: any) => boolean, valueTestFunction: (x: any) => boolean): ((x: any) => boolean) => {\n    return (x) => {\n        if (isObject(x)) {\n            for (let k in x) {\n                if (!keyTestFunction(k)) return false;\n                if (!valueTestFunction(x[k])) return false;\n            }\n            return true;\n        }\n        else return false;\n    }\n}\n_tests.testIsObjectOf = () => {\n    const isStringKeyedInts = isObjectOf(isString, isBigInt);\n    assert(isStringKeyedInts({'one': BigInt(4), 'Two': BigInt(5)}));\n    // assert(!isStringKeyedInts({1: BigInt(1), 2: BigInt(2)})); // this FAILS: any key is automatically converted to a string\n    assert(!isStringKeyedInts({'one': 1, 'two': 3.4}));\n}\n\n// NOTE: Failing test to address issue with this function\n// jfm says: I think we should not support numeric keys, because it is not json-compliant\n_tests.testIsObjectOfForNumberKeys = () => {\n    const isNumberKeyedNumber = isObjectOf(isNumber, isNumber);\n    assert(isNumberKeyedNumber({9: 5, 3.14: 159 }));\n}\n\ntype ValidateObjectSpec = {[key: string]: ValidateObjectSpec | (Function & ((a: any) => any))}\n\nexport const _validateObject = (x: any, spec: ValidateObjectSpec): boolean => {\n    if (!x) return false;\n    if (!isObject(x)) return false;\n    for (let k in x) {\n        if (!(k in spec)) return false;\n    }\n    for (let k in spec) {\n        const specK = spec[k];\n        if (isFunction(specK)) {\n            if (!specK(x[k])) return false;\n        }\n        else {\n            if (!(k in x)) return false;\n            if (!_validateObject(x[k], specK as ValidateObjectSpec)) return false;\n        }\n    }\n    return true;\n}\n\n\n// Port\nexport interface Port extends Number {\n    __port__: never\n}\nexport const examplePort: Port = 1000 as any as Port\nexport const isPort = (x: any) : x is Port => {\n    if (!isNumber(x)) return false;\n    return x > 0 && x < 65536; // port numbers must be in 16-bit positive range\n}\nexport const toNumber = (x: Port): number => {\n    return x as any as number;\n}\n_tests.Port = () => {\n    assert(isPort(examplePort));\n    assert(!isPort(-1000)); // negative\n    assert(!isPort('abc')); // not actually a number\n    assert(!isPort(65536)); // too large\n}\n\n// HostName\nexport interface HostName extends String {\n    __hostName__: never\n}\nexport const exampleHostName: HostName = '0.0.0.0' as any as HostName\nexport const isHostName = (x: any): x is HostName => {\n    if (!isString(x)) return false;\n    return (/^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/.test(x));\n}\n_tests.HostName = () => {\n    assert(isHostName(exampleHostName))\n}\n\n// Address\nexport interface Address {\n    hostName: HostName,\n    port: Port\n}\nexport const exampleAddress = {\n    hostName: exampleHostName,\n    port: examplePort\n}\nexport const isAddress = (x: any): x is Address => {\n    return _validateObject(x, {\n        hostName: isHostName,\n        port: isPort\n    });\n}\n_tests.Address = () => {\n    assert(isAddress(exampleAddress))\n}\n\n// TimeStamp\nexport interface Timestamp extends Number {\n    __timestamp__: never\n}\nexport const exampleTimestamp: Timestamp = Number(new Date(2020, 1, 1, 1, 1, 1, 0)) - 0 as any as Timestamp\nexport const isTimestamp = (x: any) : x is Timestamp => {\n    if (!isNumber(x)) return false;\n    if (x < 0) return false;  // For our purposes, timestamps should never be negative\n    return true;\n}\nexport const nowTimestamp = () => {\n    const ret = Number(new Date()) - 0\n    return ret as any as Timestamp\n}\nexport const zeroTimestamp = () => {\n    return 0 as any as Timestamp;\n}\nexport const elapsedSince = (timestamp: Timestamp) => {\n    return (nowTimestamp() as any as number) - (timestamp as any as number);\n}\n_tests.Timestamp = () => {\n    assert(isTimestamp(exampleTimestamp));\n    assert(isTimestamp(50));\n    assert(!isTimestamp(-50));\n}\n_tests.ZeroTimeStamp = () => {\n    assert(0 == (zeroTimestamp() as any as number));\n    assert(isTimestamp(zeroTimestamp())); // make sure 0 is accepted\n}\n_tests.ElapsedSince = () => {\n    const time = nowTimestamp();\n    const newTime = ((time as any as number) - 5) as any as Timestamp; // manually set back the clock 5 ms\n    const diff = elapsedSince(newTime); // should always yield 5, since these operations take <1 ms\n    assert(diff === 5 || diff === 6); // just in case we hit a ms boundary\n}\n\n// PublicKey\nexport interface PublicKey extends String {\n    __publicKey__: never // phantom type so that we cannot assign directly to a string\n}\nconst examplePublicKey: PublicKey = '-----BEGIN PUBLIC KEY-----\\nPUBLICKEYAAAAAAAAAAADt4+bJGhgtv/oQvPS03eZrEL8vYBXo0j3D7mNUM=\\n-----END PUBLIC KEY-----' as any as PublicKey\nexport const isPublicKey = (x: any) : x is PublicKey => {\n    if (!isString(x)) return false;\n     // no fixed length for actual key block\n    return (/^-----BEGIN PUBLIC KEY-----[\\s\\S]*-----END PUBLIC KEY-----$/.test(x));\n}\n_tests.PublicKey = () => { assert(isPublicKey(examplePublicKey)) }\n\n// PrivateKey\nexport interface PrivateKey extends String {\n    __privateKey__: never // phantom type\n}\nconst examplePrivateKey: PrivateKey = '-----BEGIN PRIVATE KEY-----\\nPRIVATEKEYAAAAAAAAAADt4+bJGhgtv/oQvPS03eZrEL8vYBXo0j3D7mNUM=\\n-----END PRIVATE KEY-----' as any as PrivateKey\nexport const isPrivateKey = (x: any) : x is PublicKey => {\n    if (!isString(x)) return false;\n    return (/^-----BEGIN PRIVATE KEY-----[\\s\\S]*-----END PRIVATE KEY-----$/.test(x));\n}\n_tests.PrivateKey = () => { assert(isPrivateKey(examplePrivateKey)) }\n\n// PublicKeyHex\nexport interface PublicKeyHex extends String {\n    __publicKeyHex__: never // phantom type so that we cannot assign directly to a string\n}\nconst examplePublicKeyHex: PublicKeyHex = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' as any as PublicKeyHex\nexport const isPublicKeyHex = (x: any) : x is PublicKeyHex => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-fA-F]+$/.test(x));\n}\n_tests.PublicKeyHex = () => { assert(isPublicKeyHex(examplePublicKeyHex)) }\n\n// PrivateKeyHex\nexport interface PrivateKeyHex extends String {\n    __privateKeyHex__: never // phantom type\n}\nconst examplePrivateKeyHex: PrivateKeyHex = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' as any as PrivateKeyHex\nexport const isPrivateKeyHex = (x: any) : x is PrivateKeyHex => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-fA-F]+$/.test(x));\n}\n_tests.PrivateKeyHex = () => { assert(isPrivateKeyHex(examplePrivateKeyHex)) }\n\n// Sha1Hash\nexport interface Sha1Hash extends String {\n    __sha1Hash__: never // phantom type\n}\nconst exampleSha1Hash: Sha1Hash = '63a0f8f44232cba2eca23dea7baa4e176b93e957' as any as Sha1Hash\nexport const isSha1Hash = (x: any) : x is Sha1Hash => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-fA-F]{40}$/.test(x));  // Sha1 hash must be 40 hexadecimal characters\n}\n_tests.Sha1Hash = () => { assert(isSha1Hash('63a0f8f44232cba2eca23dea7baa4e176b93e957')) }\n\n\n// TODO: IS THIS ACTUALLY A PUBLIC KEY? \nexport const nodeIdToPublicKey = (nodeId: NodeId): PublicKey => {\n    return hexToPublicKey(nodeId.toString() as any as PublicKeyHex);\n}\n\n// KeyPair\nexport interface KeyPair {\n    publicKey: PublicKey,\n    privateKey: PrivateKey\n}\nconst exampleKeyPair: KeyPair = {\n    publicKey: examplePublicKey,\n    privateKey: examplePrivateKey\n}\nexport const isKeyPair = (x: any) : x is KeyPair => {\n    return _validateObject(x, {\n        publicKey: isPublicKey,\n        privateKey: isPrivateKey\n    });\n    // TODO: if we trust this function for anything serious, it *REALLY* ought to confirm that the keypair matches\n    // jfm's response: the keypair is validated elsewhere using a different mechanism\n}\n_tests.IsKeyPair = () => { assert(isKeyPair(exampleKeyPair)) }\n\n\n// Signature\nexport interface Signature extends String {\n    __signature__: never\n}\nexport const exampleSignature: Signature = 'abc000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' as any as Signature\nexport const isSignature = (x: any): x is Signature => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-f]{64}?$/.test(x));\n}\n_tests.Signature = () => { assert(isSignature(exampleSignature)) }\n\n\n// NodeId\nexport interface NodeId extends String {\n    __nodeId__: never // phantom type\n}\nexport const exampleNodeId: NodeId = 'abc123aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' as any as NodeId\nexport const isNodeId = (x: any): x is NodeId => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-f]{64}?$/.test(x));\n}\n_tests.NodeId = () => { assert(isNodeId(exampleNodeId)) }\n\n// ChannelName\nexport interface ChannelName extends String {\n    __channelName__: never // phantom type\n}\nexport const exampleChannelName: ChannelName = 'example.Channel-Name' as any as ChannelName\nexport const isChannelName = (x: any): x is ChannelName => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-zA-Z_\\-\\.]{4,160}?$/.test(x));\n}\n_tests.ChannelName = () => { assert(isChannelName(exampleChannelName)) }\n\n// FeedId\nexport interface FeedId extends String {\n    __feedId__: never // phantom type\n}\nexport const exampleFeedId: FeedId = '0123456789abcdef0123456789ABCDEF0123456789abcdef0123456789ABCDEF' as any as FeedId\nexport const isFeedId = (x: any): x is FeedId => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-fA-F]{64}?$/.test(x));\n}\n_tests.FeedId = () => { assert(isFeedId(exampleFeedId)) }\n\n// Conversion between types\nexport const feedIdToPublicKeyHex = (feedId: FeedId): PublicKeyHex => {\n    return feedId as any as PublicKeyHex;\n}\nexport const publicKeyHexToNodeId = (x: PublicKeyHex) : NodeId => {\n    return x as any as NodeId;\n}\n\n\n// SubfeedHash\nexport interface SubfeedHash extends String {\n    __subfeedHash__: never\n}\nexport const exampleSubfeedHash: SubfeedHash = '0123456789abcdefABCD9876543210FEDCBAedcb' as any as SubfeedHash;\nexport const isSubfeedHash = (x: any): x is SubfeedHash => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-fA-F]{40}?$/.test(x));\n}\n_tests.SubfeedHash = () => { assert(isSubfeedHash(exampleSubfeedHash)) }\n\n\n// FileKey\nexport interface FileKey {\n    sha1: Sha1Hash,\n    chunkOf?: {\n        fileKey: FileKey,\n        startByte: bigint,\n        endByte: bigint\n    }\n}\nexport const exampleFileKey: FileKey = {\n    sha1: exampleSha1Hash,\n    chunkOf: {\n        fileKey: {\n            sha1: exampleSha1Hash\n        },\n        startByte: BigInt(0), // not recognized when targeting versions below es2020\n        endByte: BigInt(100)\n    }\n}\nexport const isFileKey = (x: any): x is FileKey => {\n    return _validateObject(x, {\n        sha1: isSha1Hash,\n        chunkOf: optional({\n            fileKey: isFileKey,\n            startByte: isBigInt,\n            endByte: isBigInt\n        })\n    });\n}\n_tests.FileKey = () => { assert(isFileKey(exampleFileKey)) }\n\n\n// FindLiveFeedResult\nexport interface FindLiveFeedResult {\n    nodeId: NodeId\n}\nexport const exampleFindLiveFeedResult: FindLiveFeedResult = { nodeId: exampleNodeId }\nexport const isFindLiveFeedResult = (x: any): x is FindLiveFeedResult => {\n    return _validateObject(x, {\n        nodeId: (a: any) => isNodeId\n    });\n}\n_tests.FindLiveFeedResult = () => { assert(isFindLiveFeedResult(exampleFindLiveFeedResult)) }\n\n\nexport interface ChannelNodeInfoBody {\n    channelName: ChannelName,\n    nodeId: NodeId,\n    httpAddress: Address | null,\n    webSocketAddress: Address | null,\n    udpAddress: Address | null,\n    proxyHttpAddresses: Address[],\n    timestamp: Timestamp\n}\nexport const isChannelNodeInfoBody = (x: any): x is ChannelNodeInfoBody => {\n    return _validateObject(x, {\n        channelName: isChannelName,\n        nodeId: isNodeId,\n        httpAddress: isOneOf([isNull, isAddress]),\n        webSocketAddress: isOneOf([isNull, isAddress]),\n        udpAddress: isOneOf([isNull, isAddress]),\n        proxyHttpAddresses: isArrayOf(isAddress),\n        timestamp: isTimestamp\n    })\n}\n\n// ChannelNodeInfo\nexport interface ChannelNodeInfo {\n    body: ChannelNodeInfoBody,\n    signature: Signature\n}\nexport const exampleChannelNodeInfo: ChannelNodeInfo = {\n    body: {\n        channelName: exampleChannelName,\n        nodeId: exampleNodeId,\n        httpAddress: exampleAddress,\n        webSocketAddress: null, // todo: should we prefer a non-null value here?\n        udpAddress: null, // todo: should we prefer a non-null value here?\n        proxyHttpAddresses: [exampleAddress],\n        timestamp: nowTimestamp()\n    },\n    signature: exampleSignature\n}\nexport const isChannelNodeInfo = (x: any): x is ChannelNodeInfo => {\n    return _validateObject(x, {\n        body: isChannelNodeInfoBody,\n        signature: isSignature\n    })\n}\n_tests.ChannelNodeInfo = () => { assert(isChannelNodeInfo(exampleChannelNodeInfo)) }\n\n\n// SubfeedMessage\nexport interface SubfeedMessage extends JSONObject {\n    __subfeedMessage__: never;\n};\nexport const exampleSubfeedMessage: SubfeedMessage = {key: 'value'} as any as SubfeedMessage;\nexport const isSubfeedMessage = (x: any): x is SubfeedMessage => {\n    return isObject(x);\n}\n_tests.SubfeedMessage = () => { assert(isSubfeedMessage(exampleSubfeedMessage)) }\n\n\n// SubfeedMessageMetaData\nexport type SubfeedMessageMetaData = Object;\nexport const exampleSubfeedMessageMetaData: SubfeedMessageMetaData = {metaKey: 'metaValue'} as SubfeedMessageMetaData;\nexport const isSubfeedMessageMetaData = (x: any): x is SubfeedMessageMetaData => {\n    return isObject(x);\n}\n_tests.SubfeedMessageMetaData = () => { assert(isSubfeedMessageMetaData(exampleSubfeedMessageMetaData)) }\n\n\n// SignedSubfeedMessage\nexport interface SignedSubfeedMessage {\n    body: {\n        previousSignature?: Signature,\n        messageNumber: number,\n        message: SubfeedMessage,\n        timestamp: Timestamp,\n        metaData?: SubfeedMessageMetaData\n    },\n    signature: Signature\n}\nexport const exampleSignedSubfeedMessage: SignedSubfeedMessage = {\n    body: {\n        previousSignature: exampleSignature,\n        messageNumber: 5,\n        message: exampleSubfeedMessage,\n        timestamp: nowTimestamp(),\n        metaData: exampleSubfeedMessageMetaData\n    },\n    signature: exampleSignature\n}\nexport const isSignedSubfeedMessage = (x: any): x is SignedSubfeedMessage => {\n    if (! _validateObject(x, {\n        body: {\n            previousSignature: optional(isSignature),\n            messageNumber: isNumber,\n            message: isObject,\n            timestamp: isTimestamp,\n            metaData: optional(isSubfeedMessageMetaData)\n        },\n        signature: isSignature\n    })) return false;\n\n    // TODO: If this is to be trusted elsewhere (which it will be based on its name & its being a\n    // type guard) it's essential we check the signature actually matches the message.\n    return true;\n}\n// Test failing, not quite sure why--I think I did something wrong above\n_tests.SignedSubfeedMessage = () => { assert(isSignedSubfeedMessage(exampleSignedSubfeedMessage)) }\n\n\n// SubmittedSubfeedMessage\nexport interface SubmittedSubfeedMessage extends JSONObject {\n    __submittedSubfeedMessage__: never;\n};\nexport const exampleSubmittedSubfeedMessage: SubmittedSubfeedMessage = { msg: \"I am a message \"} as any as SubmittedSubfeedMessage;\nexport const isSubmittedSubfeedMessage = (x: any): x is SubmittedSubfeedMessage => {\n    return ((isObject(x)) && (JSON.stringify(x).length < 10000));\n}\nexport const submittedSubfeedMessageToSubfeedMessage = (x: SubmittedSubfeedMessage) => {\n    return x as any as SubfeedMessage;\n}\n_tests.SubmittedSubfeedMessage = () => { assert(isSubmittedSubfeedMessage(exampleSubmittedSubfeedMessage)) }\n\n\n// FeedsConfigFeed\nexport interface FeedsConfigFeed {\n    publicKey: PublicKeyHex,\n    privateKey: PrivateKeyHex | undefined\n}\nexport const isFeedsConfigFeed = (x: any): x is FeedsConfigFeed => {\n    return _validateObject(x, {\n        publicKey: isString,\n        privateKey: isString\n    });\n    // TODO: Check those public/private key pairs!\n}\nexport const exampleFeedsConfigFeed: FeedsConfigFeed = { publicKey: examplePublicKeyHex, privateKey: examplePrivateKeyHex }\n_tests.FeedsConfigFeed = () => { assert(isFeedsConfigFeed(exampleFeedsConfigFeed)) }\n\n\n// FeedName\nexport interface FeedName extends String {\n    __feedName__: never; // phantom\n}\nexport const isFeedName = (x: any): x is FeedName => {\n    return isString(x);\n}\nexport const exampleFeedName: FeedName = \"My feed name\" as any as FeedName;\n_tests.FeedName = () => { assert(isFeedName(exampleFeedName)) }\n\n\n// ErrorMessage\nexport interface ErrorMessage extends String {\n    __errorMessage__: never; // phantom\n}\nexport const isErrorMessage = (x: any): x is ErrorMessage => {\n    return (isString(x)) && (x.length < 1000) ;\n}\nexport const errorMessage = (x: string): ErrorMessage => {\n    if (isErrorMessage(x)) return x;\n    else {\n        throw Error('Invalid error message: messages cannot exceed 1000 characters.');\n    }\n}\nexport const exampleErrorMessage = errorMessage(\"Nothing's wrong. Everything is fine.\");\n_tests.ErrorMessage = () => {\n    assert(isErrorMessage(exampleErrorMessage));\n    try {\n        const overlongMessage = new Array(1001).join('#');\n        let x = errorMessage(overlongMessage);\n        assert(false); // does not occur as error is thrown\n    } catch(err) {\n        assert(err.message === 'Invalid error message: messages cannot exceed 1000 characters.')\n    }\n}\n\n// TODO: Want to discuss this\n// objectToMap and mapToObject\nexport const objectToMap = <KeyType extends String, ValueType>(obj: {[key: string]: any}) => {\n    return new Map<KeyType, ValueType>(Object.keys(obj).map(k => {\n        return [k as any as KeyType, obj[k] as any as ValueType];\n    }));\n}\nexport const mapToObject = <KeyType extends String, ValueType>(m: Map<KeyType, ValueType>) => {\n    const ret: {[key: string]: any} = {};\n    m.forEach((v, k) => {\n        ret[k.toString()] = v;\n    });\n    return ret;\n}\n\n// FeedsConfig and FeedsConfigRAM\nexport interface FeedsConfig {\n    feeds: {[key: string]: FeedsConfigFeed},\n    feedIdsByName: {[key: string]: FeedId}\n}\nexport interface FeedsConfigRAM {\n    feeds: Map<FeedId, FeedsConfigFeed>,\n    feedIdsByName: Map<FeedName, FeedId>\n}\nexport const toFeedsConfigRAM = (x: FeedsConfig): FeedsConfigRAM => {\n    return {\n        feeds: objectToMap<FeedId, FeedsConfigFeed>(x.feeds),\n        feedIdsByName: objectToMap<FeedName, FeedId>(x.feedIdsByName)\n    }\n}\nexport const toFeedsConfig = (x: FeedsConfigRAM): FeedsConfig => {\n    return {\n        feeds: mapToObject<FeedId, FeedsConfigFeed>(x.feeds),\n        feedIdsByName: mapToObject<FeedName, FeedId>(x.feedIdsByName)\n    }\n}\nexport const isFeedsConfig = (x: any): x is FeedsConfig => {\n    return _validateObject(x, {\n        feeds: isObjectOf(isFeedId, isFeedsConfigFeed),\n        feedIdsByName: isObjectOf(isFeedName, isFeedId)\n    })\n}\n// Failing test: reminder to fix the FeedsConfig, FeedsConfigRAM area\n_tests.FeedsConfig = () => { assert(false); }\n\n\n// SubfeedAccessRule\nexport interface SubfeedAccessRule {\n    nodeId: NodeId,\n    write: boolean\n}\nexport const isSubfeedAccessRule = (x: any): x is SubfeedAccessRule => {\n    return _validateObject(x, {\n        nodeId: isNodeId,\n        write: isBoolean\n    })\n}\nexport const exampleSubfeedAccessDeniedRule = { nodeId: exampleNodeId, write: false } as SubfeedAccessRule\nexport const exampleSubfeedAccessAllowedRule = { nodeId: exampleNodeId, write: true } as SubfeedAccessRule\n_tests.SubfeedAccessRule = () => {\n    assert(isSubfeedAccessRule(exampleSubfeedAccessDeniedRule));\n    assert(isSubfeedAccessRule(exampleSubfeedAccessAllowedRule));\n}\n\n// SubfeedAccessRules\nexport interface SubfeedAccessRules {\n    rules: SubfeedAccessRule[]\n}\nexport const isSubfeedAccessRules = (x: any): x is SubfeedAccessRules => {\n    return _validateObject(x, {\n        rules: isArrayOf(isSubfeedAccessRule)\n    })\n}\n_tests.SubfeedAccessRules = () => {\n    assert(isArrayOf(isSubfeedAccessRule)([exampleSubfeedAccessAllowedRule, exampleSubfeedAccessDeniedRule]))\n}\n\n\n// SubfeedWatchName\nexport interface SubfeedWatchName extends String {\n    __subfeedWatchName__: never; // phantom\n}\nexport const isSubfeedWatchName = (x: any) => {\n    return isString(x);\n}\nexport const exampleSubfeedWatchName = \"Example Subfeed Watch Name\" as any as SubfeedWatchName;\n_tests.SubfeedWatchName = () => { assert(isSubfeedWatchName(exampleSubfeedWatchName)) }\n\n\n// SubfeedWatch\nexport interface SubfeedWatch {\n    feedId: FeedId,\n    subfeedHash: SubfeedHash,\n    position: number\n    // No name?\n}\nexport const exampleSubfeedWatch: SubfeedWatch = { \n    feedId: exampleFeedId,\n    subfeedHash: exampleSubfeedHash,\n    position: 4\n}\nexport const isSubfeedWatch = (x: any): x is SubfeedWatch => {\n    return _validateObject(x, {\n        feedId: isFeedId,\n        subfeedHash: isSubfeedHash,\n        position: isNumber\n    });\n}\n_tests.SubfeedWatch = () => { assert(isSubfeedWatch(exampleSubfeedWatch)) }\n\n\n// FeedSubfeedId\nexport interface FeedSubfeedId extends String {\n    __feedSubfeedId__: never; // phantom\n}\nexport const feedSubfeedId = (feedId: FeedId, subfeedHash: SubfeedHash): FeedSubfeedId => {\n    return (feedId.toString() + ':' + subfeedHash.toString()) as any as FeedSubfeedId; \n}\nexport const isFeedSubfeedId = (x: any): x is FeedSubfeedId => {\n    if (!isString(x)) return false;\n    const parts = x.split(':');\n    return (parts.length === 2) &&\n           (isFeedId(parts[0])) &&\n           (isSubfeedHash(parts[1]));\n}\nexport const exampleFeedSubfeedId: FeedSubfeedId = feedSubfeedId(exampleFeedId, exampleSubfeedHash);\n_tests.FeedSubfeedId = () => {\n    assert(isFeedSubfeedId(exampleFeedSubfeedId));\n}\n\n\n// TODO: Skipped this part--want to discuss\n// SubfeedWatches and SubfeedWatchesRAM\nexport type SubfeedWatches = {[key: string]: SubfeedWatch};\nexport const isSubfeedWatches = (x: any): x is SubfeedWatches => {\n    return isObjectOf(isSubfeedWatchName, isSubfeedWatch)(x);\n}\nexport type SubfeedWatchesRAM = Map<SubfeedWatchName, SubfeedWatch>;\nexport const toSubfeedWatchesRAM = (x: SubfeedWatches) => {\n    return objectToMap<SubfeedWatchName, SubfeedWatch>(x);\n}\nexport const toSubfeedWatches = (x: SubfeedWatchesRAM) => {\n    return mapToObject<SubfeedWatchName, SubfeedWatch>(x);\n}\n\n// FindFileResult\nexport interface FindFileResult {\n    nodeId: NodeId,\n    fileKey: FileKey,\n    fileSize: bigint\n}\nexport const isFindFileResult = (x: any): x is FindFileResult => {\n    return _validateObject(x, {\n        nodeId: isNodeId,\n        fileKey: isFileKey,\n        fileSize: isBigInt\n    });\n}\nexport const exampleFindFileResult: FindFileResult = {\n    nodeId: exampleNodeId,\n    fileKey: exampleFileKey,\n    fileSize: BigInt(20)\n}\n// TODO: This is failing and I'm not sure why\n_tests.FindFileResult = () => { assert(isFindFileResult(exampleFindFileResult)) }\n\n\n// RequestId\nexport interface RequestId extends String {\n    __requestId__: never // phantom type\n}\nexport const isRequestId = (x: any): x is RequestId => {\n    if (!isString(x)) return false;\n    return (/^[A-Za-z]{10}$/.test(x));\n}\nexport const createRequestId = () => {\n    return randomAlphaString(10) as any as RequestId;\n}\n_tests.RequestId = () => { assert(isRequestId(createRequestId())); }\n\n// ChannelName\nexport interface LiveFeedSubscriptionName extends String {\n    __liveFeedSubscriptionName__: never // phantom type\n}\nexport const isLiveFeedSubscriptionName = (x: any): x is LiveFeedSubscriptionName => {\n    if (!isString(x)) return false;\n    return (/^[0-9a-zA-Z_\\-\\. ]{4,160}?$/.test(x));\n}\n\n// LiveFeedSubscription\nexport interface LiveFeedSubscription {\n    subscriptionName: LiveFeedSubscriptionName,\n    feedId: FeedId,\n    subfeedHash: SubfeedHash,\n    position: number\n}\nexport const isLiveFeedSubscription = (x: any): x is LiveFeedSubscription => {\n    return _validateObject(x, {\n        subscriptionName: isLiveFeedSubscriptionName,\n        feedId: isFeedId,\n        subfeedHash: isSubfeedHash,\n        position: isNumber\n    })\n}\nexport const exampleLiveFeedSubscription: LiveFeedSubscription = {\n    subscriptionName: \"This is my subscription\" as any as LiveFeedSubscriptionName,\n    feedId: exampleFeedId,\n    subfeedHash: exampleSubfeedHash,\n    position: 12\n}\n_tests.LiveFeedSubscription = () => { assert(isLiveFeedSubscription(exampleLiveFeedSubscription)) }\n\n\n// LiveFeedSubscriptions\nexport interface LiveFeedSubscriptions {\n    subscriptions: LiveFeedSubscription[]\n}\nexport const isLiveFeedSubscriptions = (x: any): x is LiveFeedSubscriptions => {\n    return _validateObject(x, {\n        subscriptions: isArrayOf(isLiveFeedSubscription)\n    })\n}\n_tests.LiveFeedSubscriptions = () => { \n    assert(isArrayOf(isLiveFeedSubscription)([exampleLiveFeedSubscription]));\n }\n\n\n// ChannelInfo\nexport interface ChannelInfo {\n    nodes: ChannelNodeInfo[]\n}\nexport const isChannelInfo = (x: any): x is ChannelInfo => {\n    return _validateObject(x, {\n        nodes: isArrayOf(isChannelNodeInfo)\n    })\n}\nexport const exampleChannelInfo: ChannelInfo = { nodes: [exampleChannelNodeInfo] } as any as ChannelInfo\n_tests.ChannelInfo = () => { assert(isChannelInfo(exampleChannelInfo)) }\n\n\nexport interface MulticastAnnounceMessageBody {\n    protocolVersion: ProtocolVersion,\n    fromNodeId: NodeId,\n    messageType: 'announce', // Should be actual type/enum?\n    requestData: AnnounceRequestData\n}\nexport const isMulticastAnnounceMessageBody = (x: any): x is MulticastAnnounceMessageBody => {\n    return _validateObject(x, {\n        protocolVersion: isProtocolVersion,\n        fromNodeId: isNodeId,\n        messageType: isEqualTo('announce'),\n        requestData: isAnnounceRequestData\n    })\n}\n\nexport interface MulticastAnnounceMessage {\n    body: MulticastAnnounceMessageBody,\n    signature: Signature\n}\nexport const isMulticastAnnounceMessage = (x: any): x is MulticastAnnounceMessage => {\n    return _validateObject(x, {\n        body: isMulticastAnnounceMessageBody,\n        signature: isSignature\n    })\n}\nexport const exampleMulticastAnnounceMessage: MulticastAnnounceMessage = {\n    body: {\n        protocolVersion: exampleProtocolVersion,\n        fromNodeId: exampleNodeId,\n        messageType: 'announce',\n        requestData: {  // TODO: This should be standardized; and we are growing toward a weird cross-import situation.\n            requestType: 'announce',\n            channelNodeInfo: exampleChannelNodeInfo\n        }\n    },\n    signature: exampleSignature\n}\n_tests.MulticastAnnounceMessage = () => {\n    assert(isMulticastAnnounceMessage(exampleMulticastAnnounceMessage));\n}\n\n\nexport const jsonObjectsMatch = (x1: any, x2: any): boolean => {\n    if (!isJSONObject(x1)) throw Error('x1 is not a json object in jsonObjectsMatch');\n    if (!isJSONObject(x2)) throw Error('x2 is not a json object in jsonObjectsMatch');\n    return (JSONStringifyDeterministic(x1) === JSONStringifyDeterministic(x2));\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"032873c68be739de7508cc94094c553988d3a475","contentHash":"b87856db65529a985f4d9ce39c69f4ad209b93042433fecb5fe566c62503889c"},"/home/jsoules/src/kachery-p2p/daemon/src/common/crypto_util.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/common/crypto_util.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":325}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":51}},"5":{"start":{"line":8,"column":15},"end":{"line":8,"column":44}},"6":{"start":{"line":9,"column":15},"end":{"line":9,"column":32}},"7":{"start":{"line":10,"column":28},"end":{"line":10,"column":54}},"8":{"start":{"line":11,"column":32},"end":{"line":11,"column":66}},"9":{"start":{"line":12,"column":0},"end":{"line":21,"column":2}},"10":{"start":{"line":13,"column":4},"end":{"line":20,"column":5}},"11":{"start":{"line":14,"column":8},"end":{"line":14,"column":123}},"12":{"start":{"line":17,"column":8},"end":{"line":17,"column":26}},"13":{"start":{"line":18,"column":8},"end":{"line":18,"column":26}},"14":{"start":{"line":19,"column":8},"end":{"line":19,"column":58}},"15":{"start":{"line":22,"column":0},"end":{"line":31,"column":2}},"16":{"start":{"line":23,"column":4},"end":{"line":30,"column":5}},"17":{"start":{"line":24,"column":8},"end":{"line":24,"column":144}},"18":{"start":{"line":27,"column":8},"end":{"line":27,"column":26}},"19":{"start":{"line":28,"column":8},"end":{"line":28,"column":26}},"20":{"start":{"line":29,"column":8},"end":{"line":29,"column":63}},"21":{"start":{"line":32,"column":0},"end":{"line":52,"column":2}},"22":{"start":{"line":33,"column":4},"end":{"line":43,"column":5}},"23":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"24":{"start":{"line":35,"column":12},"end":{"line":35,"column":25}},"25":{"start":{"line":37,"column":24},"end":{"line":37,"column":58}},"26":{"start":{"line":39,"column":27},"end":{"line":39,"column":29}},"27":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"28":{"start":{"line":41,"column":12},"end":{"line":41,"column":25}},"29":{"start":{"line":44,"column":4},"end":{"line":51,"column":5}},"30":{"start":{"line":45,"column":8},"end":{"line":45,"column":163}},"31":{"start":{"line":48,"column":8},"end":{"line":48,"column":26}},"32":{"start":{"line":49,"column":8},"end":{"line":49,"column":60}},"33":{"start":{"line":50,"column":8},"end":{"line":50,"column":21}},"34":{"start":{"line":53,"column":0},"end":{"line":73,"column":2}},"35":{"start":{"line":54,"column":4},"end":{"line":64,"column":5}},"36":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"37":{"start":{"line":56,"column":12},"end":{"line":56,"column":25}},"38":{"start":{"line":58,"column":24},"end":{"line":58,"column":58}},"39":{"start":{"line":60,"column":27},"end":{"line":60,"column":29}},"40":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"41":{"start":{"line":62,"column":12},"end":{"line":62,"column":25}},"42":{"start":{"line":65,"column":4},"end":{"line":72,"column":5}},"43":{"start":{"line":66,"column":8},"end":{"line":66,"column":142}},"44":{"start":{"line":69,"column":8},"end":{"line":69,"column":26}},"45":{"start":{"line":70,"column":8},"end":{"line":70,"column":60}},"46":{"start":{"line":71,"column":8},"end":{"line":71,"column":21}},"47":{"start":{"line":74,"column":0},"end":{"line":78,"column":2}},"48":{"start":{"line":75,"column":17},"end":{"line":75,"column":52}},"49":{"start":{"line":76,"column":4},"end":{"line":76,"column":23}},"50":{"start":{"line":77,"column":4},"end":{"line":77,"column":32}},"51":{"start":{"line":79,"column":0},"end":{"line":92,"column":2}},"52":{"start":{"line":80,"column":14},"end":{"line":80,"column":35}},"53":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"54":{"start":{"line":82,"column":8},"end":{"line":82,"column":53}},"55":{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},"56":{"start":{"line":85,"column":8},"end":{"line":85,"column":53}},"57":{"start":{"line":87,"column":16},"end":{"line":87,"column":59}},"58":{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},"59":{"start":{"line":89,"column":8},"end":{"line":89,"column":53}},"60":{"start":{"line":91,"column":4},"end":{"line":91,"column":49}},"61":{"start":{"line":93,"column":0},"end":{"line":95,"column":2}},"62":{"start":{"line":94,"column":4},"end":{"line":94,"column":34}},"63":{"start":{"line":96,"column":0},"end":{"line":109,"column":2}},"64":{"start":{"line":97,"column":14},"end":{"line":97,"column":36}},"65":{"start":{"line":98,"column":4},"end":{"line":100,"column":5}},"66":{"start":{"line":99,"column":8},"end":{"line":99,"column":54}},"67":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"68":{"start":{"line":102,"column":8},"end":{"line":102,"column":54}},"69":{"start":{"line":104,"column":16},"end":{"line":104,"column":59}},"70":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"71":{"start":{"line":106,"column":8},"end":{"line":106,"column":54}},"72":{"start":{"line":108,"column":4},"end":{"line":108,"column":53}},"73":{"start":{"line":110,"column":0},"end":{"line":115,"column":2}},"74":{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},"75":{"start":{"line":112,"column":8},"end":{"line":112,"column":64}},"76":{"start":{"line":114,"column":4},"end":{"line":114,"column":135}},"77":{"start":{"line":116,"column":0},"end":{"line":121,"column":2}},"78":{"start":{"line":117,"column":4},"end":{"line":119,"column":5}},"79":{"start":{"line":118,"column":8},"end":{"line":118,"column":65}},"80":{"start":{"line":120,"column":4},"end":{"line":120,"column":141}},"81":{"start":{"line":122,"column":0},"end":{"line":140,"column":2}},"82":{"start":{"line":123,"column":38},"end":{"line":135,"column":6}},"83":{"start":{"line":136,"column":4},"end":{"line":139,"column":6}},"84":{"start":{"line":142,"column":0},"end":{"line":147,"column":2}},"85":{"start":{"line":143,"column":18},"end":{"line":143,"column":20}},"86":{"start":{"line":144,"column":4},"end":{"line":144,"column":84}},"87":{"start":{"line":144,"column":48},"end":{"line":144,"column":66}},"88":{"start":{"line":144,"column":67},"end":{"line":144,"column":80}},"89":{"start":{"line":145,"column":4},"end":{"line":145,"column":19}},"90":{"start":{"line":146,"column":4},"end":{"line":146,"column":47}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":23},"end":{"line":12,"column":24}},"loc":{"start":{"line":12,"column":41},"end":{"line":21,"column":1}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":27},"end":{"line":22,"column":28}},"loc":{"start":{"line":22,"column":45},"end":{"line":31,"column":1}},"line":22},"3":{"name":"(anonymous_3)","decl":{"start":{"line":32,"column":30},"end":{"line":32,"column":31}},"loc":{"start":{"line":32,"column":95},"end":{"line":52,"column":1}},"line":32},"4":{"name":"(anonymous_4)","decl":{"start":{"line":53,"column":26},"end":{"line":53,"column":27}},"loc":{"start":{"line":53,"column":91},"end":{"line":73,"column":1}},"line":53},"5":{"name":"(anonymous_5)","decl":{"start":{"line":74,"column":18},"end":{"line":74,"column":19}},"loc":{"start":{"line":74,"column":27},"end":{"line":78,"column":1}},"line":74},"6":{"name":"(anonymous_6)","decl":{"start":{"line":79,"column":25},"end":{"line":79,"column":26}},"loc":{"start":{"line":79,"column":40},"end":{"line":92,"column":1}},"line":79},"7":{"name":"(anonymous_7)","decl":{"start":{"line":93,"column":31},"end":{"line":93,"column":32}},"loc":{"start":{"line":93,"column":49},"end":{"line":95,"column":1}},"line":93},"8":{"name":"(anonymous_8)","decl":{"start":{"line":96,"column":26},"end":{"line":96,"column":27}},"loc":{"start":{"line":96,"column":42},"end":{"line":109,"column":1}},"line":96},"9":{"name":"(anonymous_9)","decl":{"start":{"line":110,"column":25},"end":{"line":110,"column":26}},"loc":{"start":{"line":110,"column":32},"end":{"line":115,"column":1}},"line":110},"10":{"name":"(anonymous_10)","decl":{"start":{"line":116,"column":26},"end":{"line":116,"column":27}},"loc":{"start":{"line":116,"column":33},"end":{"line":121,"column":1}},"line":116},"11":{"name":"(anonymous_11)","decl":{"start":{"line":122,"column":24},"end":{"line":122,"column":25}},"loc":{"start":{"line":122,"column":30},"end":{"line":140,"column":1}},"line":122},"12":{"name":"(anonymous_12)","decl":{"start":{"line":142,"column":37},"end":{"line":142,"column":38}},"loc":{"start":{"line":142,"column":65},"end":{"line":147,"column":1}},"line":142},"13":{"name":"(anonymous_13)","decl":{"start":{"line":144,"column":24},"end":{"line":144,"column":25}},"loc":{"start":{"line":144,"column":46},"end":{"line":144,"column":82}},"line":144}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":32,"column":58},"end":{"line":32,"column":90}},"type":"default-arg","locations":[{"start":{"line":32,"column":65},"end":{"line":32,"column":90}}],"line":32},"4":{"loc":{"start":{"line":33,"column":4},"end":{"line":43,"column":5}},"type":"if","locations":[{"start":{"line":33,"column":4},"end":{"line":43,"column":5}},{"start":{"line":33,"column":4},"end":{"line":43,"column":5}}],"line":33},"5":{"loc":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},{"start":{"line":34,"column":8},"end":{"line":36,"column":9}}],"line":34},"6":{"loc":{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},"type":"if","locations":[{"start":{"line":40,"column":8},"end":{"line":42,"column":9}},{"start":{"line":40,"column":8},"end":{"line":42,"column":9}}],"line":40},"7":{"loc":{"start":{"line":53,"column":54},"end":{"line":53,"column":86}},"type":"default-arg","locations":[{"start":{"line":53,"column":61},"end":{"line":53,"column":86}}],"line":53},"8":{"loc":{"start":{"line":54,"column":4},"end":{"line":64,"column":5}},"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":64,"column":5}},{"start":{"line":54,"column":4},"end":{"line":64,"column":5}}],"line":54},"9":{"loc":{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},"type":"if","locations":[{"start":{"line":55,"column":8},"end":{"line":57,"column":9}},{"start":{"line":55,"column":8},"end":{"line":57,"column":9}}],"line":55},"10":{"loc":{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},"type":"if","locations":[{"start":{"line":61,"column":8},"end":{"line":63,"column":9}},{"start":{"line":61,"column":8},"end":{"line":63,"column":9}}],"line":61},"11":{"loc":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},{"start":{"line":81,"column":4},"end":{"line":83,"column":5}}],"line":81},"12":{"loc":{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":86,"column":5}},{"start":{"line":84,"column":4},"end":{"line":86,"column":5}}],"line":84},"13":{"loc":{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},{"start":{"line":88,"column":4},"end":{"line":90,"column":5}}],"line":88},"14":{"loc":{"start":{"line":98,"column":4},"end":{"line":100,"column":5}},"type":"if","locations":[{"start":{"line":98,"column":4},"end":{"line":100,"column":5}},{"start":{"line":98,"column":4},"end":{"line":100,"column":5}}],"line":98},"15":{"loc":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},{"start":{"line":101,"column":4},"end":{"line":103,"column":5}}],"line":101},"16":{"loc":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},{"start":{"line":105,"column":4},"end":{"line":107,"column":5}}],"line":105},"17":{"loc":{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},"type":"if","locations":[{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},{"start":{"line":111,"column":4},"end":{"line":113,"column":5}}],"line":111},"18":{"loc":{"start":{"line":117,"column":4},"end":{"line":119,"column":5}},"type":"if","locations":[{"start":{"line":117,"column":4},"end":{"line":119,"column":5}},{"start":{"line":117,"column":4},"end":{"line":119,"column":5}}],"line":117},"19":{"loc":{"start":{"line":142,"column":43},"end":{"line":142,"column":60}},"type":"default-arg","locations":[{"start":{"line":142,"column":51},"end":{"line":142,"column":60}}],"line":142}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1,"16":0,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":0,"63":1,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":1,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0},"f":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0]},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/common/crypto_util.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/common/crypto_util.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport { PublicKey, PrivateKey, PublicKeyHex, PrivateKeyHex, KeyPair, Signature, Sha1Hash, FeedId, JSONObject, Timestamp, elapsedSince } from '../interfaces/core'\nimport { kacheryP2PSerialize } from './util';\n\nconst ed25519PubKeyPrefix = \"302a300506032b6570032100\";\nconst ed25519PrivateKeyPrefix = \"302e020100300506032b657004220420\";\n\nexport const getSignature = (obj: Object, keyPair: KeyPair): Signature => {\n    try {\n        return crypto.sign(null, kacheryP2PSerialize(obj), keyPair.privateKey.toString()).toString('hex') as any as Signature;\n    }\n    catch(err) {\n        console.warn(obj);\n        console.warn(err);\n        throw Error('Exception when creating signature.');\n    }\n}\n\nexport const getSignatureJson = (obj: Object, keyPair: KeyPair): Signature => {\n    try {\n        return crypto.sign(null, Buffer.from(JSONStringifyDeterministic(obj)), keyPair.privateKey.toString()).toString('hex') as any as Signature;\n    }\n    catch(err) {\n        console.warn(obj);\n        console.warn(err);\n        throw Error('Exception when creating signature Json.');\n    }\n}\n\nexport const verifySignatureJson = (obj: JSONObject & {timestamp?: Timestamp}, signature: Signature, publicKey: PublicKey, opts: {checkTimestamp: boolean}={checkTimestamp: false}) => {\n    if (opts.checkTimestamp) {\n        if (!obj.timestamp) {\n            return false;\n        }\n        const elapsed = elapsedSince(obj.timestamp)\n        // needs to be less than 30 minutes old\n        const numMinutes = 30;\n        if (elapsed > numMinutes * 60 * 1000) {\n            return false;\n        }\n    }\n    try {\n        return crypto.verify(null, Buffer.from(JSONStringifyDeterministic(obj)), publicKey.toString(), Buffer.from(signature.toString(), 'hex'));\n    }\n    catch(err) {\n        console.warn(err);\n        console.warn('Exception when verifying signature.');\n        return false;\n    }\n}\n\nexport const verifySignature = (obj: Object & {timestamp?: Timestamp}, signature: Signature, publicKey: PublicKey, opts={checkTimestamp: false}): boolean => {\n    if (opts.checkTimestamp) {\n        if (!obj.timestamp) {\n            return false;\n        }\n        const elapsed = elapsedSince(obj.timestamp)\n        // needs to be less than 30 minutes old\n        const numMinutes = 30;\n        if (elapsed > numMinutes * 60 * 1000) {\n            return false;\n        }\n    }\n    try {\n        return crypto.verify(null, kacheryP2PSerialize(obj), publicKey.toString(), Buffer.from(signature.toString(), 'hex'));\n    }\n    catch(err) {\n        console.warn(err);\n        console.warn('Exception when verifying signature.');\n        return false;\n    }\n}\n\nexport const sha1sum = (txt: string): Sha1Hash => {\n    var shasum = crypto.createHash('sha1')\n    shasum.update(txt)\n    return shasum.digest('hex') as any as Sha1Hash;\n}\n\nexport const publicKeyToHex = (publicKey: PublicKey): PublicKeyHex => {\n    const x = publicKey.split('\\n');\n    if (x[0] !== '-----BEGIN PUBLIC KEY-----') {\n        throw Error('Problem in public key format.');\n    }\n    if (x[2] !== '-----END PUBLIC KEY-----') {\n        throw Error('Problem in public key format.');\n    }\n    const ret = Buffer.from(x[1], 'base64').toString('hex');\n    if (!ret.startsWith(ed25519PubKeyPrefix)) {\n        throw Error('Problem in public key format.');\n    }\n    return ret.slice(ed25519PubKeyPrefix.length) as any as PublicKeyHex;\n}\n\nexport const publicKeyHexToFeedId = (publicKeyHex: PublicKeyHex): FeedId => {\n    return publicKeyToHex as any as FeedId;\n}\n\nexport const privateKeyToHex = (privateKey: PrivateKey): PrivateKeyHex => {\n    const x = privateKey.split('\\n');\n    if (x[0] !== '-----BEGIN PRIVATE KEY-----') {\n        throw Error('Problem in private key format.');\n    }\n    if (x[2] !== '-----END PRIVATE KEY-----') {\n        throw Error('Problem in private key format.');\n    }\n    const ret = Buffer.from(x[1], 'base64').toString('hex');\n    if (!ret.startsWith(ed25519PrivateKeyPrefix)) {\n        throw Error('Problem in private key format.');\n    }\n    return ret.slice(ed25519PrivateKeyPrefix.length) as any as PrivateKeyHex;\n}\n\nexport const hexToPublicKey = (x: PublicKeyHex): PublicKey => {\n    if (!x) {\n        throw Error('Error in hexToPublicKey. Input is empty.');\n    }\n    return `-----BEGIN PUBLIC KEY-----\\n${Buffer.from(ed25519PubKeyPrefix + x, 'hex').toString('base64')}\\n-----END PUBLIC KEY-----\\n` as any as PublicKey;\n}\n\nexport const hexToPrivateKey = (x: PrivateKeyHex): PrivateKey => {\n    if (!x) {\n        throw Error('Error in hexToPrivateKey. Input is empty.');\n    }\n    return `-----BEGIN PRIVATE KEY-----\\n${Buffer.from(ed25519PrivateKeyPrefix + x, 'hex').toString('base64')}\\n-----END PRIVATE KEY-----\\n` as any as PrivateKey;\n}\n\nexport const createKeyPair = () => {\n    const {publicKey, privateKey} = crypto.generateKeyPairSync('ed25519', {\n        // modulusLength: 1024,\n        publicKeyEncoding: {\n            type: 'spki',\n            format: 'pem'\n        },\n        privateKeyEncoding: {\n            type: 'pkcs8',\n            format: 'pem'\n            // cipher: 'aes-256-cbc',\n            // passphrase: 'top secret'\n        }\n    });\n    return {\n        publicKey: publicKey as any as PublicKey,\n        privateKey: privateKey as any as PrivateKey\n    }\n}\n\n// Thanks: https://stackoverflow.com/questions/16167581/sort-object-properties-and-json-stringify\nexport const JSONStringifyDeterministic = ( obj: Object, space: string | number | undefined =undefined ) => {\n    var allKeys: string[] = [];\n    JSON.stringify( obj, function( key, value ){ allKeys.push( key ); return value; } )\n    allKeys.sort();\n    return JSON.stringify( obj, allKeys, space );\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"c23475cc1fc5464b4f93a7627c69b873dae666f0","contentHash":"1f247c1e2b3c7cc208ebbdde12d401af894954fd27cf53005543723e87f82dc7"},"/home/jsoules/src/kachery-p2p/daemon/src/common/util.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/common/util.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":192}},"4":{"start":{"line":7,"column":13},"end":{"line":7,"column":43}},"5":{"start":{"line":8,"column":15},"end":{"line":8,"column":47}},"6":{"start":{"line":9,"column":0},"end":{"line":15,"column":2}},"7":{"start":{"line":10,"column":15},"end":{"line":10,"column":17}},"8":{"start":{"line":11,"column":19},"end":{"line":11,"column":83}},"9":{"start":{"line":12,"column":4},"end":{"line":13,"column":77}},"10":{"start":{"line":12,"column":17},"end":{"line":12,"column":18}},"11":{"start":{"line":13,"column":8},"end":{"line":13,"column":77}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":16}},"13":{"start":{"line":16,"column":0},"end":{"line":25,"column":2}},"14":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"15":{"start":{"line":18,"column":8},"end":{"line":18,"column":84}},"16":{"start":{"line":20,"column":15},"end":{"line":20,"column":17}},"17":{"start":{"line":21,"column":19},"end":{"line":21,"column":73}},"18":{"start":{"line":22,"column":4},"end":{"line":23,"column":77}},"19":{"start":{"line":22,"column":17},"end":{"line":22,"column":18}},"20":{"start":{"line":23,"column":8},"end":{"line":23,"column":77}},"21":{"start":{"line":24,"column":4},"end":{"line":24,"column":16}},"22":{"start":{"line":26,"column":0},"end":{"line":31,"column":2}},"23":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"24":{"start":{"line":28,"column":8},"end":{"line":28,"column":37}},"25":{"start":{"line":30,"column":4},"end":{"line":30,"column":17}},"26":{"start":{"line":32,"column":0},"end":{"line":35,"column":2}},"27":{"start":{"line":33,"column":16},"end":{"line":33,"column":67}},"28":{"start":{"line":34,"column":4},"end":{"line":34,"column":27}},"29":{"start":{"line":36,"column":0},"end":{"line":38,"column":2}},"30":{"start":{"line":37,"column":4},"end":{"line":37,"column":57}},"31":{"start":{"line":39,"column":0},"end":{"line":41,"column":2}},"32":{"start":{"line":40,"column":4},"end":{"line":40,"column":72}},"33":{"start":{"line":42,"column":25},"end":{"line":62,"column":1}},"34":{"start":{"line":43,"column":4},"end":{"line":61,"column":5}},"35":{"start":{"line":44,"column":8},"end":{"line":44,"column":17}},"36":{"start":{"line":46,"column":9},"end":{"line":61,"column":5}},"37":{"start":{"line":47,"column":8},"end":{"line":57,"column":9}},"38":{"start":{"line":48,"column":12},"end":{"line":48,"column":53}},"39":{"start":{"line":48,"column":31},"end":{"line":48,"column":50}},"40":{"start":{"line":51,"column":25},"end":{"line":51,"column":46}},"41":{"start":{"line":52,"column":22},"end":{"line":52,"column":24}},"42":{"start":{"line":53,"column":12},"end":{"line":55,"column":13}},"43":{"start":{"line":54,"column":16},"end":{"line":54,"column":48}},"44":{"start":{"line":56,"column":12},"end":{"line":56,"column":23}},"45":{"start":{"line":60,"column":8},"end":{"line":60,"column":17}},"46":{"start":{"line":63,"column":38},"end":{"line":91,"column":1}},"47":{"start":{"line":64,"column":4},"end":{"line":90,"column":5}},"48":{"start":{"line":67,"column":20},"end":{"line":67,"column":28}},"49":{"start":{"line":68,"column":8},"end":{"line":74,"column":9}},"50":{"start":{"line":69,"column":12},"end":{"line":69,"column":23}},"51":{"start":{"line":72,"column":12},"end":{"line":72,"column":30}},"52":{"start":{"line":73,"column":12},"end":{"line":73,"column":68}},"53":{"start":{"line":76,"column":9},"end":{"line":90,"column":5}},"54":{"start":{"line":77,"column":8},"end":{"line":86,"column":9}},"55":{"start":{"line":78,"column":12},"end":{"line":78,"column":66}},"56":{"start":{"line":78,"column":31},"end":{"line":78,"column":63}},"57":{"start":{"line":81,"column":24},"end":{"line":81,"column":26}},"58":{"start":{"line":82,"column":12},"end":{"line":84,"column":13}},"59":{"start":{"line":83,"column":16},"end":{"line":83,"column":61}},"60":{"start":{"line":85,"column":12},"end":{"line":85,"column":23}},"61":{"start":{"line":89,"column":8},"end":{"line":89,"column":17}},"62":{"start":{"line":92,"column":0},"end":{"line":92,"column":62}},"63":{"start":{"line":92,"column":27},"end":{"line":92,"column":61}},"64":{"start":{"line":92,"column":44},"end":{"line":92,"column":60}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":23},"end":{"line":9,"column":24}},"loc":{"start":{"line":9,"column":38},"end":{"line":15,"column":1}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":28},"end":{"line":16,"column":29}},"loc":{"start":{"line":16,"column":43},"end":{"line":25,"column":1}},"line":16},"3":{"name":"(anonymous_3)","decl":{"start":{"line":26,"column":29},"end":{"line":26,"column":30}},"loc":{"start":{"line":26,"column":52},"end":{"line":31,"column":1}},"line":26},"4":{"name":"(anonymous_4)","decl":{"start":{"line":32,"column":23},"end":{"line":32,"column":24}},"loc":{"start":{"line":32,"column":39},"end":{"line":35,"column":1}},"line":32},"5":{"name":"(anonymous_5)","decl":{"start":{"line":36,"column":30},"end":{"line":36,"column":31}},"loc":{"start":{"line":36,"column":37},"end":{"line":38,"column":1}},"line":36},"6":{"name":"(anonymous_6)","decl":{"start":{"line":39,"column":32},"end":{"line":39,"column":33}},"loc":{"start":{"line":39,"column":39},"end":{"line":41,"column":1}},"line":39},"7":{"name":"(anonymous_7)","decl":{"start":{"line":42,"column":25},"end":{"line":42,"column":26}},"loc":{"start":{"line":42,"column":32},"end":{"line":62,"column":1}},"line":42},"8":{"name":"(anonymous_8)","decl":{"start":{"line":48,"column":25},"end":{"line":48,"column":26}},"loc":{"start":{"line":48,"column":31},"end":{"line":48,"column":50}},"line":48},"9":{"name":"(anonymous_9)","decl":{"start":{"line":63,"column":38},"end":{"line":63,"column":39}},"loc":{"start":{"line":63,"column":45},"end":{"line":91,"column":1}},"line":63},"10":{"name":"(anonymous_10)","decl":{"start":{"line":78,"column":25},"end":{"line":78,"column":26}},"loc":{"start":{"line":78,"column":31},"end":{"line":78,"column":63}},"line":78},"11":{"name":"(anonymous_11)","decl":{"start":{"line":92,"column":20},"end":{"line":92,"column":21}},"loc":{"start":{"line":92,"column":27},"end":{"line":92,"column":61}},"line":92},"12":{"name":"(anonymous_12)","decl":{"start":{"line":92,"column":39},"end":{"line":92,"column":40}},"loc":{"start":{"line":92,"column":44},"end":{"line":92,"column":60}},"line":92}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":19,"column":5}},{"start":{"line":17,"column":4},"end":{"line":19,"column":5}}],"line":17},"4":{"loc":{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},"type":"if","locations":[{"start":{"line":27,"column":4},"end":{"line":29,"column":5}},{"start":{"line":27,"column":4},"end":{"line":29,"column":5}}],"line":27},"5":{"loc":{"start":{"line":43,"column":4},"end":{"line":61,"column":5}},"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":61,"column":5}},{"start":{"line":43,"column":4},"end":{"line":61,"column":5}}],"line":43},"6":{"loc":{"start":{"line":46,"column":9},"end":{"line":61,"column":5}},"type":"if","locations":[{"start":{"line":46,"column":9},"end":{"line":61,"column":5}},{"start":{"line":46,"column":9},"end":{"line":61,"column":5}}],"line":46},"7":{"loc":{"start":{"line":47,"column":8},"end":{"line":57,"column":9}},"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":57,"column":9}},{"start":{"line":47,"column":8},"end":{"line":57,"column":9}}],"line":47},"8":{"loc":{"start":{"line":64,"column":4},"end":{"line":90,"column":5}},"type":"if","locations":[{"start":{"line":64,"column":4},"end":{"line":90,"column":5}},{"start":{"line":64,"column":4},"end":{"line":90,"column":5}}],"line":64},"9":{"loc":{"start":{"line":68,"column":8},"end":{"line":74,"column":9}},"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":74,"column":9}},{"start":{"line":68,"column":8},"end":{"line":74,"column":9}}],"line":68},"10":{"loc":{"start":{"line":76,"column":9},"end":{"line":90,"column":5}},"type":"if","locations":[{"start":{"line":76,"column":9},"end":{"line":90,"column":5}},{"start":{"line":76,"column":9},"end":{"line":90,"column":5}}],"line":76},"11":{"loc":{"start":{"line":77,"column":8},"end":{"line":86,"column":9}},"type":"if","locations":[{"start":{"line":77,"column":8},"end":{"line":86,"column":9}},{"start":{"line":77,"column":8},"end":{"line":86,"column":9}}],"line":77}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":1,"30":0,"31":1,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":0,"64":0},"f":{"0":2,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"0":[1,1,1],"1":[0,2],"2":[2,2],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/common/util.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/common/util.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport bson from 'bson';\nimport { sha1sum } from './crypto_util';\nimport { FileKey, Sha1Hash } from '../interfaces/core';\n\nexport const randomString = (num_chars: number) => {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < num_chars; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    return text;\n}\n\nexport const randomAlphaString = (num_chars: number) => {\n    if (!num_chars) {\n        throw Error('randomAlphaString: num_chars needs to be a positive integer.')\n    }\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    for (var i = 0; i < num_chars; i++)\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n    return text;\n}\n\nexport const sha1MatchesFileKey = ({sha1, fileKey}: {sha1: Sha1Hash, fileKey: FileKey}) => {\n    if (fileKey.sha1) {\n        return fileKey.sha1 === sha1\n    }\n    return false\n}\n\nexport const readJsonFile = async (path: string) => {\n    const txt = await fs.promises.readFile(path, 'utf-8');\n    return JSON.parse(txt);\n}\n\nexport const kacheryP2PSerialize = (x: Object) => {\n    return bson.serialize(sortKeysInObject(x));\n}\n\nexport const kacheryP2PDeserialize = (x: Buffer) => {\n    return convertBinaryToBufferInObject(bson.deserialize(x));\n}\n\nconst sortKeysInObject = (x: any): any => {\n    if (x instanceof Buffer) {\n        return x;\n    }\n    else if (x instanceof Object) {\n        if (Array.isArray(x)) {\n            return x.map(a => (sortKeysInObject(a)));\n        }\n        else {\n            const keys = Object.keys(x).sort();\n            let ret: any = {};\n            for (let k of keys) {\n                ret[k] = sortKeysInObject(x[k]);\n            }\n            return ret;\n        }\n    }\n    else {\n        return x;\n    }\n}\n\nconst convertBinaryToBufferInObject = (x: any): any => {\n    if (x instanceof bson.Binary) {\n        // This might be the troublesome line.\n        // We should check to see if the underlying type is byte array before returning the internal buffer.\n        const ret = x.buffer\n        if (ret instanceof Buffer) {\n            return ret\n        }\n        else {\n            console.warn(ret)\n            throw Error(`Problem in convertBinaryToBufferInObject`)\n        }\n    }\n    else if (x instanceof Object) {\n        if (Array.isArray(x)) {\n            return x.map(a => (convertBinaryToBufferInObject(a)));\n        }\n        else {\n            const ret: any = {};\n            for (let k in x) {\n                ret[k] = convertBinaryToBufferInObject(x[k])\n            }\n            return ret;\n        }\n    }\n    else {\n        return x;\n    }\n}\n\n\nexport const sleepMsec = (m: number) => new Promise(r => setTimeout(r, m));"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"597d923ff59229328cba733b3ac61457f96fe3b2","contentHash":"80e62f2d44bc2fbc2ef0e5cf289269491b170026afe7d1aa06a51d75ceb9d109"},"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/NodeToNodeRequest.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/NodeToNodeRequest.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":868}},"4":{"start":{"line":7,"column":26},"end":{"line":7,"column":55}},"5":{"start":{"line":8,"column":15},"end":{"line":8,"column":32}},"6":{"start":{"line":9,"column":17},"end":{"line":9,"column":51}},"7":{"start":{"line":10,"column":15},"end":{"line":10,"column":40}},"8":{"start":{"line":11,"column":0},"end":{"line":11,"column":20}},"9":{"start":{"line":12,"column":0},"end":{"line":16,"column":2}},"10":{"start":{"line":13,"column":4},"end":{"line":14,"column":21}},"11":{"start":{"line":14,"column":8},"end":{"line":14,"column":21}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":38}},"13":{"start":{"line":17,"column":0},"end":{"line":19,"column":2}},"14":{"start":{"line":18,"column":4},"end":{"line":18,"column":40}},"15":{"start":{"line":20,"column":0},"end":{"line":20,"column":100}},"16":{"start":{"line":20,"column":34},"end":{"line":20,"column":97}},"17":{"start":{"line":21,"column":0},"end":{"line":30,"column":2}},"18":{"start":{"line":22,"column":4},"end":{"line":29,"column":7}},"19":{"start":{"line":31,"column":0},"end":{"line":40,"column":2}},"20":{"start":{"line":32,"column":4},"end":{"line":39,"column":7}},"21":{"start":{"line":41,"column":0},"end":{"line":52,"column":2}},"22":{"start":{"line":42,"column":4},"end":{"line":51,"column":22}},"23":{"start":{"line":53,"column":0},"end":{"line":64,"column":2}},"24":{"start":{"line":54,"column":4},"end":{"line":63,"column":22}},"25":{"start":{"line":65,"column":0},"end":{"line":70,"column":2}},"26":{"start":{"line":66,"column":4},"end":{"line":69,"column":7}},"27":{"start":{"line":71,"column":0},"end":{"line":76,"column":2}},"28":{"start":{"line":72,"column":4},"end":{"line":75,"column":7}},"29":{"start":{"line":77,"column":0},"end":{"line":82,"column":2}},"30":{"start":{"line":78,"column":4},"end":{"line":81,"column":7}},"31":{"start":{"line":83,"column":0},"end":{"line":89,"column":2}},"32":{"start":{"line":84,"column":4},"end":{"line":88,"column":7}},"33":{"start":{"line":90,"column":0},"end":{"line":95,"column":2}},"34":{"start":{"line":91,"column":4},"end":{"line":94,"column":7}},"35":{"start":{"line":96,"column":0},"end":{"line":102,"column":2}},"36":{"start":{"line":97,"column":4},"end":{"line":101,"column":7}},"37":{"start":{"line":103,"column":0},"end":{"line":108,"column":2}},"38":{"start":{"line":104,"column":4},"end":{"line":107,"column":7}},"39":{"start":{"line":109,"column":0},"end":{"line":115,"column":2}},"40":{"start":{"line":110,"column":4},"end":{"line":114,"column":7}},"41":{"start":{"line":116,"column":0},"end":{"line":121,"column":2}},"42":{"start":{"line":117,"column":4},"end":{"line":120,"column":7}},"43":{"start":{"line":122,"column":0},"end":{"line":127,"column":2}},"44":{"start":{"line":123,"column":4},"end":{"line":126,"column":7}},"45":{"start":{"line":128,"column":0},"end":{"line":135,"column":2}},"46":{"start":{"line":129,"column":4},"end":{"line":134,"column":7}},"47":{"start":{"line":136,"column":0},"end":{"line":142,"column":2}},"48":{"start":{"line":137,"column":4},"end":{"line":141,"column":7}},"49":{"start":{"line":143,"column":0},"end":{"line":152,"column":2}},"50":{"start":{"line":144,"column":4},"end":{"line":151,"column":7}},"51":{"start":{"line":153,"column":0},"end":{"line":160,"column":2}},"52":{"start":{"line":154,"column":4},"end":{"line":159,"column":7}},"53":{"start":{"line":161,"column":0},"end":{"line":168,"column":2}},"54":{"start":{"line":162,"column":4},"end":{"line":167,"column":7}},"55":{"start":{"line":169,"column":0},"end":{"line":176,"column":2}},"56":{"start":{"line":170,"column":4},"end":{"line":175,"column":7}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":21},"end":{"line":12,"column":22}},"loc":{"start":{"line":12,"column":28},"end":{"line":16,"column":1}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":25},"end":{"line":17,"column":26}},"loc":{"start":{"line":17,"column":31},"end":{"line":19,"column":1}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":26},"end":{"line":20,"column":27}},"loc":{"start":{"line":20,"column":32},"end":{"line":20,"column":99}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":21,"column":30},"end":{"line":21,"column":31}},"loc":{"start":{"line":21,"column":37},"end":{"line":30,"column":1}},"line":21},"5":{"name":"(anonymous_5)","decl":{"start":{"line":31,"column":31},"end":{"line":31,"column":32}},"loc":{"start":{"line":31,"column":38},"end":{"line":40,"column":1}},"line":31},"6":{"name":"(anonymous_6)","decl":{"start":{"line":41,"column":34},"end":{"line":41,"column":35}},"loc":{"start":{"line":41,"column":41},"end":{"line":52,"column":1}},"line":41},"7":{"name":"(anonymous_7)","decl":{"start":{"line":53,"column":35},"end":{"line":53,"column":36}},"loc":{"start":{"line":53,"column":42},"end":{"line":64,"column":1}},"line":53},"8":{"name":"(anonymous_8)","decl":{"start":{"line":65,"column":38},"end":{"line":65,"column":39}},"loc":{"start":{"line":65,"column":45},"end":{"line":70,"column":1}},"line":65},"9":{"name":"(anonymous_9)","decl":{"start":{"line":71,"column":39},"end":{"line":71,"column":40}},"loc":{"start":{"line":71,"column":46},"end":{"line":76,"column":1}},"line":71},"10":{"name":"(anonymous_10)","decl":{"start":{"line":77,"column":32},"end":{"line":77,"column":33}},"loc":{"start":{"line":77,"column":39},"end":{"line":82,"column":1}},"line":77},"11":{"name":"(anonymous_11)","decl":{"start":{"line":83,"column":33},"end":{"line":83,"column":34}},"loc":{"start":{"line":83,"column":40},"end":{"line":89,"column":1}},"line":83},"12":{"name":"(anonymous_12)","decl":{"start":{"line":90,"column":36},"end":{"line":90,"column":37}},"loc":{"start":{"line":90,"column":43},"end":{"line":95,"column":1}},"line":90},"13":{"name":"(anonymous_13)","decl":{"start":{"line":96,"column":37},"end":{"line":96,"column":38}},"loc":{"start":{"line":96,"column":44},"end":{"line":102,"column":1}},"line":96},"14":{"name":"(anonymous_14)","decl":{"start":{"line":103,"column":40},"end":{"line":103,"column":41}},"loc":{"start":{"line":103,"column":47},"end":{"line":108,"column":1}},"line":103},"15":{"name":"(anonymous_15)","decl":{"start":{"line":109,"column":41},"end":{"line":109,"column":42}},"loc":{"start":{"line":109,"column":48},"end":{"line":115,"column":1}},"line":109},"16":{"name":"(anonymous_16)","decl":{"start":{"line":116,"column":48},"end":{"line":116,"column":49}},"loc":{"start":{"line":116,"column":55},"end":{"line":121,"column":1}},"line":116},"17":{"name":"(anonymous_17)","decl":{"start":{"line":122,"column":49},"end":{"line":122,"column":50}},"loc":{"start":{"line":122,"column":56},"end":{"line":127,"column":1}},"line":122},"18":{"name":"(anonymous_18)","decl":{"start":{"line":128,"column":47},"end":{"line":128,"column":48}},"loc":{"start":{"line":128,"column":54},"end":{"line":135,"column":1}},"line":128},"19":{"name":"(anonymous_19)","decl":{"start":{"line":136,"column":48},"end":{"line":136,"column":49}},"loc":{"start":{"line":136,"column":55},"end":{"line":142,"column":1}},"line":136},"20":{"name":"(anonymous_20)","decl":{"start":{"line":143,"column":49},"end":{"line":143,"column":50}},"loc":{"start":{"line":143,"column":56},"end":{"line":152,"column":1}},"line":143},"21":{"name":"(anonymous_21)","decl":{"start":{"line":153,"column":50},"end":{"line":153,"column":51}},"loc":{"start":{"line":153,"column":57},"end":{"line":160,"column":1}},"line":153},"22":{"name":"(anonymous_22)","decl":{"start":{"line":161,"column":40},"end":{"line":161,"column":41}},"loc":{"start":{"line":161,"column":47},"end":{"line":168,"column":1}},"line":161},"23":{"name":"(anonymous_23)","decl":{"start":{"line":169,"column":41},"end":{"line":169,"column":42}},"loc":{"start":{"line":169,"column":48},"end":{"line":176,"column":1}},"line":169}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":13,"column":4},"end":{"line":14,"column":21}},"type":"if","locations":[{"start":{"line":13,"column":4},"end":{"line":14,"column":21}},{"start":{"line":13,"column":4},"end":{"line":14,"column":21}}],"line":13},"4":{"loc":{"start":{"line":42,"column":11},"end":{"line":51,"column":21}},"type":"cond-expr","locations":[{"start":{"line":51,"column":9},"end":{"line":51,"column":13}},{"start":{"line":51,"column":16},"end":{"line":51,"column":21}}],"line":42},"5":{"loc":{"start":{"line":54,"column":11},"end":{"line":63,"column":21}},"type":"cond-expr","locations":[{"start":{"line":63,"column":9},"end":{"line":63,"column":13}},{"start":{"line":63,"column":16},"end":{"line":63,"column":21}}],"line":54}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1,"16":0,"17":1,"18":0,"19":1,"20":0,"21":1,"22":0,"23":1,"24":0,"25":1,"26":0,"27":1,"28":0,"29":1,"30":0,"31":1,"32":0,"33":1,"34":0,"35":1,"36":0,"37":1,"38":0,"39":1,"40":0,"41":1,"42":0,"43":1,"44":0,"45":1,"46":0,"47":1,"48":0,"49":1,"50":0,"51":1,"52":0,"53":1,"54":0,"55":1,"56":0},"f":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0,0],"4":[0,0],"5":[0,0]},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/interfaces/NodeToNodeRequest.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/interfaces/NodeToNodeRequest.ts"],"names":[],"mappings":"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","sourcesContent":["import { protocolVersion } from \"../protocolVersion\"\nimport { ChannelName, isChannelName, isNodeId, isRequestId, NodeId, RequestId, Timestamp, _validateObject, isTimestamp, isOneOf, isEqualTo, ChannelNodeInfo, isChannelNodeInfo, FileKey, isFileKey, FeedId, isFeedId, LiveFeedSubscriptions, isLiveFeedSubscriptions, optional, isBoolean, isNumber, ChannelInfo, isChannelInfo, Signature, SubfeedHash, isSubfeedHash, isNull, SubmittedSubfeedMessage, isSubmittedSubfeedMessage, ErrorMessage, isErrorMessage, isBigInt, SignedSubfeedMessage, isArrayOf, isSignedSubfeedMessage, ProtocolVersion, isString } from \"./core\"\nimport assert from 'assert'\nimport { randomAlphaString } from \"../common/util\"\n\nexport const _tests: {[key: string]: () => void} = {}\n\n// StreamId\nexport interface StreamId extends String {\n    __streamId__: never // phantom type\n}\nexport const isStreamId = (x: any): x is StreamId => {\n    if (!isString(x)) return false;\n    return (/^[A-Za-z]{10}$/.test(x))\n}\nexport const createStreamId = () => {\n    return randomAlphaString(10) as any as StreamId\n}\n_tests.StreamId = () => { assert(isStreamId(createStreamId())) }\n\n\nexport interface NodeToNodeRequest {\n    body: {\n        protocolVersion: ProtocolVersion,\n        requestId: RequestId,\n        fromNodeId: NodeId,\n        toNodeId: NodeId,\n        timestamp: Timestamp,\n        requestData: NodeToNodeRequestData,\n    },\n    signature: Signature\n}\nexport const isNodeToNodeRequest = (x: any): x is NodeToNodeRequest => {\n    return _validateObject(x, {\n        protocolVersion: isEqualTo(protocolVersion()),\n        requestId: isRequestId,\n        fromNodeId: isNodeId,\n        toNodeId: isNodeId,\n        timestamp: isTimestamp,\n        requestData: isNodeToNodeRequestData\n    })\n}\nexport interface NodeToNodeResponse {\n    body: {\n        protocolVersion: ProtocolVersion,\n        requestId: RequestId,\n        fromNodeId: NodeId,\n        toNodeId: NodeId,\n        timestamp: Timestamp,\n        responseData: NodeToNodeResponseData\n    },\n    signature: Signature\n}\nexport const isNodeToNodeResponse = (x: any): x is NodeToNodeResponse => {\n    return _validateObject(x, {\n        protocolVersion: isEqualTo(protocolVersion()),\n        requestId: isRequestId,\n        fromNodeId: isNodeId,\n        toNodeId: isNodeId,\n        timestamp: isTimestamp,\n        responseData: isNodeToNodeResponseData\n    })\n}\n\nexport type NodeToNodeRequestData = (\n    GetChannelInfoRequestData |\n    AnnounceRequestData |\n    CheckForFileRequestData |\n    CheckForLiveFeedRequestData |\n    SetLiveFeedSubscriptionsRequestData |\n    SubmitMessageToLiveFeedRequestData |\n    GetLiveFeedSignedMessagesRequestData |\n    DownloadFileDataRequestData\n)\nexport const isNodeToNodeRequestData = (x: any): x is NodeToNodeRequestData => {\n    return isOneOf([\n        isGetChannelInfoRequestData,\n        isAnnounceRequestData,\n        isCheckForFileRequestData,\n        isCheckForLiveFeedRequestData,\n        isSetLiveFeedSubscriptionsRequestData,\n        isSubmitMessageToLiveFeedRequestData,\n        isGetLiveFeedSignedMessagesRequestData,\n        isDownloadFileDataRequestData\n    ]) ? true : false;\n}\nexport type NodeToNodeResponseData = (\n    GetChannelInfoResponseData |\n    AnnounceResponseData |\n    CheckForFileResponseData |\n    CheckForLiveFeedResponseData |\n    SetLiveFeedSubscriptionsResponseData |\n    SubmitMessageToLiveFeedResponseData |\n    GetLiveFeedSignedMessagesResponseData |\n    DownloadFileDataResponseData\n)\nexport const isNodeToNodeResponseData = (x: any): x is NodeToNodeResponseData => {\n    return isOneOf([\n        isGetChannelInfoResponseData,\n        isAnnounceResponseData,\n        isCheckForFileResponseData,\n        isCheckForLiveFeedResponseData,\n        isSetLiveFeedSubscriptionsResponseData,\n        isSubmitMessageToLiveFeedResponseData,\n        isGetLiveFeedSignedMessagesResponseData,\n        isDownloadFileDataResponseData\n    ]) ? true : false;\n}\n\n// getChannelInfo\nexport interface GetChannelInfoRequestData {\n    requestType: 'getChannelInfo',\n    channelName: ChannelName\n}\nexport const isGetChannelInfoRequestData = (x: any): x is GetChannelInfoRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('getChannelInfo'),\n        channelName: isChannelName\n    })\n}\nexport interface GetChannelInfoResponseData {\n    requestType: 'getChannelInfo',\n    channelInfo: ChannelInfo\n}\nexport const isGetChannelInfoResponseData = (x: any): x is GetChannelInfoResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('getChannelInfo'),\n        channelInfo: isChannelInfo\n    })\n}\n\n// announce\nexport interface AnnounceRequestData {\n    requestType: 'announce',\n    channelNodeInfo: ChannelNodeInfo\n}\nexport const isAnnounceRequestData = (x: any): x is AnnounceRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('announce'),\n        channelNodeInfo: isChannelNodeInfo\n    })\n}\nexport interface AnnounceResponseData {\n    requestType: 'announce',\n    success: boolean,\n    errorMessage: ErrorMessage | null\n}\nexport const isAnnounceResponseData = (x: any): x is AnnounceResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('announce'),\n        success: isBoolean,\n        errorMessage: isErrorMessage\n    })\n}\n\n// checkForFile\nexport interface CheckForFileRequestData {\n    requestType: 'checkForFile',\n    fileKey: FileKey\n}\nexport const isCheckForFileRequestData = (x: any): x is CheckForFileRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('checkForFile'),\n        fileKey: isFileKey\n    })\n}\nexport interface CheckForFileResponseData {\n    requestType: 'checkForFile',\n    found: boolean,\n    size: bigint | null\n}\nexport const isCheckForFileResponseData = (x: any): x is CheckForFileResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('checkForFile'),\n        found: isBoolean,\n        size: isOneOf([isNull, isBigInt])\n    })\n}\n\n// checkForLiveFeed\nexport interface CheckForLiveFeedRequestData {\n    requestType: 'checkForLiveFeed',\n    feedId: FeedId\n}\nexport const isCheckForLiveFeedRequestData = (x: any): x is CheckForLiveFeedRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('checkForLiveFeed'),\n        feedId: isFeedId\n    })\n}\nexport interface CheckForLiveFeedResponseData {\n    requestType: 'checkForLiveFeed',\n    found: boolean\n}\nexport const isCheckForLiveFeedResponseData = (x: any): x is CheckForLiveFeedResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('checkForLiveFeed'),\n        found: isBoolean,\n        numMessages: optional(isNumber)\n    })\n}\n\n// setLiveFeedSubscriptions\nexport interface SetLiveFeedSubscriptionsRequestData {\n    requestType: 'setLiveFeedSubscriptions',\n    liveFeedSubscriptions: LiveFeedSubscriptions\n}\nexport const isSetLiveFeedSubscriptionsRequestData = (x: any): x is SetLiveFeedSubscriptionsRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('setLiveFeedSubscriptions'),\n        liveFeedSubscriptions: isLiveFeedSubscriptions\n    })\n}\nexport interface SetLiveFeedSubscriptionsResponseData {\n    requestType: 'setLiveFeedSubscriptions',\n    success: boolean\n}\nexport const isSetLiveFeedSubscriptionsResponseData = (x: any): x is SetLiveFeedSubscriptionsResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('setLiveFeedSubscriptions'),\n        success: isBoolean\n    })\n}\n\n// submitMessageToLiveFeed\nexport interface SubmitMessageToLiveFeedRequestData {\n    requestType: 'submitMessageToLiveFeed',\n    feedId: FeedId,\n    subfeedHash: SubfeedHash,\n    message: SubmittedSubfeedMessage\n}\nexport const isSubmitMessageToLiveFeedRequestData = (x: any): x is SubmitMessageToLiveFeedRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('submitMessageToLiveFeed'),\n        feedId: isFeedId,\n        subfeedHash: isSubfeedHash,\n        message: isSubmittedSubfeedMessage\n    })\n}\nexport interface SubmitMessageToLiveFeedResponseData {\n    requestType: 'submitMessageToLiveFeed',\n    success: boolean,\n    errorMessage: ErrorMessage | null\n}\nexport const isSubmitMessageToLiveFeedResponseData = (x: any): x is SubmitMessageToLiveFeedResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('submitMessageToLiveFeed'),\n        success: isBoolean,\n        errorMessage: isOneOf([isNull, isErrorMessage])\n    })\n}\n\n// getLiveFeedSignedMessages\nexport interface GetLiveFeedSignedMessagesRequestData {\n    requestType: 'getLiveFeedSignedMessages',\n    feedId: FeedId,\n    subfeedHash: SubfeedHash,\n    position: number,\n    maxNumMessages: number,\n    waitMsec: number\n}\nexport const isGetLiveFeedSignedMessagesRequestData = (x: any): x is GetLiveFeedSignedMessagesRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('getLiveFeedSignedMessages'),\n        feedId: isFeedId,\n        subfeedHash: isSubfeedHash,\n        position: isNumber,\n        maxNumMessages: isNumber,\n        waitMsec: isNumber\n    })\n}\nexport interface GetLiveFeedSignedMessagesResponseData {\n    requestType: 'getLiveFeedSignedMessages',\n    success: boolean,\n    signedMessages: SignedSubfeedMessage[] | null,\n    errorMessage: ErrorMessage | null\n}\nexport const isGetLiveFeedSignedMessagesResponseData = (x: any): x is GetLiveFeedSignedMessagesResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('getLiveFeedSignedMessages'),\n        success: isBoolean,\n        signedMessages: isArrayOf(isSignedSubfeedMessage),\n        errorMessage: isOneOf([isNull, isErrorMessage])\n    })\n}\n\n// downloadFileData\nexport interface DownloadFileDataRequestData {\n    requestType: 'downloadFileData',\n    fileKey: FileKey,\n    startByte: bigint,\n    endByte: bigint\n}\nexport const isDownloadFileDataRequestData = (x: any): x is DownloadFileDataRequestData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('downloadFileData'),\n        fileKey: isFileKey,\n        startByte: isBigInt,\n        endByte: isBigInt\n    })\n}\nexport interface DownloadFileDataResponseData {\n    requestType: 'downloadFileData',\n    success: boolean,\n    streamId: StreamId | null,\n    errorMessage: ErrorMessage | null\n}\nexport const isDownloadFileDataResponseData = (x: any): x is DownloadFileDataResponseData => {\n    return _validateObject(x, {\n        requestType: isEqualTo('downloadFileData'),\n        success: isBoolean,\n        streamId: isOneOf([isNull, isStreamId]),\n        errorMessage: isOneOf([isNull, isErrorMessage])\n    })\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"33d76493479893fe545d9a0e4dd389aeed29f96e","contentHash":"8cf748003d3ddbfc039b98f91e7832bae81bd736f0d3284b0fc1f33982a73552"},"/home/jsoules/src/kachery-p2p/daemon/src/protocolVersion.ts":{"path":"/home/jsoules/src/kachery-p2p/daemon/src/protocolVersion.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":57}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":44}},"3":{"start":{"line":5,"column":23},"end":{"line":5,"column":42}},"4":{"start":{"line":6,"column":0},"end":{"line":8,"column":2}},"5":{"start":{"line":7,"column":4},"end":{"line":7,"column":28}},"6":{"start":{"line":9,"column":0},"end":{"line":11,"column":2}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":26},"end":{"line":6,"column":27}},"loc":{"start":{"line":6,"column":32},"end":{"line":8,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":24},"end":{"line":9,"column":25}},"loc":{"start":{"line":9,"column":30},"end":{"line":11,"column":1}},"line":9}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":1,"7":0},"f":{"0":0,"1":0},"b":{},"inputSourceMap":{"version":3,"file":"/home/jsoules/src/kachery-p2p/daemon/src/protocolVersion.ts","sources":["/home/jsoules/src/kachery-p2p/daemon/src/protocolVersion.ts"],"names":[],"mappings":";;;AAEA,MAAM,gBAAgB,GAAG,mBAAmB,CAAC;AAC7C,MAAM,cAAc,GAAG,mBAAmB,CAAC;AAE9B,QAAA,eAAe,GAAG,GAAoB,EAAE;IACjD,OAAO,gBAA0C,CAAC;AACtD,CAAC,CAAA;AAEY,QAAA,aAAa,GAAG,GAAkB,EAAE;IAC7C,OAAO,cAAsC,CAAC;AAClD,CAAC,CAAA","sourcesContent":["import { DaemonVersion, ProtocolVersion } from './interfaces/core'\n\nconst PROTOCOL_VERSION = 'kachery-p2p-0.5.0';\nconst DAEMON_VERSION = 'kachery-p2p-0.5.0';\n\nexport const protocolVersion = (): ProtocolVersion => {\n    return PROTOCOL_VERSION as any as ProtocolVersion;\n}\n\nexport const daemonVersion = (): DaemonVersion => {\n    return DAEMON_VERSION as any as DaemonVersion;\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"03364de36ae133e9c4d9029fa50bbdd1aa6236d0","contentHash":"01a49b914d724bb41ebf74aa2982807b018038ba672a80ad45800525cf8749cc"}}